var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/pipes/EnNumPipe.html",[0,0.931,1,1.693]],["body/pipes/EnNumPipe.html",[0,1.208,1,2.72,2,2.002,3,0.459,4,0.459,5,0.348,6,0.367,7,3.486,8,0.717,9,3.335,10,1.699,11,2.579,12,2.999,13,2.701,14,2.48,15,4.319,16,0.033,17,4.906,18,2.002,19,0.641,20,1.021,21,2.421,22,2.999,23,1.554,24,0.579,25,4.176,26,0.579,27,0.402,28,0.517,29,1.028,30,4.319,31,3.335,32,2.72,33,4.319,34,2.48,35,2.72,36,0.857,37,1.496,38,4.319,39,1.16,40,2.999,41,0.936,42,2.265,43,2.692,44,2.692,45,2.692,46,0.517,47,0.246,48,1.424,49,3.031,50,1.16,51,1.111,52,3.031,53,4.176,54,0.021,55,0.026,56,0.021]],["title/pipes/FaNumPipe.html",[0,0.931,57,1.693]],["body/pipes/FaNumPipe.html",[0,1.208,2,2.002,3,0.459,4,0.459,5,0.348,6,0.367,8,0.717,9,3.335,10,1.699,11,2.701,13,2.579,14,2.48,16,0.033,18,2.002,19,0.641,20,1.021,21,2.421,22,2.999,23,1.554,24,0.579,26,0.579,27,0.402,28,0.517,29,0.957,34,2.084,35,2.72,36,0.857,37,1.496,38,4.319,39,1.16,40,2.999,41,0.936,42,2.265,43,2.692,44,2.692,45,2.692,46,0.517,47,0.246,48,1.424,49,3.031,50,1.16,51,1.111,52,3.031,54,0.021,55,0.026,56,0.021,57,2.72,58,3.486,59,3.788,60,4.319,61,4.906,62,1.131,63,4.176,64,5.174,65,4.176]],["title/pipes/IRCurrencyPipe.html",[0,0.931,66,1.693]],["body/pipes/IRCurrencyPipe.html",[0,1.668,2,1.719,3,0.394,4,0.394,5,0.299,6,0.333,8,0.651,14,2.251,16,0.033,18,1.719,19,0.582,20,0.877,21,2.079,22,2.723,23,1.562,24,0.497,26,0.497,27,0.601,28,0.444,29,1.007,34,1.892,36,0.736,37,1.358,39,1.053,40,2.723,41,0.804,45,2.312,46,0.582,47,0.212,48,1.223,50,0.804,51,1.393,54,0.018,55,0.023,56,0.018,62,1.108,66,2.469,67,2.604,68,2.723,69,4.939,70,2.531,71,4.376,72,3.921,73,3.027,74,3.921,75,3.801,76,3.801,77,2.752,78,5.556,79,3.921,80,2.251,81,4.697,82,3.921,83,3.027,84,5.556,85,5.556,86,2.438,87,3.921,88,5.767,89,3.587,90,2.251,91,3.921,92,4.697,93,3.587,94,4.697,95,2.994,96,2.079,97,2.994,98,2.312,99,3.587,100,3.587,101,3.587,102,1.445,103,1.445,104,3.587,105,2.604,106,3.587,107,3.587]],["title/classes/InvalidJalaliDateError.html",[47,0.19,108,1.867]],["body/classes/InvalidJalaliDateError.html",[3,0.504,4,0.504,5,0.382,6,0.389,8,0.635,16,0.032,19,0.568,24,0.635,26,0.635,27,0.442,28,0.568,46,0.568,47,0.27,54,0.023,55,0.027,56,0.023,77,2.879,102,1.847,108,3.395,109,2.41,110,3.827,111,3.517,112,3.328,113,2.57,114,1.847,115,2.012,116,3.175,117,2.657,118,2.012,119,3.53,120,4.585,121,2.657,122,2.657,123,2.657,124,2.41,125,2.657,126,2.657,127,2.657,128,2.657,129,2.657,130,3.175,131,3.175,132,2.657,133,2.657,134,2.657,135,2.41]],["title/classes/InvalidMobileOperatorError.html",[47,0.19,136,1.867]],["body/classes/InvalidMobileOperatorError.html",[3,0.504,4,0.504,5,0.382,6,0.389,8,0.635,16,0.032,19,0.568,24,0.635,26,0.635,27,0.442,28,0.568,46,0.568,47,0.27,54,0.023,55,0.027,56,0.023,62,1.025,77,2.879,102,1.847,109,2.41,111,3.517,112,3.328,114,1.847,118,2.012,119,3.53,121,2.657,122,2.657,123,2.657,124,2.41,125,2.657,126,2.657,127,2.657,128,2.657,129,2.657,130,3.175,131,3.175,132,2.657,133,2.657,134,2.657,136,3.395,137,3.827,138,2.625,139,3.53,140,2.012,141,4.585,142,3.827]],["title/classes/InvalidMobilePhoneNumberError.html",[47,0.19,143,1.867]],["body/classes/InvalidMobilePhoneNumberError.html",[3,0.506,4,0.506,5,0.384,6,0.39,8,0.639,16,0.032,19,0.571,24,0.639,26,0.639,27,0.444,28,0.571,46,0.571,47,0.272,54,0.023,55,0.027,56,0.023,62,1.029,77,2.888,102,1.856,109,2.422,111,3.523,114,2.213,118,2.022,119,3.541,121,2.671,122,2.671,123,2.671,124,2.422,125,2.671,126,2.671,127,2.671,128,2.671,129,2.671,130,3.184,131,3.184,132,2.671,133,2.671,134,2.671,138,2.209,140,2.411,143,3.402,144,3.847,145,4.608]],["title/classes/InvalidNationalCodeError.html",[47,0.19,146,1.867]],["body/classes/InvalidNationalCodeError.html",[3,0.483,4,0.483,5,0.367,6,0.408,8,0.609,16,0.033,19,0.545,23,1.499,24,0.74,26,0.609,27,0.515,28,0.545,29,0.748,46,0.545,47,0.259,54,0.022,55,0.026,56,0.022,62,0.823,77,2.807,102,1.771,109,2.311,111,3.468,114,2.151,118,1.929,121,3.334,122,2.548,123,2.548,124,2.311,125,2.548,126,2.548,127,2.548,128,2.548,129,2.548,130,3.095,131,3.095,132,2.548,133,2.548,134,2.548,138,2.107,140,1.929,146,3.334,147,3.669,148,0.986,149,2.343,150,3.951,151,5.34,152,5.34,153,5.34,154,3.442,155,2.343]],["title/classes/InvalidServiceInputError.html",[47,0.19,156,2.076]],["body/classes/InvalidServiceInputError.html",[3,0.504,4,0.504,5,0.382,6,0.389,8,0.635,16,0.032,19,0.568,24,0.635,26,0.635,27,0.442,28,0.568,29,0.997,37,1.326,46,0.568,47,0.27,54,0.023,55,0.027,56,0.023,77,2.879,102,1.847,109,2.41,111,3.517,114,1.847,118,2.012,119,3.53,121,2.657,122,2.657,123,2.657,124,2.41,125,2.657,126,2.657,127,2.657,128,2.657,129,2.657,130,3.175,131,3.175,132,2.657,133,2.657,134,2.657,135,2.41,156,3.775,157,3.827,158,2.403,159,1.847,160,4.585,161,3.328]],["title/injectables/JalaliDateCalculatorService.html",[162,0.857,163,2.076]],["body/injectables/JalaliDateCalculatorService.html",[3,0.194,4,0.612,5,0.147,6,0.39,8,0.716,11,1.23,16,0.033,19,0.656,20,1.127,24,0.748,26,0.733,27,0.51,28,0.656,31,1.806,36,1.172,39,0.971,41,0.396,46,0.219,47,0.206,50,1.083,51,1.374,54,0.017,55,0.014,56,0.009,62,1.219,86,1.529,103,1.404,108,1.023,113,2.813,114,0.711,116,3.61,117,3.067,118,0.774,148,0.396,149,1.23,155,2.2,159,1.599,161,3.507,162,0.746,163,1.806,164,0.846,165,3.988,166,1.473,167,3.328,168,4.391,169,2.339,170,2.339,171,1.038,172,1.343,173,2.802,174,2.301,175,2.339,176,2.339,177,2.339,178,2.339,179,2.339,180,2.339,181,2.339,182,2.339,183,2.339,184,1.765,185,2.51,186,1.765,187,1.473,188,3.638,189,3.507,190,1.765,191,4.31,192,2.08,193,2.791,194,1.281,195,3.748,196,3.919,197,4.069,198,3.114,199,4.189,200,2.791,201,2.633,202,2.802,203,1.765,204,2.971,205,2.034,206,2.51,207,2.034,208,2.971,209,3.641,210,2.339,211,3.969,212,3.638,213,2.802,214,1.765,215,2.339,216,3.143,217,3.485,218,2.802,219,1.765,220,1.806,221,2.53,222,3.847,223,1.129,224,2.339,225,2.802,226,1.765,227,1.806,228,3.313,229,4.608,230,3.969,231,2.802,232,1.765,233,2.339,234,2.802,235,1.765,236,2.034,237,3.313,238,2.339,239,2.034,240,2.802,241,2.802,242,2.802,243,2.339,244,2.802,245,3.969,246,2.802,247,2.802,248,2.802,249,2.802,250,2.802,251,2.881,252,2.802,253,2.339,254,2.339,255,1.765,256,1.806,257,2.802,258,1.765,259,1.473,260,2.034,261,2.339,262,3.614,263,1.806,264,3.313,265,1.765,266,1.137,267,1.137,268,1.473,269,1.473,270,1.765,271,1.765,272,0.846,273,0.774,274,1.765,275,3.969,276,3.969,277,1.765,278,2.931,279,3.969,280,1.765,281,2.339,282,2.802,283,3.485,284,1.765,285,2.246,286,1.765,287,3.485,288,3.231,289,1.765,290,1.765,291,1.765,292,2.339,293,2.02,294,1.832,295,1.765,296,1.765,297,1.765,298,2.339,299,1.671,300,1.765,301,2.802,302,1.765,303,1.765,304,1.473,305,1.765,306,1.765,307,1.765,308,1.765,309,1.765,310,1.765,311,1.765,312,1.765,313,1.765,314,1.765,315,2.802,316,1.765,317,2.802,318,1.765,319,1.765,320,1.765,321,1.765,322,1.765,323,1.765,324,1.765,325,1.765,326,1.765,327,1.765,328,1.473,329,1.765,330,1.765,331,1.765,332,1.765,333,2.802,334,1.765,335,2.802,336,1.765,337,1.765,338,1.765,339,1.765,340,1.281,341,3.485]],["title/injectables/JalaliDateValidatorService.html",[162,0.857,185,1.867]],["body/injectables/JalaliDateValidatorService.html",[3,0.284,4,0.484,5,0.216,6,0.42,8,0.765,16,0.033,19,0.684,20,1.181,24,0.811,26,0.765,27,0.544,28,0.684,29,0.75,31,3.115,36,1.215,39,0.988,41,0.58,46,0.32,47,0.153,50,1.084,51,1.365,54,0.013,55,0.019,56,0.013,62,1.229,70,2.121,80,1.24,86,1.934,105,1.878,108,1.499,113,2.749,114,1.947,115,1.135,116,3.597,117,2.172,118,1.934,148,0.58,149,1.645,155,1.645,158,2.121,162,0.997,164,1.24,165,4.3,168,2.72,171,1.388,172,2.564,185,2.172,188,4.453,189,4.004,195,4.18,196,4.101,197,3.926,198,3.642,199,3.508,200,3.306,201,1.796,208,3.642,209,2.416,212,2.72,216,2.72,221,2.72,223,1.042,227,2.416,236,1.878,239,2.72,251,2.72,256,2.841,260,3.508,263,1.667,266,1.667,267,1.667,268,2.159,269,2.159,272,1.24,273,1.135,342,2.159,343,3.128,344,1.97,345,3.128,346,1.934,347,2.72,348,2.72,349,3.128,350,2.416,351,2.416,352,3.128,353,2.172,354,2.811,355,4.407,356,4.407,357,3.128,358,3.128,359,3.128,360,3.128,361,3.128,362,3.128,363,3.128,364,3.748,365,2.587,366,2.587,367,2.316,368,2.587,369,2.479,370,3.128,371,2.587,372,2.112,373,1.645,374,2.587,375,2.587,376,1.775,377,3.679,378,2.72,379,2.159,380,3.679,381,2.587,382,1.667,383,1.878,384,1.667,385,2.587,386,2.587,387,3.128,388,2.587,389,3.128,390,2.72,391,3.748,392,2.587,393,2.587,394,2.587,395,2.159,396,3.679,397,3.679,398,2.587,399,2.587,400,2.587,401,2.587,402,2.587,403,2.587]],["title/pipes/JdatePipe.html",[0,0.931,404,1.693]],["body/pipes/JdatePipe.html",[0,1.591,2,1.229,3,0.282,4,0.282,5,0.214,6,0.311,8,0.608,14,2.865,16,0.033,18,1.229,19,0.698,20,0.627,21,1.486,22,2.159,23,1.546,24,0.709,26,0.516,27,0.359,28,0.461,29,0.746,36,1.094,37,1.077,39,0.835,40,2.159,41,0.575,46,0.318,47,0.151,48,0.875,50,1.079,51,1.167,54,0.022,55,0.018,56,0.013,68,2.79,70,1.924,83,3.546,96,2.542,98,4.064,113,2.521,115,1.634,116,2.159,124,1.958,159,1.767,171,1.625,172,1.785,192,1.939,194,4.339,198,3.102,256,2.401,346,1.634,351,2.401,354,1.958,376,1.5,404,1.958,405,1.861,406,3.853,407,3.183,408,4.661,409,3.724,410,3.724,411,3.109,412,2.703,413,3.724,414,4.451,415,3.724,416,3.724,417,3.724,418,3.724,419,3.724,420,3.724,421,2.703,422,3.724,423,3.109,424,3.383,425,3.183,426,2.401,427,2.703,428,3.109,429,3.71,430,3.494,431,4.292,432,3.109,433,4.451,434,3.183,435,5.332,436,3.994,437,4.091,438,4.091,439,4.091,440,4.017,441,3.71,442,3.71,443,3.994,444,4.017,445,3.183,446,3.183,447,3.183,448,3.183,449,3.183,450,3.109,451,2.564,452,3.724,453,2.564,454,5.502,455,3.661,456,3.109,457,2.564,458,3.109,459,2.564,460,1.125,461,2.564,462,2.141,463,2.564,464,3.724,465,2.564]],["title/injectables/MobilePhoneNumberService.html",[162,0.857,466,2.076]],["body/injectables/MobilePhoneNumberService.html",[3,0.257,4,0.257,5,0.195,6,0.349,8,0.682,9,2.243,10,1.545,11,2.02,13,2.647,16,0.033,19,0.753,20,1.125,23,1.54,24,0.638,26,0.638,27,0.444,28,0.57,29,0.398,34,2.477,36,1.127,39,0.932,41,0.524,46,0.515,47,0.138,50,1.33,51,1.309,54,0.021,55,0.017,56,0.012,62,0.862,70,1.026,80,1.668,86,2.264,96,2.668,102,1.402,103,1.674,114,2.152,115,1.527,135,1.829,136,2.409,138,2.359,139,3.916,140,2.602,143,2.409,148,0.524,155,2.264,158,2.02,159,1.854,162,0.926,164,1.12,192,1.674,272,1.12,273,1.026,278,2.42,344,1.829,346,1.527,350,2.243,367,2.359,369,2.345,372,2.561,373,1.527,376,1.854,378,2.526,424,2.99,426,1.507,460,1.824,466,2.243,467,3.172,468,1.355,469,3.479,470,2.243,471,3.572,472,3.469,473,2.904,474,3.469,475,2.904,476,3.479,477,4.46,478,2.338,479,2.679,480,2.967,481,2.904,482,2.017,483,3.341,484,5.103,485,3.479,486,1.951,487,3.843,488,2.904,489,3.843,490,2.42,491,2.526,492,2.904,493,2.904,494,2.904,495,2.904,496,2.904,497,2.904,498,3.479,499,2.338,500,3.341,501,3.479,502,2.338,503,2.243,504,2.526,505,2.338,506,2.338,507,3.017,508,1.829,509,1.12,510,1.951,511,2.243,512,2.243,513,2.243,514,2.243,515,2.243,516,2.243,517,2.243,518,2.243,519,2.243,520,2.243,521,2.243,522,2.243,523,1.951,524,1.951,525,1.507,526,1.951,527,1.951,528,1.951,529,1.951,530,1.951,531,1.951,532,1.951,533,1.951,534,1.951,535,1.951,536,1.951,537,1.951,538,1.951,539,1.951,540,1.951,541,1.951,542,1.951,543,1.951,544,1.951,545,1.951,546,1.951,547,1.951,548,1.951,549,1.951,550,1.951,551,1.951,552,1.951,553,1.951,554,1.951,555,1.951,556,1.951,557,1.951,558,1.951,559,1.951,560,1.951,561,1.951,562,1.951,563,1.951,564,1.951,565,1.951,566,1.951,567,1.951,568,1.951,569,1.951,570,1.951,571,3.843,572,2.338,573,2.338,574,2.338,575,2.338,576,3.479,577,2.338,578,2.338,579,2.338,580,2.338,581,2.338,582,2.338,583,1.951,584,2.338,585,1.951,586,1.951]],["title/pipes/NationalCodePipe.html",[0,0.931,587,1.693]],["body/pipes/NationalCodePipe.html",[0,1.176,2,1.95,3,0.447,4,0.447,5,0.339,6,0.361,8,0.706,12,2.951,14,2.44,16,0.033,18,1.95,19,0.631,20,0.994,21,2.358,22,2.951,23,1.567,24,0.564,26,0.564,27,0.392,28,0.504,29,0.946,34,2.051,35,2.676,36,0.835,37,1.684,39,0.912,40,2.951,41,0.912,45,2.622,46,0.504,47,0.24,48,1.387,50,1.246,51,1.082,52,2.953,54,0.02,55,0.025,56,0.02,62,1.162,68,2.951,90,2.44,150,3.281,154,3.281,155,2.234,294,2.676,299,1.95,408,3.695,490,2.138,491,4.439,587,2.676,588,3.396,589,4.131,590,4.068,591,4.249,592,5.091,593,4.249,594,2.676,595,3.396,596,4.068,597,4.068,598,4.068]],["title/injectables/NationalCodeService.html",[162,0.857,599,2.076]],["body/injectables/NationalCodeService.html",[3,0.381,4,0.381,5,0.289,6,0.389,8,0.636,16,0.033,19,0.638,20,1.123,23,1.517,24,0.714,26,0.714,27,0.496,28,0.638,34,1.396,36,1.17,37,1.831,39,1.03,41,0.777,46,0.429,47,0.204,50,1.03,51,0.922,54,0.023,55,0.023,56,0.017,62,1.119,115,2.015,146,2.009,148,0.777,150,2.96,154,2.96,155,2.015,158,2.015,159,2.297,162,1.222,164,1.661,171,1.701,200,2.234,201,2.468,207,2.516,220,2.234,223,2.074,263,2.234,272,1.661,273,1.521,344,2.414,346,2.572,347,3.333,350,2.96,354,2.707,367,2.201,369,2.26,372,2.201,373,2.015,376,1.396,383,3.333,384,2.234,390,2.516,395,2.893,412,2.516,427,2.516,470,2.96,500,2.516,503,2.234,504,3.333,509,2.201,571,3.833,589,3.778,594,3.08,599,2.96,600,4.576,601,2.893,602,4.592,603,4.592,604,4.592,605,3.833,606,4.576,607,4.592,608,3.466,609,4.592,610,3.333,611,4.592,612,3.333,613,4.592,614,3.333,615,3.466,616,3.466,617,2.893,618,2.893,619,2.516,620,2.516,621,2.893,622,3.466,623,3.466,624,3.466,625,3.466,626,2.893,627,2.893,628,2.893,629,2.893,630,2.893,631,2.893,632,2.893,633,3.466,634,3.466,635,2.516,636,3.466,637,3.466,638,3.466,639,3.466,640,3.466,641,4.592,642,3.466,643,3.466]],["title/modules/NgxPersianModule.html",[644,2.076,645,2.076]],["body/modules/NgxPersianModule.html",[1,3.362,3,0.425,4,0.425,5,0.323,6,0.274,16,0.032,39,1.376,41,0.867,46,0.479,47,0.228,54,0.019,55,0.024,56,0.019,57,3.362,66,3.362,404,3.362,587,3.362,644,2.493,645,4.254,646,2.807,647,2.493,648,3.228,649,3.94,650,3.228,651,2.493,652,4.531,653,3.228,654,3.228,655,3.228,656,3.066,657,3.362,658,4.116,659,3.228,660,2.493,661,3.868,662,3.868,663,4.116,664,3.868,665,2.242,666,3.868,667,3.868,668,3.868,669,3.868,670,3.868,671,3.868]],["title/interfaces/PLOptions.html",[672,1.298,673,1.544]],["body/interfaces/PLOptions.html",[3,0.306,4,0.306,5,0.233,6,0.198,8,0.387,10,1.794,12,1.617,13,1.224,16,0.033,23,1.223,27,0.482,28,0.714,29,1.05,34,1.594,35,1.466,36,1.084,37,1.695,39,1.031,41,0.625,42,1.124,44,1.798,46,0.49,47,0.165,48,0.951,50,1.23,51,1.459,54,0.03,55,0.02,56,0.014,62,0.937,80,2.398,86,2.195,90,2.629,103,1.594,115,1.224,148,0.625,149,1.736,158,1.736,159,1.852,162,1.052,171,1.033,172,2.531,192,2.128,193,1.798,204,1.798,223,1.124,272,1.337,273,1.224,278,2.079,344,2.883,353,1.617,354,2.416,367,2.763,369,2.687,372,2.203,373,1.736,376,1.124,424,1.617,460,1.224,482,1.617,490,1.466,508,1.466,509,2.203,594,1.466,610,3.337,614,2.025,672,1.852,673,2.398,674,1.798,675,1.617,676,2.025,677,2.629,678,3.192,679,2.872,680,3.837,681,3.302,682,2.55,683,3.834,684,3.834,685,4.095,686,3.631,687,2.079,688,2.328,689,2.025,690,2.328,691,3.27,692,1.798,693,1.466,694,2.328,695,2.328,696,2.328,697,2.328,698,2.328,699,2.328,700,2.328,701,2.872,702,2.328,703,2.328,704,3.337,705,3.631,706,2.025,707,2.025,708,2.328,709,3.837,710,3.224,711,2.328,712,1.798,713,2.025,714,2.328,715,2.328,716,2.328,717,2.328,718,2.328,719,2.328,720,2.328,721,2.328,722,2.872,723,2.328,724,2.328,725,1.798,726,2.025,727,2.328,728,2.025,729,2.293,730,1.798,731,2.328,732,3.302,733,2.328,734,2.025,735,2.872,736,2.328,737,2.025,738,2.55,739,1.798,740,2.025,741,2.025,742,2.328,743,2.328,744,2.025,745,3.302,746,3.302,747,2.025,748,3.337,749,2.328,750,1.798]],["title/directives/PersianLetterDirective.html",[656,1.544,751,1.867]],["body/directives/PersianLetterDirective.html",[3,0.386,4,0.386,5,0.293,6,0.368,8,0.487,10,1.017,16,0.033,18,1.685,19,0.436,20,1.133,23,1.133,24,0.643,26,0.487,27,0.5,28,0.436,29,0.975,32,2.726,36,0.722,37,1.594,39,1.236,41,0.789,43,2.267,46,0.574,47,0.273,48,1.769,50,1.236,51,1.233,54,0.017,55,0.023,56,0.017,135,2.726,148,0.789,174,3.478,192,1.867,223,1.867,259,3.093,346,2.276,651,3.343,656,2.981,657,2.898,665,2.038,673,2.747,678,2.726,729,3.411,751,3.006,752,3.343,753,2.552,754,3.343,755,4.159,756,4.329,757,3.411,758,3.87,759,3.365,760,3.365,761,3.764,762,3.006,763,3.478,764,3.764,765,4.602,766,4.329,767,4.329,768,3.365,769,3.693,770,3.516,771,4.329,772,4.783,773,3.516,774,4.329,775,3.343,776,2.935,777,4.329,778,4.329,779,2.552,780,2.552,781,2.935,782,2.935,783,3.87,784,2.935,785,2.935,786,2.935,787,2.935]],["title/injectables/PersianLetterService.html",[162,0.857,693,1.693]],["body/injectables/PersianLetterService.html",[3,0.232,4,0.232,5,0.176,6,0.387,8,0.292,10,1.817,12,1.866,13,1.413,16,0.033,19,0.583,20,0.787,23,1.47,24,0.738,26,0.652,27,0.497,28,0.583,29,1.082,34,1.76,35,1.692,36,1.215,37,1.76,39,0.876,41,0.473,42,0.85,44,1.359,46,0.399,47,0.124,48,0.719,50,1.112,51,1.32,54,0.03,55,0.016,56,0.01,59,1.359,62,1.021,70,1.918,80,2.256,86,2.177,90,2.783,103,1.297,115,1.413,148,0.473,149,1.413,158,1.413,159,1.573,162,0.856,164,1.011,167,1.359,171,1.193,172,2.839,192,2.079,193,2.075,204,2.075,223,1.297,272,1.011,273,0.925,278,1.692,344,3.015,353,1.222,354,2.866,367,2.918,369,2.264,372,2.473,373,1.918,376,1.297,424,1.866,460,1.413,482,1.866,490,1.108,508,1.692,509,2.378,594,1.692,610,3.601,614,2.337,629,1.76,672,1.297,673,2.613,675,3.161,676,1.531,677,2.297,678,3.259,679,1.531,680,3.259,681,1.76,682,1.359,683,3.172,684,3.172,685,3.862,686,2.834,687,1.692,688,1.76,689,1.531,690,1.76,691,3.461,692,1.359,693,1.692,694,3.259,695,2.687,696,2.687,697,2.687,698,2.687,699,2.687,700,3.259,701,3.172,702,3.259,703,2.687,704,3.601,705,3.862,706,2.337,707,2.337,708,2.687,709,4.141,710,3.515,711,2.687,712,2.075,713,2.337,714,2.687,715,1.76,716,1.76,717,1.76,718,1.76,719,1.76,720,1.76,721,1.76,722,2.337,723,1.76,724,1.76,725,1.359,726,2.337,727,2.687,728,2.337,729,2.263,730,2.075,731,2.687,732,3.648,733,2.687,734,2.337,735,2.337,736,1.76,737,1.531,738,2.817,739,2.075,740,1.531,741,1.531,742,1.76,743,1.76,744,1.531,745,3.648,746,3.648,747,2.337,748,3.746,749,2.687,750,2.075,788,2.687,789,3.219,790,2.075,791,2.075,792,2.109,793,2.109,794,2.109,795,1.359,796,2.109,797,2.109,798,2.109,799,2.109,800,1.76,801,1.531,802,2.109,803,2.109,804,2.109,805,2.109,806,2.109]],["title/injectables/PersianNumberService.html",[42,1.298,162,0.857]],["body/injectables/PersianNumberService.html",[3,0.292,4,0.292,5,0.222,6,0.418,10,1.81,11,2.583,13,1.965,16,0.033,19,0.669,20,0.935,23,1.557,24,0.804,26,0.749,27,0.559,28,0.669,29,1.105,36,1.168,37,1.756,39,1.004,41,0.597,42,1.541,46,0.33,47,0.157,48,0.908,50,1.277,51,1.38,54,0.013,55,0.019,56,0.013,59,3.156,62,1.086,70,1.965,86,2.37,90,2.589,102,1.072,103,1.541,148,0.597,149,1.679,156,2.466,158,1.168,162,1.018,164,1.276,167,3.156,172,2.886,201,1.834,272,1.276,273,1.168,278,2.011,281,3.193,285,2.466,288,2.466,293,2.218,294,2.011,299,1.834,353,1.543,354,3.048,367,1.834,369,2.149,372,2.347,373,2.149,376,1.973,468,1.543,482,2.218,486,2.222,490,2.011,594,2.011,595,2.222,635,2.777,675,3.411,677,2.011,687,2.011,691,3.13,692,2.466,704,1.932,705,1.932,722,2.777,725,1.715,728,2.777,729,1.543,730,2.466,734,2.777,735,2.777,737,1.932,738,2.466,739,2.466,740,1.932,741,1.932,744,1.932,788,3.193,790,2.466,791,2.466,795,2.466,801,2.777,807,4.479,808,4.479,809,4.479,810,3.193,811,3.193,812,2.661,813,3.826,814,2.661,815,2.661,816,2.661,817,2.661,818,2.661,819,2.661,820,4.897,821,4.897,822,2.661,823,3.826,824,3.826,825,3.826,826,3.826,827,3.826,828,3.826,829,3.826,830,3.826,831,2.661,832,2.661,833,3.826,834,2.661,835,2.661,836,2.661,837,2.661,838,2.661,839,2.661,840,2.661,841,2.661,842,2.661,843,2.661]],["title/directives/PersianNumbersDirective.html",[657,1.693,751,1.867]],["body/directives/PersianNumbersDirective.html",[3,0.397,4,0.397,5,0.302,6,0.335,8,0.501,10,1.046,16,0.033,18,1.733,19,0.448,20,1.154,23,1.154,24,0.501,26,0.501,27,0.455,28,0.448,29,0.949,32,2.763,36,0.742,37,1.612,39,1.25,41,0.811,43,2.331,46,0.585,47,0.279,48,1.793,50,1.25,51,1.256,54,0.018,55,0.023,56,0.018,135,2.763,148,0.811,174,3.501,192,1.457,223,1.457,259,3.117,346,2.307,651,3.389,656,2.671,657,3.22,665,2.096,673,2.52,678,2.482,729,3.437,751,3.047,752,3.043,753,2.625,754,3.389,755,4.046,756,4.388,757,3.551,758,3.019,759,2.625,760,2.625,761,3.816,762,3.047,763,3.231,764,3.816,765,4.652,766,4.388,767,4.388,768,3.427,769,3.389,771,4.388,772,4.827,774,4.388,775,3.389,776,3.019,777,4.388,778,4.388,779,2.625,780,2.625,781,3.019,782,3.019,783,3.941,784,3.019,785,3.019,786,3.019,787,3.019,844,3.616]],["title/interfaces/PersianService.html",[672,1.298,687,1.693]],["body/interfaces/PersianService.html",[3,0.48,4,0.48,5,0.364,6,0.424,8,0.605,10,1.263,16,0.032,19,0.711,20,1.3,23,1.582,24,0.795,26,0.795,27,0.553,28,0.711,29,0.976,36,1.177,46,0.541,54,0.022,55,0.026,56,0.022,62,1.074,148,0.979,369,2.619,382,2.815,460,1.916,672,2.143,674,2.815,675,3.46,677,2.796,679,3.17,687,2.796,739,3.428,790,3.428,791,3.428,795,3.428,801,3.861,845,3.645,846,3.645,847,4.367,848,3.645,849,3.645,850,4.367,851,4.367,852,4.367]],["title/interfaces/SimpleDateInterface.html",[206,1.867,672,1.298]],["body/interfaces/SimpleDateInterface.html",[3,0.512,4,0.512,5,0.389,6,0.331,8,0.647,11,2.428,16,0.032,27,0.568,46,0.578,54,0.023,55,0.027,56,0.023,62,1.212,113,2.047,117,2.704,148,1.046,149,2.428,197,4.016,206,3.208,208,4.016,209,4.016,672,2.229,674,3.007,800,3.894,853,3.894,854,3.894,855,3.894,856,4.665,857,4.665]],["title/contributing.html",[858,1.566,859,1.961,860,1.961]],["body/contributing.html",[5,0.299,10,1.037,16,0.023,32,2.469,54,0.018,55,0.023,56,0.018,62,0.672,73,3.375,103,2.323,155,2.597,171,1.329,201,1.719,205,2.604,220,3.375,227,2.312,288,2.312,293,2.079,294,1.885,299,1.719,340,3.801,346,2.298,348,2.604,382,2.312,384,3.375,411,2.994,421,3.409,470,3.581,479,2.312,525,2.312,612,2.604,619,2.604,620,2.604,682,3.027,710,2.312,712,2.312,750,2.312,754,3.814,762,2.723,858,2.079,860,3.409,861,3.587,862,3.587,863,3.587,864,4.814,865,3.921,866,4.814,867,2.994,868,2.994,869,4.814,870,3.587,871,3.587,872,4.697,873,3.587,874,4.371,875,3.587,876,3.921,877,4.371,878,2.994,879,2.994,880,2.994,881,2.994,882,3.921,883,2.994,884,3.587,885,3.587,886,3.921,887,3.587,888,3.587,889,4.697,890,4.371,891,2.994,892,4.697,893,4.371,894,4.814,895,4.638,896,4.371,897,3.921,898,4.371,899,2.994,900,2.994,901,4.371,902,2.994,903,2.994,904,2.994,905,2.994,906,2.994,907,4.638,908,2.604,909,3.921,910,3.921,911,4.033,912,2.994,913,2.994,914,2.994,915,3.921,916,2.994,917,3.921,918,2.994,919,4.371,920,3.921,921,2.994,922,5.237,923,4.697,924,3.587,925,2.994,926,3.587,927,3.587,928,2.994,929,3.921,930,2.994,931,3.587,932,2.994,933,2.994,934,2.994,935,2.994,936,3.921,937,2.994,938,2.994,939,2.994,940,3.921,941,2.994,942,2.994,943,2.994,944,2.994,945,2.994,946,2.994,947,2.994,948,4.371,949,2.994,950,2.994,951,2.994,952,2.994,953,2.994,954,2.994,955,2.994,956,2.994,957,2.994]],["title/coverage.html",[958,3.649]],["body/coverage.html",[0,1.672,1,1.901,5,0.302,6,0.468,7,3.019,16,0.033,27,0.348,42,1.457,47,0.35,54,0.018,55,0.023,56,0.018,57,1.901,58,3.019,66,1.901,67,2.625,103,1.457,108,2.096,110,3.019,113,2.072,136,2.096,137,3.019,140,2.072,143,2.096,144,3.019,146,2.096,147,3.019,156,2.331,157,3.019,162,1.578,163,2.331,165,3.427,166,3.019,185,2.096,206,2.096,259,3.039,266,2.331,267,2.331,298,5.316,328,3.019,342,3.019,404,1.901,405,2.625,406,2.331,466,2.331,467,3.043,468,3.047,480,2.331,587,1.901,588,3.019,599,2.331,600,3.019,601,3.019,656,1.733,657,1.901,672,2.118,673,1.733,675,3.231,676,3.427,687,1.901,693,1.901,751,2.737,752,3.593,753,3.427,757,2.096,763,2.096,845,3.019,853,3.019,958,3.019,959,2.625,960,3.616,961,3.616,962,4.388,963,6.296,964,3.019,965,5.573,966,5.573,967,3.941,968,4.722,969,3.616,970,3.616,971,3.616,972,3.616,973,3.616,974,3.616,975,3.616,976,3.616,977,3.616,978,3.616,979,3.616,980,3.616,981,3.616,982,3.616,983,3.616,984,3.616,985,3.616,986,3.616,987,3.616,988,3.616,989,3.616,990,3.941,991,3.616,992,3.019]],["title/dependencies.html",[647,2.493,993,2.702]],["body/dependencies.html",[16,0.033,41,1.068,54,0.024,55,0.028,56,0.024,95,3.977,647,3.071,779,3.458,994,4.764,995,6.455,996,4.764,997,5.603,998,4.677,999,4.764,1000,4.764,1001,4.764,1002,3.977,1003,4.764,1004,4.764,1005,4.764,1006,4.764,1007,4.764,1008,4.764,1009,4.764,1010,4.764,1011,4.764]],["title/miscellaneous/enumerations.html",[1012,1.42,1013,3.228]],["body/miscellaneous/enumerations.html",[0,1.118,6,0.385,10,1.118,13,1.697,16,0.033,19,0.611,24,0.536,29,1.123,54,0.019,55,0.024,56,0.019,67,2.807,68,2.858,71,2.807,75,2.807,76,2.807,83,2.493,96,2.242,97,4.116,98,4.074,113,1.697,138,1.854,140,2.164,148,0.867,171,1.433,405,2.807,406,3.178,407,2.807,425,2.807,429,2.807,430,3.579,431,4.286,434,2.807,436,2.807,437,4.15,438,4.15,439,4.15,441,2.807,442,2.807,443,3.94,445,2.807,446,2.807,447,2.807,448,2.807,449,2.807,455,4.116,460,1.697,467,2.493,468,2.858,471,2.807,483,3.579,507,3.579,508,2.033,509,1.854,510,3.228,511,2.493,512,2.493,513,2.493,514,2.493,515,2.493,516,2.493,517,2.493,518,2.493,519,2.493,520,2.493,521,2.493,522,2.493,1012,2.033,1013,3.228,1014,3.868,1015,3.868,1016,3.228]],["title/miscellaneous/functions.html",[1012,1.42,1017,2.807]],["body/miscellaneous/functions.html",[3,0.444,6,0.36,8,0.56,10,1.466,11,2.225,14,2.431,16,0.032,19,0.741,26,0.829,28,0.741,29,0.863,32,2.125,36,1.253,42,1.629,50,0.907,54,0.027,55,0.025,56,0.02,62,1.088,80,1.938,90,2.431,148,0.907,159,1.629,174,2.94,223,1.629,259,2.912,266,3.572,267,3.572,299,2.431,376,2.043,503,2.606,509,1.938,589,2.606,677,2.125,678,2.912,691,2.344,693,2.912,752,2.606,757,2.94,762,2.344,763,2.94,769,2.606,775,3.269,908,3.681,911,2.935,962,3.375,964,4.233,990,4.625,1012,2.125,1017,2.935,1018,5.541,1019,5.071,1020,4.043,1021,5.984,1022,5.071,1023,4.043,1024,5.541,1025,4.043,1026,4.043,1027,3.375,1028,4.043,1029,4.043,1030,4.043,1031,4.043,1032,5.071,1033,5.071,1034,3.375,1035,4.043,1036,4.233,1037,4.85,1038,3.375,1039,5.071,1040,4.043]],["title/index.html",[148,0.606,858,1.566,859,1.961]],["body/index.html",[0,1.552,1,1.05,2,1.661,4,0.07,5,0.258,9,1.042,10,1.729,11,1.715,12,2.103,13,1.864,14,2.751,15,0.977,16,0.032,17,1.349,19,0.383,20,0.985,23,1.104,24,0.089,26,0.162,27,0.297,28,0.2,29,0.665,30,0.534,31,2.119,32,3.163,33,0.534,34,2.057,35,0.337,36,0.827,37,1.501,39,1.113,42,1.154,47,0.261,48,0.218,49,1.896,50,0.586,54,0.013,55,0.006,56,0.003,57,1.05,59,1.846,60,0.977,61,1.349,62,1.061,66,1.05,68,1.514,69,3.262,70,1.592,71,1.45,72,0.977,73,2.519,74,0.977,75,0.85,76,1.173,79,2.18,80,2.164,82,1.349,83,2.234,86,1.146,87,1.349,90,2.036,91,0.534,96,0.678,98,2.234,102,0.804,103,1.461,105,0.85,112,0.465,113,2.449,114,1.906,115,0.281,116,3.248,117,1.79,118,1.146,135,0.337,136,0.371,138,1.115,139,2.119,140,1.355,142,0.534,143,0.371,146,0.371,149,0.514,150,1.042,154,1.684,155,2.594,158,2.241,159,2.48,161,1.688,163,1.684,167,1.99,168,2.74,169,0.534,170,0.977,171,1.951,172,0.307,174,2.265,175,1.349,176,1.349,177,1.349,178,1.349,179,0.977,180,0.977,181,1.349,182,1.349,183,1.349,185,1.66,187,0.534,188,2.386,189,1.896,191,3.151,192,1.978,193,0.754,194,0.85,195,1.45,196,1.173,197,3.345,198,1.99,199,2.079,200,2.234,201,1.48,204,3.394,205,0.85,206,0.371,207,0.465,208,2.96,209,2.671,210,1.941,212,0.465,215,0.977,216,2.633,220,2.338,221,0.465,222,0.977,223,0.258,224,0.534,227,1.287,228,0.977,233,0.534,236,0.465,237,0.977,238,0.534,239,1.688,243,0.534,251,0.85,253,1.349,254,0.534,256,1.499,259,0.337,260,1.688,261,0.534,262,0.534,263,1.042,264,0.534,273,0.281,278,0.615,285,0.413,288,0.754,292,1.349,293,1.348,294,0.615,299,0.561,304,0.977,340,1.173,343,0.534,344,1.505,345,0.977,346,2.104,347,1.45,348,0.465,349,2.893,350,2.671,351,1.99,352,0.534,353,1.158,357,1.349,358,1.349,359,1.349,360,1.349,361,1.349,362,1.349,363,1.349,367,2.201,369,0.281,370,0.534,372,1.986,373,0.709,376,1.669,377,1.941,378,2.386,379,0.534,380,0.977,382,2.671,383,1.45,384,1.684,387,0.534,389,0.534,390,2.079,396,0.534,397,0.534,404,1.05,406,2.96,407,0.85,408,2.241,412,3.895,414,1.349,421,1.45,423,2.577,424,2.103,425,0.85,426,0.413,427,1.173,428,3.458,429,0.85,430,0.85,431,1.688,432,1.349,433,2.391,434,0.465,436,0.465,437,1.45,438,1.45,439,1.45,440,1.941,441,0.465,442,1.45,443,1.173,444,1.349,445,0.465,446,0.465,447,0.465,448,0.465,449,0.465,450,0.534,456,4.695,458,1.941,460,1.257,462,0.534,466,1.684,470,2.433,471,1.173,472,1.349,473,1.667,474,1.349,475,1.349,477,0.977,479,0.754,480,0.413,481,0.534,482,0.371,483,0.85,484,1.667,487,1.349,488,0.977,489,0.977,490,0.85,491,2.241,492,0.977,493,0.977,494,0.977,495,1.667,496,0.534,497,0.534,500,1.688,503,0.754,504,1.688,508,1.373,509,1.252,511,0.413,512,0.413,513,0.413,514,0.413,515,0.413,516,0.413,517,0.413,518,0.413,519,0.413,520,0.413,521,0.413,522,0.413,525,0.754,583,0.534,585,0.534,586,0.534,587,1.05,589,1.287,591,0.534,593,0.534,594,1.05,599,1.846,605,0.977,606,2.18,612,0.465,617,0.977,618,0.534,619,0.85,620,0.85,621,0.534,626,0.534,627,0.534,628,0.534,630,0.534,631,0.534,632,0.534,635,1.45,644,2.671,649,1.688,656,0.307,660,0.754,663,1.941,665,1.158,672,0.258,673,0.561,677,1.505,678,1.728,682,3.688,683,0.85,684,0.85,685,2.079,686,2.079,689,0.465,691,2.662,692,0.754,693,1.623,701,0.465,706,0.465,707,0.85,710,1.684,712,1.042,713,0.85,725,0.413,726,0.85,730,1.499,738,1.042,747,0.465,748,1.173,750,1.287,754,3.199,755,0.465,757,1.79,759,0.465,760,1.45,761,3.767,762,3.589,763,1.348,764,0.465,768,0.465,769,1.287,775,1.287,780,1.45,790,1.684,791,1.287,795,0.413,810,1.349,811,1.349,846,2.18,848,0.534,849,0.977,854,2.18,855,0.534,858,1.158,860,0.85,864,1.941,865,0.977,866,1.667,867,1.667,868,0.534,869,1.667,874,0.534,876,0.534,877,0.534,878,0.534,879,1.349,880,0.534,881,0.977,882,0.534,883,1.941,886,0.534,890,0.977,891,0.534,893,0.534,894,3.625,895,1.349,896,3.028,897,3.028,898,2.18,899,0.534,900,0.534,901,2.18,902,1.667,903,0.534,904,0.977,905,2.18,906,0.534,907,4.553,908,4.016,909,0.977,910,0.977,911,2.386,912,0.977,913,0.534,914,0.534,915,0.977,916,0.534,917,0.977,918,0.534,919,2.18,920,0.977,921,0.534,925,0.977,928,1.667,929,2.893,930,0.534,932,0.534,933,0.534,934,0.534,935,0.534,936,1.349,937,0.534,938,0.534,939,0.534,940,0.977,941,0.534,942,0.534,943,1.349,944,0.534,945,1.349,946,0.534,947,0.534,948,1.349,949,0.534,950,0.534,951,0.534,952,0.534,953,0.534,954,0.534,955,1.349,956,0.534,957,0.534,959,0.465,967,0.977,992,1.349,1002,0.977,1017,0.465,1027,0.977,1034,0.534,1036,1.941,1037,2.391,1038,0.534,1041,1.17,1042,0.64,1043,0.64,1044,0.64,1045,0.64,1046,0.64,1047,1.997,1048,0.64,1049,1.667,1050,2.864,1051,0.64,1052,2.864,1053,1.17,1054,0.64,1055,1.997,1056,1.17,1057,1.17,1058,0.64,1059,0.64,1060,2.864,1061,0.64,1062,0.64,1063,1.616,1064,2.326,1065,0.64,1066,2.326,1067,0.64,1068,2.326,1069,2.612,1070,0.64,1071,0.64,1072,0.64,1073,0.64,1074,0.64,1075,0.64,1076,1.17,1077,0.64,1078,0.64,1079,1.17,1080,0.64,1081,0.64,1082,0.64,1083,0.64,1084,5.397,1085,0.64,1086,0.64,1087,0.64,1088,0.64,1089,0.64,1090,0.64,1091,1.17,1092,1.17,1093,0.64,1094,1.17,1095,1.17,1096,4.432,1097,0.64,1098,1.997,1099,2.612,1100,0.64,1101,1.616,1102,2.326,1103,2.326,1104,2.612,1105,2.612,1106,1.17,1107,1.997,1108,3.287,1109,3.287,1110,2.612,1111,2.864,1112,2.326,1113,5.265,1114,1.997,1115,0.64,1116,0.64,1117,2.326,1118,0.64,1119,0.64,1120,1.616,1121,0.64,1122,0.64,1123,0.64,1124,1.616,1125,0.64,1126,0.64,1127,0.64,1128,0.64,1129,0.64,1130,0.64,1131,0.64,1132,1.17,1133,0.64,1134,0.64,1135,0.64,1136,1.17,1137,0.64,1138,0.64,1139,0.64,1140,0.64,1141,1.616,1142,0.64,1143,0.64,1144,0.64,1145,0.64,1146,1.17,1147,1.17,1148,1.17,1149,0.64,1150,0.64,1151,1.17,1152,0.64,1153,1.616,1154,2.612,1155,3.087,1156,2.612,1157,2.612,1158,2.612,1159,2.612,1160,2.612,1161,0.64,1162,0.64,1163,4.854,1164,0.64,1165,1.17,1166,3.908,1167,0.64,1168,0.64,1169,1.616,1170,1.17,1171,0.64,1172,0.64,1173,0.64,1174,0.64,1175,1.17,1176,0.64,1177,0.64,1178,0.64,1179,0.64,1180,0.64,1181,1.17,1182,0.64,1183,1.17,1184,0.64,1185,1.17,1186,0.64,1187,0.64,1188,1.616,1189,0.64,1190,0.64,1191,1.17,1192,0.64,1193,0.64,1194,1.17,1195,0.64,1196,0.64,1197,0.64,1198,0.64,1199,0.64,1200,0.64,1201,0.64,1202,0.64,1203,0.64,1204,0.64,1205,1.17,1206,0.64,1207,0.64,1208,0.64,1209,0.64,1210,0.64,1211,0.64,1212,0.64,1213,0.64,1214,3.287,1215,0.64,1216,1.17,1217,1.17,1218,1.616,1219,1.17,1220,1.17,1221,1.17,1222,0.534,1223,0.64,1224,0.64,1225,1.17,1226,1.17,1227,0.64,1228,1.17,1229,0.64,1230,0.64,1231,0.64,1232,0.64,1233,0.64,1234,0.64,1235,0.64,1236,0.64,1237,0.64,1238,1.997,1239,0.64,1240,0.64,1241,0.64,1242,0.64,1243,0.64,1244,0.64,1245,0.64,1246,0.64,1247,0.64,1248,0.64,1249,0.64,1250,0.64,1251,0.64,1252,0.64,1253,0.64,1254,0.64,1255,0.64,1256,0.64,1257,0.64,1258,0.64,1259,0.64,1260,0.64,1261,0.64,1262,0.64,1263,1.17,1264,0.64,1265,0.64,1266,0.64,1267,0.64,1268,1.17,1269,0.64,1270,0.64,1271,0.64,1272,0.64,1273,0.64,1274,0.64,1275,0.64,1276,0.64,1277,0.64,1278,0.64,1279,0.64,1280,0.64,1281,0.64,1282,0.64,1283,0.64,1284,0.64,1285,0.64,1286,1.17,1287,0.64,1288,0.64,1289,0.64,1290,0.64,1291,0.64,1292,0.64,1293,0.64,1294,0.64,1295,0.64,1296,1.17,1297,0.64,1298,0.64,1299,0.64,1300,0.64,1301,0.64,1302,1.616,1303,0.64,1304,0.64,1305,0.64,1306,0.64,1307,0.64,1308,0.64,1309,1.616,1310,0.64,1311,2.612,1312,0.64,1313,0.64,1314,0.64,1315,0.64,1316,0.64,1317,0.64,1318,0.64,1319,0.534,1320,0.64,1321,0.64,1322,0.64,1323,0.64,1324,0.64,1325,1.17,1326,0.64,1327,0.64,1328,0.64,1329,0.64,1330,1.17,1331,0.64,1332,0.64,1333,0.64]],["title/license.html",[858,1.566,859,1.961,1334,2.255]],["body/license.html",[16,0.026,54,0.022,55,0.026,56,0.022,73,2.824,171,1.974,351,3.702,373,1.923,660,2.824,959,3.18,1049,3.657,1222,3.657,1319,3.657,1334,3.657,1335,4.381,1336,5.743,1337,4.381,1338,4.381,1339,4.381,1340,4.381,1341,5.329,1342,4.381,1343,4.381,1344,4.381,1345,4.381,1346,4.381,1347,4.381,1348,5.329,1349,6.407,1350,4.381,1351,4.381,1352,4.381,1353,4.381,1354,5.329,1355,4.381,1356,4.381,1357,4.381,1358,4.381,1359,4.381,1360,4.381,1361,4.381,1362,4.381,1363,4.381,1364,5.329,1365,4.381,1366,4.381,1367,4.381,1368,4.381,1369,4.381,1370,5.329,1371,5.329,1372,4.381,1373,4.381,1374,4.381,1375,4.381,1376,4.381,1377,4.381,1378,4.381,1379,4.381,1380,4.381,1381,4.381,1382,4.381,1383,4.381,1384,4.381,1385,4.381,1386,4.381,1387,4.381,1388,4.381,1389,4.381,1390,4.381,1391,4.381,1392,4.381,1393,4.381,1394,4.381,1395,4.381,1396,4.381,1397,4.381,1398,4.381]],["title/modules.html",[646,3.173]],["body/modules.html",[16,0.029,54,0.025,55,0.029,56,0.025,645,3.294,646,3.71,998,4.266,1399,5.111,1400,5.111,1401,5.111]],["title/overview.html",[1402,3.649]],["body/overview.html",[1,3.291,2,2.033,16,0.032,54,0.021,55,0.026,56,0.021,57,3.291,66,3.291,109,2.23,164,2.033,201,2.033,285,3.368,293,2.459,294,2.23,299,2.033,404,3.291,587,3.291,644,3.368,645,4.271,647,2.735,648,3.541,649,3.079,650,3.541,651,2.735,652,3.541,653,3.541,654,3.541,655,3.541,656,3.001,657,3.291,658,4.362,659,3.541,660,2.735,665,2.459,674,2.735,1402,3.541]],["title/miscellaneous/variables.html",[1012,1.42,1403,3.228]],["body/miscellaneous/variables.html",[6,0.313,16,0.031,27,0.425,29,0.751,54,0.022,55,0.026,56,0.022,70,1.935,138,2.565,139,2.843,140,2.348,148,0.989,192,2.155,426,2.843,460,1.935,467,2.843,468,3.102,479,2.843,480,3.449,507,3.201,508,2.318,511,2.843,512,2.843,513,2.843,514,2.843,515,2.843,516,2.843,517,2.843,518,2.843,519,2.843,520,2.843,521,2.843,522,2.843,523,3.682,524,3.682,525,2.843,526,3.682,527,3.682,528,3.682,529,3.682,530,3.682,531,3.682,532,3.682,533,3.682,534,3.682,535,3.682,536,3.682,537,3.682,538,3.682,539,3.682,540,3.682,541,3.682,542,3.682,543,3.682,544,3.682,545,3.682,546,3.682,547,3.682,548,3.682,549,3.682,550,3.682,551,3.682,552,3.682,553,3.682,554,3.682,555,3.682,556,3.682,557,3.682,558,3.682,559,3.682,560,3.682,561,3.682,562,3.682,563,3.682,564,3.682,565,3.682,566,3.682,567,3.682,568,3.682,569,3.682,570,3.682,1012,2.318,1016,3.682,1403,3.682]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":86,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["0.15.0",{"_index":1009,"title":{},"body":{"dependencies.html":{}}}],["0.9.1",{"_index":1011,"title":{},"body":{"dependencies.html":{}}}],["001",{"_index":591,"title":{},"body":{"pipes/NationalCodePipe.html":{},"index.html":{}}}],["0011753646",{"_index":1140,"title":{},"body":{"index.html":{}}}],["0015234756",{"_index":1302,"title":{},"body":{"index.html":{}}}],["00:00:00",{"_index":1278,"title":{},"body":{"index.html":{}}}],["0901",{"_index":526,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0902",{"_index":527,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0903",{"_index":528,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0904",{"_index":529,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0905",{"_index":530,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0910",{"_index":539,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0911",{"_index":540,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0912",{"_index":541,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0913",{"_index":542,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0914",{"_index":543,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0915",{"_index":544,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0916",{"_index":545,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0917",{"_index":546,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0918",{"_index":547,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0919",{"_index":548,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0920",{"_index":553,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0921",{"_index":554,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0922",{"_index":555,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0930",{"_index":531,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0931",{"_index":556,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0932",{"_index":552,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0933",{"_index":532,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0934",{"_index":557,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0935",{"_index":533,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["09352479965for",{"_index":1208,"title":{},"body":{"index.html":{}}}],["0936",{"_index":534,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0937",{"_index":535,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0938",{"_index":536,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0939",{"_index":537,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0941",{"_index":538,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0990",{"_index":549,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0991",{"_index":550,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0992",{"_index":551,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["09944",{"_index":570,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099810",{"_index":558,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099811",{"_index":559,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099812",{"_index":560,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["09990",{"_index":569,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099910",{"_index":561,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099911",{"_index":562,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099913",{"_index":563,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099914",{"_index":564,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099996",{"_index":565,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099997",{"_index":566,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099998",{"_index":567,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099999",{"_index":568,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":201,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"injectables/PersianNumberService.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["1,925,100",{"_index":94,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["1.0",{"_index":85,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["1.10.0",{"_index":1007,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":966,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":977,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":968,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":984,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":589,"title":{},"body":{"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["10/12",{"_index":970,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":298,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["100100",{"_index":245,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["11",{"_index":390,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["12",{"_index":292,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["123",{"_index":1288,"title":{},"body":{"index.html":{}}}],["12600000",{"_index":1282,"title":{},"body":{"index.html":{}}}],["12:12",{"_index":433,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["12:12:30",{"_index":444,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["12:12:30.300",{"_index":450,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["13",{"_index":1241,"title":{},"body":{"index.html":{}}}],["13);for",{"_index":1239,"title":{},"body":{"index.html":{}}}],["13,750",{"_index":1125,"title":{},"body":{"index.html":{}}}],["1348",{"_index":1277,"title":{},"body":{"index.html":{}}}],["137,750",{"_index":1127,"title":{},"body":{"index.html":{}}}],["13750",{"_index":1124,"title":{},"body":{"index.html":{}}}],["139361631",{"_index":308,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["1397",{"_index":198,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"index.html":{}}}],["1397for",{"_index":1251,"title":{},"body":{"index.html":{}}}],["145",{"_index":1033,"title":{},"body":{"miscellaneous/functions.html":{}}}],["145,455",{"_index":1032,"title":{},"body":{"miscellaneous/functions.html":{}}}],["146097",{"_index":311,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["1461",{"_index":287,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["150",{"_index":325,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["153",{"_index":317,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["156465",{"_index":1168,"title":{},"body":{"index.html":{}}}],["17",{"_index":291,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["175364",{"_index":1142,"title":{},"body":{"index.html":{}}}],["183187720",{"_index":310,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["1925100",{"_index":92,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["2",{"_index":293,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["2.6.9",{"_index":1003,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":988,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":328,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["2018",{"_index":230,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["2018for",{"_index":1253,"title":{},"body":{"index.html":{}}}],["2019",{"_index":1338,"title":{},"body":{"license.html":{}}}],["21for",{"_index":1249,"title":{},"body":{"index.html":{}}}],["22",{"_index":1236,"title":{},"body":{"index.html":{}}}],["22for",{"_index":1245,"title":{},"body":{"index.html":{}}}],["23",{"_index":440,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["236547",{"_index":592,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["2458199for",{"_index":1259,"title":{},"body":{"index.html":{}}}],["2458736for",{"_index":1256,"title":{},"body":{"index.html":{}}}],["25",{"_index":967,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["29",{"_index":1221,"title":{},"body":{"index.html":{}}}],["3",{"_index":299,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{}}}],["30",{"_index":1214,"title":{},"body":{"index.html":{}}}],["308",{"_index":314,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["31",{"_index":304,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["3177",{"_index":397,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["31for",{"_index":1232,"title":{},"body":{"index.html":{}}}],["32",{"_index":1287,"title":{},"body":{"index.html":{}}}],["33",{"_index":976,"title":{},"body":{"coverage.html":{}}}],["339for",{"_index":1261,"title":{},"body":{"index.html":{}}}],["34840408",{"_index":296,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["37/80",{"_index":975,"title":{},"body":{"coverage.html":{}}}],["3908",{"_index":312,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["4",{"_index":288,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{},"contributing.html":{},"index.html":{}}}],["4/4",{"_index":981,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":979,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":1181,"title":{},"body":{"index.html":{}}}],["46",{"_index":974,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":294,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{},"contributing.html":{},"index.html":{},"overview.html":{}}}],["5/9",{"_index":983,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":965,"title":{},"body":{"coverage.html":{}}}],["5432445for",{"_index":1172,"title":{},"body":{"index.html":{}}}],["54484",{"_index":1174,"title":{},"body":{"index.html":{}}}],["55",{"_index":982,"title":{},"body":{"coverage.html":{}}}],["590",{"_index":1083,"title":{},"body":{"index.html":{}}}],["6",{"_index":285,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{},"index.html":{},"overview.html":{}}}],["6.5.2",{"_index":1005,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":986,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":985,"title":{},"body":{"coverage.html":{}}}],["61",{"_index":396,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["621",{"_index":262,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["66",{"_index":987,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":281,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{}}}],["72",{"_index":971,"title":{},"body":{"coverage.html":{}}}],["752",{"_index":300,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["8",{"_index":635,"title":{},"body":{"injectables/NationalCodeService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["8.0.3",{"_index":995,"title":{},"body":{"dependencies.html":{}}}],["8/11",{"_index":972,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":978,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":969,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":490,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["9)for",{"_index":1247,"title":{},"body":{"index.html":{}}}],["97/2/23",{"_index":432,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["98",{"_index":489,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["_",{"_index":701,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["_getmatchedpatternlength",{"_index":788,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["_getmatchedpatternlength(value",{"_index":734,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["_is_repetitive",{"_index":604,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["_is_repetitive(input",{"_index":607,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["_maxacceptableyear",{"_index":355,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["_minacceptableyear",{"_index":356,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["_stringvalidationregex",{"_index":789,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["_stringvalidationregex(options",{"_index":714,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["above",{"_index":1319,"title":{},"body":{"index.html":{},"license.html":{}}}],["abstractcontrol",{"_index":772,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["accept",{"_index":494,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["acceptable",{"_index":105,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["accepts",{"_index":1117,"title":{},"body":{"index.html":{}}}],["access",{"_index":1265,"title":{},"body":{"index.html":{}}}],["according",{"_index":115,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["action",{"_index":1393,"title":{},"body":{"license.html":{}}}],["ad",{"_index":261,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["add",{"_index":754,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"contributing.html":{},"index.html":{}}}],["adding",{"_index":896,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["additional",{"_index":1101,"title":{},"body":{"index.html":{}}}],["adds",{"_index":626,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["again",{"_index":422,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["ago",{"_index":1082,"title":{},"body":{"index.html":{}}}],["algorithm",{"_index":623,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["alihoseiny",{"_index":1340,"title":{},"body":{"license.html":{}}}],["alive",{"_index":1080,"title":{},"body":{"index.html":{}}}],["allowed",{"_index":1038,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["always",{"_index":1262,"title":{},"body":{"index.html":{}}}],["anarestan",{"_index":522,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":1362,"title":{},"body":{"license.html":{}}}],["angular",{"_index":897,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["angular/animations",{"_index":994,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":95,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":996,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":41,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":779,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":997,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1000,"title":{},"body":{"dependencies.html":{}}}],["another",{"_index":891,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["anything",{"_index":902,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["anywhere",{"_index":1105,"title":{},"body":{"index.html":{}}}],["app",{"_index":349,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["application",{"_index":1060,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1044,"title":{},"body":{"index.html":{}}}],["applied",{"_index":241,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["apps",{"_index":903,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["aptel",{"_index":518,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["arabic",{"_index":59,"title":{},"body":{"pipes/FaNumPipe.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["arabictopersian",{"_index":810,"title":{},"body":{"injectables/PersianNumberService.html":{},"index.html":{}}}],["arabictopersian(value",{"_index":813,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["arising",{"_index":1396,"title":{},"body":{"license.html":{}}}],["arithmetic",{"_index":1026,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arithmeticutils",{"_index":268,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["around",{"_index":348,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"contributing.html":{},"index.html":{}}}],["array",{"_index":730,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["arrays",{"_index":524,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":1350,"title":{},"body":{"license.html":{}}}],["attention",{"_index":207,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["attribute",{"_index":1106,"title":{},"body":{"index.html":{}}}],["attributes",{"_index":1156,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1386,"title":{},"body":{"license.html":{}}}],["available",{"_index":128,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["avoid",{"_index":411,"title":{},"body":{"pipes/JdatePipe.html":{},"contributing.html":{}}}],["azartel",{"_index":519,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["bad",{"_index":620,"title":{},"body":{"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["base",{"_index":1056,"title":{},"body":{"index.html":{}}}],["before",{"_index":619,"title":{},"body":{"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["beginning",{"_index":627,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["behavior",{"_index":1313,"title":{},"body":{"index.html":{}}}],["behaviour",{"_index":1132,"title":{},"body":{"index.html":{}}}],["behaviours",{"_index":1266,"title":{},"body":{"index.html":{}}}],["being",{"_index":1296,"title":{},"body":{"index.html":{}}}],["below",{"_index":428,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["better",{"_index":612,"title":{},"body":{"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["between",{"_index":395,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{}}}],["boolean",{"_index":369,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["booleanoptions",{"_index":1184,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":650,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["both",{"_index":246,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["branch",{"_index":920,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["breaking",{"_index":1088,"title":{},"body":{"index.html":{}}}],["brings",{"_index":688,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["browse",{"_index":1401,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":998,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bug",{"_index":872,"title":{},"body":{"contributing.html":{}}}],["bugs",{"_index":1325,"title":{},"body":{"index.html":{}}}],["built",{"_index":1263,"title":{},"body":{"index.html":{}}}],["c",{"_index":1337,"title":{},"body":{"license.html":{}}}],["calculates",{"_index":236,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["calculator.service.ts",{"_index":166,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["calculator.service.ts:108",{"_index":203,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:14",{"_index":186,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:149",{"_index":190,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:16",{"_index":265,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:30",{"_index":235,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:44",{"_index":255,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:54",{"_index":214,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:69",{"_index":258,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:78",{"_index":219,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:88",{"_index":232,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:96",{"_index":226,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calendar",{"_index":117,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["calendars",{"_index":247,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["careful",{"_index":1175,"title":{},"body":{"index.html":{}}}],["catch",{"_index":585,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["certain",{"_index":1186,"title":{},"body":{"index.html":{}}}],["change",{"_index":414,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["changing",{"_index":1148,"title":{},"body":{"index.html":{}}}],["character",{"_index":504,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["characters",{"_index":509,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["charge",{"_index":1345,"title":{},"body":{"license.html":{}}}],["chars",{"_index":727,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["check",{"_index":492,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["checking",{"_index":622,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["checks",{"_index":376,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["choose",{"_index":72,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["chosen",{"_index":1123,"title":{},"body":{"index.html":{}}}],["citations",{"_index":1094,"title":{},"body":{"index.html":{}}}],["claim",{"_index":1389,"title":{},"body":{"license.html":{}}}],["class",{"_index":47,"title":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":109,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"overview.html":{}}}],["clean",{"_index":926,"title":{},"body":{"contributing.html":{}}}],["cleaner",{"_index":913,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["cleaning",{"_index":240,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["clear",{"_index":1091,"title":{},"body":{"index.html":{}}}],["clicking",{"_index":1291,"title":{},"body":{"index.html":{}}}],["cluster_ngxpersianmodule",{"_index":653,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["cluster_ngxpersianmodule_declarations",{"_index":654,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["cluster_ngxpersianmodule_exports",{"_index":655,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["code",{"_index":155,"title":{},"body":{"classes/InvalidNationalCodeError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["code.service.ts",{"_index":601,"title":{},"body":{"injectables/NationalCodeService.html":{},"coverage.html":{}}}],["code.service.ts:18",{"_index":608,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["code.service.ts:37",{"_index":625,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["code.service.ts:53",{"_index":616,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["code]{@link",{"_index":275,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["codes",{"_index":479,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["coding",{"_index":921,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["combination",{"_index":1188,"title":{},"body":{"index.html":{}}}],["combine",{"_index":798,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["come",{"_index":950,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["command",{"_index":943,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["commit",{"_index":952,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["companies",{"_index":1198,"title":{},"body":{"index.html":{}}}],["complete",{"_index":936,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["compodoc",{"_index":941,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["component",{"_index":1155,"title":{},"body":{"index.html":{}}}],["components",{"_index":602,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["conditions",{"_index":1369,"title":{},"body":{"license.html":{}}}],["connection",{"_index":1397,"title":{},"body":{"license.html":{}}}],["consider",{"_index":1121,"title":{},"body":{"index.html":{}}}],["console.log('1375",{"_index":1210,"title":{},"body":{"index.html":{}}}],["console.log('1397",{"_index":1212,"title":{},"body":{"index.html":{}}}],["console.log('input",{"_index":1166,"title":{},"body":{"index.html":{}}}],["console.log('mobile",{"_index":1205,"title":{},"body":{"index.html":{}}}],["console.log('month",{"_index":1226,"title":{},"body":{"index.html":{}}}],["console.log('phone",{"_index":1194,"title":{},"body":{"index.html":{}}}],["console.log('year",{"_index":1228,"title":{},"body":{"index.html":{}}}],["console.log(jalali.day",{"_index":1244,"title":{},"body":{"index.html":{}}}],["console.log(jalali.month",{"_index":1243,"title":{},"body":{"index.html":{}}}],["console.log(jalali.year",{"_index":1242,"title":{},"body":{"index.html":{}}}],["console.log(this.isvalid(2365478824",{"_index":1306,"title":{},"body":{"index.html":{}}}],["console.log(this.isvalid(7731689951",{"_index":1307,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.creategdatefromdays(2458736",{"_index":1246,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.firstdayofjyearinmarch(1398",{"_index":1248,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.georgianyeartojalaliyear(2018",{"_index":1250,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.jalaliyeartogeorgianyear(1397",{"_index":1252,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.numberofpassedgdays(dateobj",{"_index":1255,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.numberofpassedjdays(1397",{"_index":1258,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatecalculator.numofgleapyears(2018",{"_index":1260,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatevalidatorservice.jmonthlength(1375",{"_index":1230,"title":{},"body":{"index.html":{}}}],["console.log(this.jalalidatevalidatorservice.jmonthlength(1397",{"_index":1231,"title":{},"body":{"index.html":{}}}],["console.log(this.mobilephonenumberservice.getphonenumberoperator('+989352479965",{"_index":1202,"title":{},"body":{"index.html":{}}}],["console.log(this.mobilephonenumberservice.getphonenumberoperator('09352479965",{"_index":1201,"title":{},"body":{"index.html":{}}}],["console.log(this.mobilephonenumberservice.normalizephonenumber('+989352479965",{"_index":1207,"title":{},"body":{"index.html":{}}}],["console.log(this.nationalcodeservice('0015234756",{"_index":1304,"title":{},"body":{"index.html":{}}}],["console.log(this.nationalcodeservice('015234756",{"_index":1303,"title":{},"body":{"index.html":{}}}],["console.log(this.nationalcodeservice(15234756",{"_index":1301,"title":{},"body":{"index.html":{}}}],["console.log(this.persianletterservice.topersian",{"_index":1192,"title":{},"body":{"index.html":{}}}],["console.log(this.persiannumberservice.arabictopersian",{"_index":1162,"title":{},"body":{"index.html":{}}}],["console.log(this.persiannumberservice.toenglish",{"_index":1171,"title":{},"body":{"index.html":{}}}],["console.log(this.persiannumberservice.topersian('a",{"_index":1173,"title":{},"body":{"index.html":{}}}],["const",{"_index":278,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["constant",{"_index":523,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":118,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["constructor(...params",{"_index":119,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["constructor(nationalcode",{"_index":151,"title":{},"body":{"classes/InvalidNationalCodeError.html":{}}}],["constructor(private",{"_index":49,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"index.html":{}}}],["constructor(public",{"_index":274,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["constructor(validator",{"_index":184,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["contact",{"_index":1327,"title":{},"body":{"index.html":{}}}],["contain",{"_index":1169,"title":{},"body":{"index.html":{}}}],["containing",{"_index":30,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["contains",{"_index":90,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["containspersian",{"_index":790,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["containspersian(value",{"_index":739,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["contents",{"_index":1093,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1394,"title":{},"body":{"license.html":{}}}],["contribute",{"_index":900,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["contributing",{"_index":860,"title":{"contributing.html":{}},"body":{"contributing.html":{},"index.html":{}}}],["contribution",{"_index":955,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["control",{"_index":775,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["controlling",{"_index":747,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["controlnum",{"_index":643,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["controls",{"_index":746,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["convenience",{"_index":1273,"title":{},"body":{"index.html":{}}}],["conversion",{"_index":848,"title":{},"body":{"interfaces/PersianService.html":{},"index.html":{}}}],["convert",{"_index":353,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["converting",{"_index":1050,"title":{},"body":{"index.html":{}}}],["convertnametoformat",{"_index":451,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["convertnametoformat(formatname",{"_index":452,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["converts",{"_index":167,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["converttogeorgian",{"_index":175,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["converttogeorgian(jyear",{"_index":187,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["converttojalali",{"_index":176,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["converttojalali(gdate",{"_index":202,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["copies",{"_index":1364,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1348,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1336,"title":{},"body":{"license.html":{}}}],["core",{"_index":1001,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":500,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["correctness",{"_index":634,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["corresponding",{"_index":803,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["counting",{"_index":389,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["coverage",{"_index":958,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":919,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["created",{"_index":458,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["creategdatefromdays",{"_index":177,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["creategdatefromdays(numofdays",{"_index":213,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["creates",{"_index":215,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["creating",{"_index":883,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["currency",{"_index":69,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["current",{"_index":912,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["custom",{"_index":1146,"title":{},"body":{"index.html":{}}}],["cycle",{"_index":416,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["d",{"_index":437,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["damages",{"_index":1390,"title":{},"body":{"license.html":{}}}],["data",{"_index":1151,"title":{},"body":{"index.html":{}}}],["date",{"_index":113,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["date(2018",{"_index":1285,"title":{},"body":{"index.html":{}}}],["date(2019",{"_index":1238,"title":{},"body":{"index.html":{}}}],["date(georgianyear",{"_index":336,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["date(gyear",{"_index":321,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["date(this.jalaliyeartogeorgianyear(jyear",{"_index":302,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["dateobj",{"_index":1254,"title":{},"body":{"index.html":{}}}],["dateobject",{"_index":1147,"title":{},"body":{"index.html":{}}}],["dates",{"_index":239,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["day",{"_index":209,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["days",{"_index":216,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["deal",{"_index":1352,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1398,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":91,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["decimalpipe",{"_index":78,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["declaration",{"_index":1257,"title":{},"body":{"index.html":{}}}],["declarations",{"_index":649,"title":{},"body":{"modules/NgxPersianModule.html":{},"index.html":{},"overview.html":{}}}],["declare",{"_index":1103,"title":{},"body":{"index.html":{}}}],["declaring",{"_index":1118,"title":{},"body":{"index.html":{}}}],["deep",{"_index":1160,"title":{},"body":{"index.html":{}}}],["default",{"_index":70,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defiend",{"_index":1145,"title":{},"body":{"index.html":{}}}],["defined",{"_index":24,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["dependencies",{"_index":647,"title":{"dependencies.html":{}},"body":{"modules/NgxPersianModule.html":{},"dependencies.html":{},"overview.html":{}}}],["described",{"_index":427,"title":{},"body":{"pipes/JdatePipe.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":681,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["desired",{"_index":82,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["desiredcontrolnum",{"_index":641,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["detailed",{"_index":1098,"title":{},"body":{"index.html":{}}}],["detection",{"_index":415,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["developed",{"_index":1070,"title":{},"body":{"index.html":{}}}],["developers",{"_index":898,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["developers.&#x1f377;&#x1f377;&#x1f377",{"_index":1271,"title":{},"body":{"index.html":{}}}],["developing",{"_index":934,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["develops",{"_index":1059,"title":{},"body":{"index.html":{}}}],["di",{"_index":347,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["different",{"_index":1052,"title":{},"body":{"index.html":{}}}],["digging",{"_index":1159,"title":{},"body":{"index.html":{}}}],["digit",{"_index":491,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"index.html":{}}}],["digitinfo",{"_index":88,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["digits",{"_index":34,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["directive",{"_index":751,"title":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{}}}],["directives",{"_index":665,"title":{},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{},"overview.html":{}}}],["directives.ts",{"_index":753,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{}}}],["directives.ts:23",{"_index":844,"title":{},"body":{"directives/PersianNumbersDirective.html":{}}}],["directives.ts:39",{"_index":770,"title":{},"body":{"directives/PersianLetterDirective.html":{}}}],["directives.ts:46",{"_index":773,"title":{},"body":{"directives/PersianLetterDirective.html":{}}}],["directory",{"_index":944,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["distribute",{"_index":1360,"title":{},"body":{"license.html":{}}}],["div",{"_index":266,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["div((div(targetgyear",{"_index":324,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div((gyear",{"_index":286,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(153",{"_index":289,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(7",{"_index":320,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(div(4",{"_index":309,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(div(gyear",{"_index":297,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(gmonth",{"_index":284,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(j",{"_index":319,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(jmonth",{"_index":305,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(mod(i",{"_index":316,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(mod(j",{"_index":313,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(num1",{"_index":1020,"title":{},"body":{"miscellaneous/functions.html":{}}}],["div(targetgyear",{"_index":323,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["division",{"_index":1023,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dock",{"_index":935,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["docs",{"_index":946,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["document",{"_index":682,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"contributing.html":{},"index.html":{}}}],["documentation",{"_index":959,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documented",{"_index":1090,"title":{},"body":{"index.html":{}}}],["documents",{"_index":911,"title":{},"body":{"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["doesn't",{"_index":633,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["doing",{"_index":343,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["don't",{"_index":928,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["done",{"_index":949,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["down",{"_index":1089,"title":{},"body":{"index.html":{}}}],["driven",{"_index":1318,"title":{},"body":{"index.html":{}}}],["duplicated",{"_index":888,"title":{},"body":{"contributing.html":{}}}],["dynamic",{"_index":999,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":586,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["each",{"_index":707,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["easier",{"_index":957,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["effect",{"_index":621,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["effortlessly",{"_index":1283,"title":{},"body":{"index.html":{}}}],["elements",{"_index":708,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["email",{"_index":1328,"title":{},"body":{"index.html":{}}}],["empty",{"_index":35,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["end",{"_index":1270,"title":{},"body":{"index.html":{}}}],["endigits",{"_index":683,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["english",{"_index":13,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["englishnumberstable",{"_index":807,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["englishtextdigit",{"_index":60,"title":{},"body":{"pipes/FaNumPipe.html":{},"index.html":{}}}],["ennum",{"_index":17,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["ennumpipe",{"_index":1,"title":{"pipes/EnNumPipe.html":{}},"body":{"pipes/EnNumPipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["enough",{"_index":909,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["enter",{"_index":81,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["entire",{"_index":1289,"title":{},"body":{"index.html":{}}}],["enum",{"_index":96,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["enumerations",{"_index":1013,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["epoch",{"_index":1281,"title":{},"body":{"index.html":{}}}],["equal",{"_index":223,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["equivalent",{"_index":194,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"pipes/JdatePipe.html":{},"index.html":{}}}],["error",{"_index":111,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["error(`${value",{"_index":104,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["error.capturestacktrace",{"_index":132,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["error.capturestacktrace(this",{"_index":133,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["esfand",{"_index":391,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["etc",{"_index":875,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":1385,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":1058,"title":{},"body":{"index.html":{}}}],["everything",{"_index":1064,"title":{},"body":{"index.html":{}}}],["everywhere",{"_index":1267,"title":{},"body":{"index.html":{}}}],["example",{"_index":14,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["examples",{"_index":1113,"title":{},"body":{"index.html":{}}}],["existence",{"_index":745,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["exists",{"_index":1030,"title":{},"body":{"miscellaneous/functions.html":{}}}],["expected",{"_index":1163,"title":{},"body":{"index.html":{}}}],["expecting",{"_index":1237,"title":{},"body":{"index.html":{}}}],["explained",{"_index":1183,"title":{},"body":{"index.html":{}}}],["export",{"_index":46,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["exports",{"_index":652,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["express",{"_index":1377,"title":{},"body":{"license.html":{}}}],["extends",{"_index":77,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["fact",{"_index":368,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["false",{"_index":372,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["falsefor",{"_index":1308,"title":{},"body":{"index.html":{}}}],["fanum",{"_index":61,"title":{},"body":{"pipes/FaNumPipe.html":{},"index.html":{}}}],["fanumpipe",{"_index":57,"title":{"pipes/FaNumPipe.html":{}},"body":{"pipes/FaNumPipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["farsi",{"_index":1310,"title":{},"body":{"index.html":{}}}],["farvardin",{"_index":221,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["faster",{"_index":914,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["fdhf",{"_index":1180,"title":{},"body":{"index.html":{}}}],["fear",{"_index":1087,"title":{},"body":{"index.html":{}}}],["feature",{"_index":893,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["featured",{"_index":1042,"title":{},"body":{"index.html":{}}}],["features",{"_index":890,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["few",{"_index":249,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["field",{"_index":799,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["fields",{"_index":680,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["file",{"_index":5,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":1351,"title":{},"body":{"license.html":{}}}],["fill",{"_index":1190,"title":{},"body":{"index.html":{}}}],["find",{"_index":340,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"contributing.html":{},"index.html":{}}}],["finding",{"_index":706,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["finds",{"_index":481,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["first",{"_index":220,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["firstdayofjyearinmarch",{"_index":178,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["firstdayofjyearinmarch(jyear",{"_index":218,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["firstly",{"_index":1102,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":1382,"title":{},"body":{"license.html":{}}}],["fixing",{"_index":1324,"title":{},"body":{"index.html":{}}}],["flexable",{"_index":1054,"title":{},"body":{"index.html":{}}}],["flow",{"_index":922,"title":{},"body":{"contributing.html":{}}}],["follow",{"_index":915,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["following",{"_index":73,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"contributing.html":{},"index.html":{},"license.html":{}}}],["follows",{"_index":487,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["fork",{"_index":918,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["form",{"_index":1037,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["format",{"_index":408,"title":{},"body":{"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"index.html":{}}}],["formatname",{"_index":454,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["formats",{"_index":68,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["formatted",{"_index":593,"title":{},"body":{"pipes/NationalCodePipe.html":{},"index.html":{}}}],["formatter",{"_index":84,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["formatting",{"_index":83,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["formcontrol",{"_index":1311,"title":{},"body":{"index.html":{}}}],["forms",{"_index":1309,"title":{},"body":{"index.html":{}}}],["fraction",{"_index":1029,"title":{},"body":{"miscellaneous/functions.html":{}}}],["free",{"_index":1344,"title":{},"body":{"license.html":{}}}],["fresh",{"_index":1323,"title":{},"body":{"index.html":{}}}],["fromatnames",{"_index":455,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{}}}],["fromatnames[formatname",{"_index":464,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["full",{"_index":196,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["function",{"_index":259,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["functions",{"_index":1017,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["furnished",{"_index":1367,"title":{},"body":{"license.html":{}}}],["future",{"_index":252,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["g",{"_index":725,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["gdate",{"_index":211,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gdate.getdate",{"_index":295,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gdate.getfullyear",{"_index":282,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gdate.getmonth",{"_index":280,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gday",{"_index":315,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["generalregex",{"_index":572,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["generalregex.test(phonenumber",{"_index":574,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["generate",{"_index":940,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["generating",{"_index":942,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["georgian",{"_index":168,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["georgianyear",{"_index":330,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["georgianyeartojalaliyear",{"_index":179,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["georgianyeartojalaliyear(gyear",{"_index":225,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["get's",{"_index":1119,"title":{},"body":{"index.html":{}}}],["getphonenumberoperator",{"_index":472,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["getphonenumberoperator(phonenumber",{"_index":476,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["gets",{"_index":726,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["getting",{"_index":858,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{"contributing.html":{},"index.html":{}}}],["gif",{"_index":1109,"title":{},"body":{"index.html":{}}}],["git",{"_index":923,"title":{},"body":{"contributing.html":{}}}],["given",{"_index":256,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"index.html":{}}}],["globally",{"_index":1097,"title":{},"body":{"index.html":{}}}],["glued",{"_index":1077,"title":{},"body":{"index.html":{}}}],["gmonth",{"_index":279,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gmonthdiv",{"_index":283,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["good",{"_index":244,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["granted",{"_index":1343,"title":{},"body":{"license.html":{}}}],["greater",{"_index":614,"title":{},"body":{"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["gregorian",{"_index":238,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["grouping",{"_index":855,"title":{},"body":{"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["gt",{"_index":93,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["guides",{"_index":933,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["gyear",{"_index":229,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["h:m",{"_index":431,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["h:m:s",{"_index":443,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["h:m:s.l",{"_index":449,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["happy",{"_index":861,"title":{},"body":{"contributing.html":{}}}],["help",{"_index":866,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["helper",{"_index":1332,"title":{},"body":{"index.html":{}}}],["helpful",{"_index":892,"title":{},"body":{"contributing.html":{}}}],["here",{"_index":901,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["hereby",{"_index":1342,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1387,"title":{},"body":{"license.html":{}}}],["https://alihoseiny.github.io/ngx",{"_index":462,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["https://github.com/sijad/ts",{"_index":276,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["https://stackoverflow.com/a/46312614/5400597",{"_index":638,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["human",{"_index":1143,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":131,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["immutable",{"_index":418,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["implement",{"_index":679,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"interfaces/PersianService.html":{}}}],["implementation",{"_index":212,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["implemented",{"_index":1264,"title":{},"body":{"index.html":{}}}],["implementing",{"_index":205,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"contributing.html":{},"index.html":{}}}],["implements",{"_index":48,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["implicitly",{"_index":618,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["implied",{"_index":1378,"title":{},"body":{"license.html":{}}}],["import",{"_index":39,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["important",{"_index":857,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["imports",{"_index":671,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["included",{"_index":1372,"title":{},"body":{"license.html":{}}}],["including",{"_index":1354,"title":{},"body":{"license.html":{}}}],["index",{"_index":148,"title":{"index.html":{}},"body":{"classes/InvalidNationalCodeError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{}}}],["information",{"_index":761,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["inherits",{"_index":1128,"title":{},"body":{"index.html":{}}}],["inject",{"_index":1152,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":162,"title":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{}}}],["injectables",{"_index":164,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"overview.html":{}}}],["injected",{"_index":1233,"title":{},"body":{"index.html":{}}}],["injecting",{"_index":1154,"title":{},"body":{"index.html":{}}}],["input",{"_index":37,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidServiceInputError.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["input('persianletterdirective",{"_index":786,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["input.length",{"_index":639,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["inputs",{"_index":769,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["inputted",{"_index":112,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"index.html":{}}}],["install",{"_index":1066,"title":{},"body":{"index.html":{}}}],["installing",{"_index":1095,"title":{},"body":{"index.html":{}}}],["instance",{"_index":253,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["instances",{"_index":1272,"title":{},"body":{"index.html":{}}}],["instead",{"_index":383,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["integer",{"_index":1022,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":672,"title":{"interfaces/PLOptions.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{}},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"index.html":{}}}],["interfaces",{"_index":674,"title":{},"body":{"interfaces/PLOptions.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"overview.html":{}}}],["invalid",{"_index":135,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/MobilePhoneNumberService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["invalidjalalidate.error",{"_index":269,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["invalidjalalidateerror",{"_index":108,"title":{"classes/InvalidJalaliDateError.html":{}},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["invalidmobileoperator.error",{"_index":506,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["invalidmobileoperatorerror",{"_index":136,"title":{"classes/InvalidMobileOperatorError.html":{}},"body":{"classes/InvalidMobileOperatorError.html":{},"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"index.html":{}}}],["invalidmobilephonenumber.error",{"_index":505,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["invalidmobilephonenumbererror",{"_index":143,"title":{"classes/InvalidMobilePhoneNumberError.html":{}},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"index.html":{}}}],["invalidnationalcode.error",{"_index":636,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["invalidnationalcodeerror",{"_index":146,"title":{"classes/InvalidNationalCodeError.html":{}},"body":{"classes/InvalidNationalCodeError.html":{},"injectables/NationalCodeService.html":{},"coverage.html":{},"index.html":{}}}],["invalidnationalcodeerror](https://alihoseiny.github.io/ngx",{"_index":1299,"title":{},"body":{"index.html":{}}}],["invalidserviceinput.error",{"_index":832,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["invalidserviceinputerror",{"_index":156,"title":{"classes/InvalidServiceInputError.html":{}},"body":{"classes/InvalidServiceInputError.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{}}}],["iran",{"_index":1063,"title":{},"body":{"index.html":{}}}],["irancell",{"_index":511,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["irancellfor",{"_index":1203,"title":{},"body":{"index.html":{}}}],["iranian",{"_index":470,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["irc",{"_index":87,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["irc:'r':'1.0",{"_index":1133,"title":{},"body":{"index.html":{}}}],["irc:'t",{"_index":1126,"title":{},"body":{"index.html":{}}}],["ircurrencies",{"_index":97,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{}}}],["ircurrencies[type",{"_index":107,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["ircurrencypipe",{"_index":66,"title":{"pipes/IRCurrencyPipe.html":{}},"body":{"pipes/IRCurrencyPipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["isjyearleap",{"_index":357,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isjyearleap(jyear",{"_index":365,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isnan(value",{"_index":101,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["ispersian",{"_index":677,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ispersian(value",{"_index":795,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["isphonenumberpatternvalid",{"_index":473,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["isphonenumberpatternvalid(phonenumber",{"_index":485,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["issue",{"_index":877,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["issues",{"_index":886,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["isvalid",{"_index":605,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["isvalid(nationalcode",{"_index":615,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["isvalidjdate",{"_index":358,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isvalidjdate(jyear",{"_index":370,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isvalidjday",{"_index":359,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isvalidjday(jyear",{"_index":374,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjmonth",{"_index":360,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isvalidjmonth(jmonth",{"_index":379,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isvalidjyear",{"_index":361,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["isvalidjyear(jyear",{"_index":385,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidphonenumber",{"_index":474,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["isvalidphonenumber(phonenumber",{"_index":498,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["it's",{"_index":1069,"title":{},"body":{"index.html":{}}}],["j",{"_index":307,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali",{"_index":1330,"title":{},"body":{"index.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l110",{"_index":322,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l149",{"_index":329,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l195",{"_index":277,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l213",{"_index":306,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalali",{"_index":116,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"index.html":{}}}],["jalalidatecalculatorservice",{"_index":163,"title":{"injectables/JalaliDateCalculatorService.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{},"index.html":{}}}],["jalalidatevalidatorservice",{"_index":185,"title":{"injectables/JalaliDateValidatorService.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{},"index.html":{}}}],["jalalidatevalidatorservice._minacceptableyear",{"_index":399,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["jalaliday",{"_index":338,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalalimonth",{"_index":339,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaliyear",{"_index":331,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaliyeartogeorgianyear",{"_index":180,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["jalaliyeartogeorgianyear(jyear",{"_index":231,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["javascript",{"_index":191,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["jdate",{"_index":406,"title":{},"body":{"pipes/JdatePipe.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["jdate('11",{"_index":1276,"title":{},"body":{"index.html":{}}}],["jdate(1397",{"_index":1286,"title":{},"body":{"index.html":{}}}],["jdate(new",{"_index":1284,"title":{},"body":{"index.html":{}}}],["jdate/jdate",{"_index":459,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["jdate:'small",{"_index":1149,"title":{},"body":{"index.html":{}}}],["jdatepipe",{"_index":404,"title":{"pipes/JdatePipe.html":{}},"body":{"pipes/JdatePipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["jday",{"_index":189,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["jmonth",{"_index":188,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["jmonthlength",{"_index":362,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["jmonthlength(jyear",{"_index":387,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["js",{"_index":1002,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["jsdoc",{"_index":937,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["julian",{"_index":237,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["jyear",{"_index":195,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["keep",{"_index":525,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["keeping",{"_index":924,"title":{},"body":{"contributing.html":{}}}],["key",{"_index":783,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["keys",{"_index":507,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["keyword",{"_index":1157,"title":{},"body":{"index.html":{}}}],["kind",{"_index":1376,"title":{},"body":{"license.html":{}}}],["language",{"_index":849,"title":{},"body":{"interfaces/PersianService.html":{},"index.html":{}}}],["language=jsregexp",{"_index":722,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["last",{"_index":1219,"title":{},"body":{"index.html":{}}}],["leap",{"_index":260,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["leave",{"_index":1275,"title":{},"body":{"index.html":{}}}],["left",{"_index":631,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["legend",{"_index":648,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["length",{"_index":594,"title":{},"body":{"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["less",{"_index":930,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["lets",{"_index":1158,"title":{},"body":{"index.html":{}}}],["letter",{"_index":738,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["letter.service",{"_index":781,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["letter.service.ts",{"_index":676,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"coverage.html":{}}}],["letter.service.ts:104",{"_index":802,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:24",{"_index":804,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:26",{"_index":805,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:27",{"_index":806,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:35",{"_index":793,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:54",{"_index":792,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:63",{"_index":794,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:91",{"_index":796,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letters",{"_index":691,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["liability",{"_index":1391,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1388,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1068,"title":{},"body":{"index.html":{}}}],["library",{"_index":894,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["license",{"_index":1334,"title":{"license.html":{}},"body":{"license.html":{}}}],["life",{"_index":956,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["limitation",{"_index":1355,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1379,"title":{},"body":{"license.html":{}}}],["line",{"_index":1104,"title":{},"body":{"index.html":{}}}],["link",{"_index":571,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{}}}],["link]{@link",{"_index":637,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["list",{"_index":750,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"contributing.html":{},"index.html":{}}}],["listed",{"_index":1199,"title":{},"body":{"index.html":{}}}],["literal",{"_index":776,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["living",{"_index":1062,"title":{},"body":{"index.html":{}}}],["locking",{"_index":496,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["long",{"_index":442,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["longdate",{"_index":445,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["longer",{"_index":1298,"title":{},"body":{"index.html":{}}}],["longtime",{"_index":448,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["looking",{"_index":1234,"title":{},"body":{"index.html":{}}}],["loop",{"_index":609,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["lotustel",{"_index":521,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["lowercase",{"_index":510,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{}}}],["maintainable",{"_index":927,"title":{},"body":{"contributing.html":{}}}],["maintains",{"_index":123,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["make",{"_index":384,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"contributing.html":{},"index.html":{}}}],["many",{"_index":867,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["march",{"_index":222,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["match",{"_index":610,"title":{},"body":{"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["matched",{"_index":482,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["matches",{"_index":733,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["matching",{"_index":55,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchresult",{"_index":735,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["matchresult.length",{"_index":737,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["maybe",{"_index":1220,"title":{},"body":{"index.html":{}}}],["mci",{"_index":512,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["meaning",{"_index":1185,"title":{},"body":{"index.html":{}}}],["meaningful",{"_index":954,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["means",{"_index":488,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["medium",{"_index":436,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["mediumdate",{"_index":441,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["mediumtime",{"_index":447,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["merchantability",{"_index":1381,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1358,"title":{},"body":{"license.html":{}}}],["message",{"_index":951,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["messages",{"_index":953,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["method",{"_index":159,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["method]{@link",{"_index":461,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["methods",{"_index":20,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["million",{"_index":250,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["milliseconds",{"_index":1279,"title":{},"body":{"index.html":{}}}],["minmonthnumber",{"_index":400,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["minute",{"_index":931,"title":{},"body":{"contributing.html":{}}}],["miscellaneous",{"_index":1012,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1189,"title":{},"body":{"index.html":{}}}],["mit",{"_index":1335,"title":{},"body":{"license.html":{}}}],["mmm",{"_index":438,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["mobile",{"_index":138,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mobilecodes",{"_index":480,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mobilecodes[operator",{"_index":580,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["mobilephonenumberservice",{"_index":466,"title":{"injectables/MobilePhoneNumberService.html":{}},"body":{"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"index.html":{}}}],["mod",{"_index":267,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["mod(div(i",{"_index":318,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["mod(gmonth",{"_index":290,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["mod(num1",{"_index":1025,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mode",{"_index":1182,"title":{},"body":{"index.html":{}}}],["modify",{"_index":1357,"title":{},"body":{"license.html":{}}}],["module",{"_index":644,"title":{"modules/NgxPersianModule.html":{}},"body":{"modules/NgxPersianModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":646,"title":{"modules.html":{}},"body":{"modules/NgxPersianModule.html":{},"modules.html":{}}}],["month",{"_index":208,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["months",{"_index":1218,"title":{},"body":{"index.html":{}}}],["more",{"_index":32,"title":{},"body":{"pipes/EnNumPipe.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mr",{"_index":1339,"title":{},"body":{"license.html":{}}}],["mutated",{"_index":410,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["name",{"_index":19,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":1107,"title":{},"body":{"index.html":{}}}],["nameinenglish",{"_index":477,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["names",{"_index":426,"title":{},"body":{"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["national",{"_index":154,"title":{},"body":{"classes/InvalidNationalCodeError.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["nationalcode",{"_index":150,"title":{},"body":{"classes/InvalidNationalCodeError.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["nationalcodelength",{"_index":640,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["nationalcodepipe",{"_index":587,"title":{"pipes/NationalCodePipe.html":{}},"body":{"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["nationalcodeservice",{"_index":599,"title":{"injectables/NationalCodeService.html":{}},"body":{"injectables/NationalCodeService.html":{},"coverage.html":{},"index.html":{}}}],["native",{"_index":210,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["need",{"_index":412,"title":{},"body":{"pipes/JdatePipe.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["needed",{"_index":1100,"title":{},"body":{"index.html":{}}}],["needing",{"_index":352,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["needs",{"_index":420,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["never",{"_index":1136,"title":{},"body":{"index.html":{}}}],["new",{"_index":103,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"contributing.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":1217,"title":{},"body":{"index.html":{}}}],["ng_validators",{"_index":765,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["ngmodule",{"_index":663,"title":{},"body":{"modules/NgxPersianModule.html":{},"index.html":{}}}],["ngx",{"_index":1096,"title":{},"body":{"index.html":{}}}],["ngxpersian",{"_index":1041,"title":{},"body":{"index.html":{}}}],["ngxpersianmodule",{"_index":645,"title":{"modules/NgxPersianModule.html":{}},"body":{"modules/NgxPersianModule.html":{},"modules.html":{},"overview.html":{}}}],["non",{"_index":33,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["noninfringement",{"_index":1384,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":606,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["normalize(nationalcode",{"_index":624,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["normalizephonenumber",{"_index":475,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["normalizephonenumber(phonenumber",{"_index":501,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["normalizes",{"_index":617,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["notice",{"_index":1370,"title":{},"body":{"license.html":{}}}],["now",{"_index":929,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["npm",{"_index":945,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["null",{"_index":729,"title":{},"body":{"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{}}}],["num1",{"_index":1024,"title":{},"body":{"miscellaneous/functions.html":{}}}],["num2",{"_index":1021,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":62,"title":{},"body":{"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["number(value",{"_index":99,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["number.service",{"_index":44,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["number.service.ts",{"_index":468,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["number.service.ts:10",{"_index":831,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:101",{"_index":499,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["number.service.ts:11",{"_index":819,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:18",{"_index":815,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:30",{"_index":812,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:40",{"_index":816,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:49",{"_index":814,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:59",{"_index":486,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{}}}],["number.service.ts:68",{"_index":502,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["number.service.ts:76",{"_index":818,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:83",{"_index":478,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["number.service.ts:9",{"_index":822,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["numberofpassedgdays",{"_index":181,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["numberofpassedgdays(gdate",{"_index":234,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numberofpassedjdays",{"_index":182,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["numberofpassedjdays(jyear",{"_index":254,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["numbers",{"_index":11,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["numbers5454",{"_index":1177,"title":{},"body":{"index.html":{}}}],["numeric",{"_index":1053,"title":{},"body":{"index.html":{}}}],["numofdayinjyear",{"_index":341,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofdays",{"_index":217,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofgleapyears",{"_index":183,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["numofgleapyears(targetgyear",{"_index":257,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofjleapyears",{"_index":363,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["numofjleapyears(targetjyear",{"_index":392,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["numofpasseddaysto1farvardin",{"_index":335,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["object",{"_index":192,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.keys(mobilecodes",{"_index":579,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["objects",{"_index":407,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["obtaining",{"_index":1347,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":732,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["one",{"_index":31,"title":{},"body":{"pipes/EnNumPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["ones",{"_index":692,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["open",{"_index":876,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["opening",{"_index":887,"title":{},"body":{"contributing.html":{}}}],["operator",{"_index":139,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":471,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["operatorsnames",{"_index":483,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["operatorsnames[operator",{"_index":582,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["optional",{"_index":28,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options",{"_index":678,"title":{},"body":{"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options.endigits",{"_index":715,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["options.persiandigits",{"_index":720,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["options.symbols",{"_index":716,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["options.whitespaces",{"_index":718,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["ot",{"_index":1075,"title":{},"body":{"index.html":{}}}],["others",{"_index":713,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["otherwise",{"_index":373,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{},"license.html":{}}}],["out",{"_index":660,"title":{},"body":{"modules/NgxPersianModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":204,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["outputs",{"_index":1114,"title":{},"body":{"index.html":{}}}],["overview",{"_index":1402,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":993,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":51,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{}}}],["parameter",{"_index":80,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["params",{"_index":121,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["pars",{"_index":1274,"title":{},"body":{"index.html":{}}}],["part",{"_index":908,"title":{},"body":{"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["particular",{"_index":1222,"title":{},"body":{"index.html":{},"license.html":{}}}],["parts",{"_index":1086,"title":{},"body":{"index.html":{}}}],["pass",{"_index":423,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["passed",{"_index":161,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["passeddays",{"_index":333,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["passing",{"_index":1196,"title":{},"body":{"index.html":{}}}],["patter",{"_index":1150,"title":{},"body":{"index.html":{}}}],["pattern",{"_index":424,"title":{},"body":{"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["people",{"_index":1061,"title":{},"body":{"index.html":{}}}],["performance",{"_index":613,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["permission",{"_index":1341,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1365,"title":{},"body":{"license.html":{}}}],["persian",{"_index":10,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["persian.module.ts",{"_index":662,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["persian/classes",{"_index":1300,"title":{},"body":{"index.html":{}}}],["persian/classes/jdate.html#format",{"_index":463,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["persian/directives/persiannumbersdirective.html",{"_index":1322,"title":{},"body":{"index.html":{}}}],["persian/injectables/nationalcodeservice.html",{"_index":1295,"title":{},"body":{"index.html":{}}}],["persian/src/lib/jdate/arithmeticutils.ts",{"_index":962,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["persian/src/lib/jdate/invalidjalalidate.error.ts",{"_index":110,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"coverage.html":{}}}],["persian/src/lib/jdate/invalidjalalidate.error.ts:4",{"_index":120,"title":{},"body":{"classes/InvalidJalaliDateError.html":{}}}],["persian/src/lib/jdate/jalali",{"_index":165,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["persian/src/lib/jdate/jdate.ts",{"_index":973,"title":{},"body":{"coverage.html":{}}}],["persian/src/lib/jdate/simpledate.interface.ts",{"_index":853,"title":{},"body":{"interfaces/SimpleDateInterface.html":{},"coverage.html":{}}}],["persian/src/lib/ngx",{"_index":661,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["persian/src/lib/pipes/ennum.pipe.ts",{"_index":7,"title":{},"body":{"pipes/EnNumPipe.html":{},"coverage.html":{}}}],["persian/src/lib/pipes/ennum.pipe.ts:17",{"_index":25,"title":{},"body":{"pipes/EnNumPipe.html":{}}}],["persian/src/lib/pipes/fanum.pipe.ts",{"_index":58,"title":{},"body":{"pipes/FaNumPipe.html":{},"coverage.html":{}}}],["persian/src/lib/pipes/fanum.pipe.ts:18",{"_index":63,"title":{},"body":{"pipes/FaNumPipe.html":{}}}],["persian/src/lib/pipes/ircurrency.pipe.ts",{"_index":67,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["persian/src/lib/pipes/ircurrency.pipe.ts:30",{"_index":89,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["persian/src/lib/pipes/jdate.pipe.ts",{"_index":405,"title":{},"body":{"pipes/JdatePipe.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["persian/src/lib/pipes/jdate.pipe.ts:60",{"_index":453,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["persian/src/lib/pipes/jdate.pipe.ts:72",{"_index":457,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["persian/src/lib/pipes/nationalcode.pipe.ts",{"_index":588,"title":{},"body":{"pipes/NationalCodePipe.html":{},"coverage.html":{}}}],["persian/src/lib/pipes/nationalcode.pipe.ts:14",{"_index":590,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["persian/src/lib/services/invalidmobileoperator.error.ts",{"_index":137,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidmobileoperator.error.ts:4",{"_index":141,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{}}}],["persian/src/lib/services/invalidmobilephonenumber.error.ts",{"_index":144,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidmobilephonenumber.error.ts:4",{"_index":145,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{}}}],["persian/src/lib/services/invalidnationalcode.error.ts",{"_index":147,"title":{},"body":{"classes/InvalidNationalCodeError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidnationalcode.error.ts:5",{"_index":152,"title":{},"body":{"classes/InvalidNationalCodeError.html":{}}}],["persian/src/lib/services/invalidserviceinput.error.ts",{"_index":157,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidserviceinput.error.ts:4",{"_index":160,"title":{},"body":{"classes/InvalidServiceInputError.html":{}}}],["persian/src/lib/services/mobile",{"_index":467,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["persian/src/lib/services/national",{"_index":600,"title":{},"body":{"injectables/NationalCodeService.html":{},"coverage.html":{}}}],["persian/src/lib/services/persian",{"_index":675,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"coverage.html":{}}}],["persian/src/lib/validators/persian",{"_index":752,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["persian_letters_pattern",{"_index":694,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persiandigits",{"_index":684,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["persianletterdirective",{"_index":656,"title":{"directives/PersianLetterDirective.html":{}},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["persianletterservice",{"_index":693,"title":{"injectables/PersianLetterService.html":{}},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["persianletterservice.persian_letters_pattern",{"_index":724,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianletterservice.symbols_pattern",{"_index":717,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianletterservice.whitespaces_pattern",{"_index":719,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianlettersvalidator",{"_index":763,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["persianlettersvalidator(options",{"_index":1035,"title":{},"body":{"miscellaneous/functions.html":{}}}],["persianlettersvalidator(this.options)(control",{"_index":787,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["persianlettersvalidator({endigits",{"_index":1315,"title":{},"body":{"index.html":{}}}],["persianlettersvalidator({persiandigits",{"_index":1316,"title":{},"body":{"index.html":{}}}],["persianlettersvalidator({symbols",{"_index":1317,"title":{},"body":{"index.html":{}}}],["persianlettersvalidator({whitespaces",{"_index":1314,"title":{},"body":{"index.html":{}}}],["persianlettersvalidator]{@link",{"_index":785,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["persiannumberpattern",{"_index":808,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumbersdirective",{"_index":657,"title":{"directives/PersianNumbersDirective.html":{}},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"overview.html":{}}}],["persiannumbersdirective].(https://alihoseiny.github.io/ngx",{"_index":1321,"title":{},"body":{"index.html":{}}}],["persiannumberservice",{"_index":42,"title":{"injectables/PersianNumberService.html":{}},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["persiannumberservice._getmatchedpatternlength(value",{"_index":835,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberservice.persiannumberpattern",{"_index":721,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persiannumberservice.persiannumberstable[4",{"_index":837,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberservice.persiannumberstable[5",{"_index":839,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberservice.persiannumberstable[6",{"_index":841,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberstable",{"_index":809,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumbersvalidator",{"_index":757,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["persiannumbersvalidator()(control",{"_index":784,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["persiannumbersvalidator(persiannumberservice",{"_index":1040,"title":{},"body":{"miscellaneous/functions.html":{}}}],["persiannumbersvalidator]{@link",{"_index":782,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["persianregex",{"_index":741,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["persianregex.test(value",{"_index":744,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["persianservice",{"_index":687,"title":{"interfaces/PersianService.html":{}},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"coverage.html":{}}}],["persiantextdigit",{"_index":15,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["person",{"_index":1346,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1366,"title":{},"body":{"license.html":{}}}],["phone",{"_index":140,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["phonenumber",{"_index":484,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["phonenumber.indexof(code",{"_index":581,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["phonenumber.replace('+98",{"_index":575,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["pipe",{"_index":0,"title":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{}},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["pipe({name",{"_index":45,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["pipes",{"_index":2,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{},"index.html":{},"overview.html":{}}}],["pipes/ennum.pipe",{"_index":667,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/fanum.pipe",{"_index":666,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/ircurrency.pipe",{"_index":668,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/jdate.pipe",{"_index":670,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/nationalcode.pipe",{"_index":669,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipetransform",{"_index":40,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{}}}],["places",{"_index":603,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["please",{"_index":882,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ploptions",{"_index":673,"title":{"interfaces/PLOptions.html":{}},"body":{"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"index.html":{}}}],["plus",{"_index":710,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"contributing.html":{},"index.html":{}}}],["popular",{"_index":1115,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1374,"title":{},"body":{"license.html":{}}}],["possible",{"_index":1120,"title":{},"body":{"index.html":{}}}],["pre",{"_index":425,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["private",{"_index":354,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["probably",{"_index":64,"title":{},"body":{"pipes/FaNumPipe.html":{}}}],["problem",{"_index":879,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["problems",{"_index":881,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["procedure",{"_index":242,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["produces",{"_index":1141,"title":{},"body":{"index.html":{}}}],["program",{"_index":690,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["project",{"_index":869,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["projects/.../arithmeticutils.ts",{"_index":1018,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../ircurrency.pipe.ts",{"_index":1015,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../jdate.pipe.ts",{"_index":1014,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../mobile",{"_index":1016,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../persian",{"_index":1019,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/ngx",{"_index":6,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["proper",{"_index":124,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"pipes/JdatePipe.html":{}}}],["properties",{"_index":149,"title":{},"body":{"classes/InvalidNationalCodeError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["property",{"_index":755,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["provide",{"_index":764,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["provided",{"_index":1049,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":272,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["providers",{"_index":651,"title":{},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"overview.html":{}}}],["public",{"_index":173,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["publish",{"_index":1359,"title":{},"body":{"license.html":{}}}],["pull",{"_index":948,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["purpose",{"_index":1383,"title":{},"body":{"license.html":{}}}],["questions",{"_index":1111,"title":{},"body":{"index.html":{}}}],["r",{"_index":75,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["range",{"_index":377,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["re",{"_index":939,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["reach",{"_index":628,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["reactive",{"_index":1036,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["read",{"_index":1320,"title":{},"body":{"index.html":{}}}],["readable",{"_index":1144,"title":{},"body":{"index.html":{}}}],["reading",{"_index":1153,"title":{},"body":{"index.html":{}}}],["readme.md",{"_index":947,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["real",{"_index":224,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["reality",{"_index":497,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["reasons",{"_index":1057,"title":{},"body":{"index.html":{}}}],["recent",{"_index":1071,"title":{},"body":{"index.html":{}}}],["recognizable",{"_index":142,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"index.html":{}}}],["recreates",{"_index":1131,"title":{},"body":{"index.html":{}}}],["reevaluated",{"_index":409,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["reference",{"_index":419,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["reformat",{"_index":413,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["regex",{"_index":705,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["regexp",{"_index":704,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["regexp(/^((\\+98|0)9\\d{9",{"_index":573,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["regexp(`[${persianletterservice.persian_letters_pattern",{"_index":742,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["regexp(`[${persiannumberservice.persiannumberpattern",{"_index":833,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["regexp(`[${result",{"_index":723,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["regular",{"_index":1134,"title":{},"body":{"index.html":{}}}],["related",{"_index":456,"title":{},"body":{"pipes/JdatePipe.html":{},"index.html":{}}}],["reminder",{"_index":642,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["removes",{"_index":503,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["replace(/٥/g",{"_index":838,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["replace(/٦/g",{"_index":840,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["replaced",{"_index":38,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{}}}],["replaces",{"_index":9,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["repository",{"_index":917,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["representing",{"_index":193,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["request",{"_index":895,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["requesting",{"_index":889,"title":{},"body":{"contributing.html":{}}}],["reset",{"_index":659,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["restriction",{"_index":1353,"title":{},"body":{"license.html":{}}}],["result",{"_index":54,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":56,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"contributing.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":50,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["returns",{"_index":36,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rial",{"_index":71,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rian",{"_index":1116,"title":{},"body":{"index.html":{}}}],["right",{"_index":630,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["rightel",{"_index":514,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rights",{"_index":1356,"title":{},"body":{"license.html":{}}}],["root",{"_index":273,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["round",{"_index":964,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["round(x",{"_index":1028,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":421,"title":{},"body":{"pipes/JdatePipe.html":{},"contributing.html":{},"index.html":{}}}],["rxjs",{"_index":1004,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":703,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["salam@alihoseiny.ir",{"_index":1329,"title":{},"body":{"index.html":{}}}],["samantel",{"_index":520,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":435,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["save",{"_index":904,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["scratch",{"_index":1269,"title":{},"body":{"index.html":{}}}],["script",{"_index":1331,"title":{},"body":{"index.html":{}}}],["search",{"_index":884,"title":{},"body":{"contributing.html":{}}}],["searching",{"_index":711,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["second",{"_index":79,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["section",{"_index":1112,"title":{},"body":{"index.html":{}}}],["see",{"_index":762,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["seemed",{"_index":863,"title":{},"body":{"contributing.html":{}}}],["selector",{"_index":767,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["sell",{"_index":1363,"title":{},"body":{"license.html":{}}}],["serve",{"_index":847,"title":{},"body":{"interfaces/PersianService.html":{}}}],["service",{"_index":158,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["service.ts",{"_index":845,"title":{},"body":{"interfaces/PersianService.html":{},"coverage.html":{}}}],["service.ts:10",{"_index":850,"title":{},"body":{"interfaces/PersianService.html":{}}}],["service.ts:6",{"_index":851,"title":{},"body":{"interfaces/PersianService.html":{}}}],["service.ts:8",{"_index":852,"title":{},"body":{"interfaces/PersianService.html":{}}}],["services",{"_index":846,"title":{},"body":{"interfaces/PersianService.html":{},"index.html":{}}}],["services/persian",{"_index":43,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["set",{"_index":760,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["sets",{"_index":748,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["setting",{"_index":758,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["shall",{"_index":1371,"title":{},"body":{"license.html":{}}}],["shatel",{"_index":517,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["short",{"_index":429,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["shortdate",{"_index":434,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["shorter",{"_index":1297,"title":{},"body":{"index.html":{}}}],["shorttime",{"_index":446,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["shows",{"_index":731,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["sides",{"_index":632,"title":{},"body":{"injectables/NationalCodeService.html":{},"index.html":{}}}],["signle",{"_index":1065,"title":{},"body":{"index.html":{}}}],["similar",{"_index":1046,"title":{},"body":{"index.html":{}}}],["simmilar",{"_index":885,"title":{},"body":{"contributing.html":{}}}],["simple",{"_index":854,"title":{},"body":{"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["simpledate.interface",{"_index":270,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["simpledateinterface",{"_index":206,"title":{"interfaces/SimpleDateInterface.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"index.html":{}}}],["simpler",{"_index":1290,"title":{},"body":{"index.html":{}}}],["simplest",{"_index":873,"title":{},"body":{"contributing.html":{}}}],["simply",{"_index":759,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["six",{"_index":1216,"title":{},"body":{"index.html":{}}}],["software",{"_index":1349,"title":{},"body":{"license.html":{}}}],["sold",{"_index":469,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["solution",{"_index":1078,"title":{},"body":{"index.html":{}}}],["solved",{"_index":1076,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["spaces",{"_index":629,"title":{},"body":{"injectables/NationalCodeService.html":{},"injectables/PersianLetterService.html":{}}}],["spadan",{"_index":515,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["speakers",{"_index":870,"title":{},"body":{"contributing.html":{}}}],["special",{"_index":712,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"contributing.html":{},"index.html":{}}}],["specific",{"_index":749,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["specified",{"_index":709,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["split",{"_index":611,"title":{},"body":{"injectables/NationalCodeService.html":{}}}],["splits",{"_index":728,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["stack",{"_index":125,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["start",{"_index":227,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"contributing.html":{},"index.html":{}}}],["started",{"_index":859,"title":{"contributing.html":{},"index.html":{},"license.html":{}},"body":{}}],["startfromzero",{"_index":380,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["starting",{"_index":378,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["starts",{"_index":199,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["statements",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":172,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["steps",{"_index":916,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["still",{"_index":1110,"title":{},"body":{"index.html":{}}}],["strange",{"_index":1326,"title":{},"body":{"index.html":{}}}],["string",{"_index":23,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidNationalCodeError.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["string(value",{"_index":52,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["strings",{"_index":495,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["stuff",{"_index":345,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["styles",{"_index":1129,"title":{},"body":{"index.html":{}}}],["subject",{"_index":1368,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1361,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1373,"title":{},"body":{"license.html":{}}}],["success",{"_index":777,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["super(...params",{"_index":122,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["super.transform(value",{"_index":106,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["support",{"_index":1399,"title":{},"body":{"modules.html":{}}}],["supporting",{"_index":1197,"title":{},"body":{"index.html":{}}}],["svg",{"_index":1400,"title":{},"body":{"modules.html":{}}}],["symbols",{"_index":685,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["symbols_pattern",{"_index":700,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["syntax",{"_index":938,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["t",{"_index":98,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["table",{"_index":992,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":756,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["talia",{"_index":513,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["targetgyear",{"_index":264,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["targetjyear",{"_index":394,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["tdd",{"_index":932,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["tell",{"_index":878,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["template",{"_index":1055,"title":{},"body":{"index.html":{}}}],["templates",{"_index":1099,"title":{},"body":{"index.html":{}}}],["test",{"_index":1092,"title":{},"body":{"index.html":{}}}],["tested",{"_index":243,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["tests",{"_index":907,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["text",{"_index":12,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["texts",{"_index":689,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["thank",{"_index":865,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["that's",{"_index":1312,"title":{},"body":{"index.html":{}}}],["thing",{"_index":874,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["things",{"_index":925,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["think",{"_index":906,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["this.arabictopersian(value",{"_index":843,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["this.firstdayofjyearinmarch(jalaliyear",{"_index":337,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.firstdayofjyearinmarch(jyear",{"_index":303,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.georgianyeartojalaliyear(georgianyear",{"_index":332,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.getphonenumberoperator(phonenumber",{"_index":584,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["this.isphonenumberpatternvalid(phonenumber",{"_index":577,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["this.isvalidjday(jyear",{"_index":403,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["this.isvalidjmonth(jmonth",{"_index":402,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["this.isvalidjyear(jyear",{"_index":401,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["this.jalalidatecalculator.converttogeorgian(1397",{"_index":1235,"title":{},"body":{"index.html":{}}}],["this.jalalidatecalculator.converttojalali(new",{"_index":1240,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isjyearleap(1375",{"_index":1209,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isjyearleap(1397",{"_index":1211,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjdate(1375",{"_index":1213,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjdate(1397",{"_index":1215,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjday(1375",{"_index":1223,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjday(1397",{"_index":1224,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjmonth(12",{"_index":1225,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjyear(1397",{"_index":1227,"title":{},"body":{"index.html":{}}}],["this.jalalidatevalidatorservice.isvalidjyear(3179",{"_index":1229,"title":{},"body":{"index.html":{}}}],["this.message",{"_index":134,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["this.mobilephonenumberservice.isphonenumberpatternvalid('09357413028",{"_index":1193,"title":{},"body":{"index.html":{}}}],["this.mobilephonenumberservice.isphonenumberpatternvalid('912475",{"_index":1195,"title":{},"body":{"index.html":{}}}],["this.mobilephonenumberservice.isvalidphonenumber('09005574410",{"_index":1206,"title":{},"body":{"index.html":{}}}],["this.mobilephonenumberservice.isvalidphonenumber('09195574410",{"_index":1204,"title":{},"body":{"index.html":{}}}],["this.nationalcode",{"_index":153,"title":{},"body":{"classes/InvalidNationalCodeError.html":{}}}],["this.nationalcodeservice('34756",{"_index":1305,"title":{},"body":{"index.html":{}}}],["this.normalizephonenumber(phonenumber",{"_index":578,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["this.numberofpassedgdays(gdate",{"_index":334,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.numberofpassedgdays(new",{"_index":301,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.numofgleapyears(gyear",{"_index":327,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.persianletterservice.containspersian",{"_index":1179,"title":{},"body":{"index.html":{}}}],["this.persianletterservice.containspersian('some",{"_index":1176,"title":{},"body":{"index.html":{}}}],["this.persianletterservice.ispersian",{"_index":1191,"title":{},"body":{"index.html":{}}}],["this.persiannumberservice.containspersian",{"_index":1167,"title":{},"body":{"index.html":{}}}],["this.persiannumberservice.containspersian('a",{"_index":1164,"title":{},"body":{"index.html":{}}}],["this.persiannumberservice.ispersian",{"_index":1170,"title":{},"body":{"index.html":{}}}],["this.persiannumberservice.toenglish(value",{"_index":53,"title":{},"body":{"pipes/EnNumPipe.html":{}}}],["this.persiannumberservice.topersian(value",{"_index":65,"title":{},"body":{"pipes/FaNumPipe.html":{}}}],["this.validator.numofjleapyears(jyear",{"_index":326,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["those",{"_index":460,"title":{},"body":{"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["thousand",{"_index":1067,"title":{},"body":{"index.html":{}}}],["three",{"_index":856,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["throw",{"_index":102,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["thrown",{"_index":127,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["throws",{"_index":576,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["time",{"_index":905,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["tkc",{"_index":516,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["toenglish",{"_index":811,"title":{},"body":{"injectables/PersianNumberService.html":{},"index.html":{}}}],["toenglish(value",{"_index":817,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["together",{"_index":800,"title":{},"body":{"injectables/PersianLetterService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["toman",{"_index":76,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["tool",{"_index":1043,"title":{},"body":{"index.html":{}}}],["tools",{"_index":1048,"title":{},"body":{"index.html":{}}}],["topersian",{"_index":791,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["topersian(value",{"_index":801,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["tort",{"_index":1395,"title":{},"body":{"license.html":{}}}],["trace",{"_index":126,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["transform",{"_index":21,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{}}}],["transform(value",{"_index":22,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/JdatePipe.html":{},"pipes/NationalCodePipe.html":{}}}],["treat",{"_index":417,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["true",{"_index":367,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["try",{"_index":583,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["ts",{"_index":130,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["tslib",{"_index":1006,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":1031,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":1027,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["type",{"_index":27,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["type.tolowercase",{"_index":100,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["typedoc",{"_index":1008,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":74,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["typescript",{"_index":1079,"title":{},"body":{"index.html":{}}}],["u0629\\u0630",{"_index":697,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u0639\\u0641",{"_index":698,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u064d\\u064e\\u064f\\u067e\\u0670\\u0686\\u0698\\u200c\\u0621",{"_index":696,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u0654",{"_index":699,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u06a9\\u06af\\u06c0\\u06cc\\u060c\\u062a\\u062b\\u062c\\u062d\\u062e\\u062f\\u063a\\u064a\\u064b\\u064c",{"_index":695,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u06f0",{"_index":820,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f1",{"_index":823,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f2",{"_index":824,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f3",{"_index":825,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f4",{"_index":826,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f5",{"_index":827,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f6",{"_index":828,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f7",{"_index":829,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f8",{"_index":830,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f9",{"_index":821,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["unanswered",{"_index":1081,"title":{},"body":{"index.html":{}}}],["unchanged",{"_index":1161,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":740,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["unit",{"_index":1084,"title":{},"body":{"index.html":{}}}],["unix",{"_index":1280,"title":{},"body":{"index.html":{}}}],["until",{"_index":263,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["up",{"_index":248,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["usage",{"_index":1108,"title":{},"body":{"index.html":{}}}],["usages",{"_index":1137,"title":{},"body":{"index.html":{}}}],["use",{"_index":171,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"contributing.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":1333,"title":{},"body":{"index.html":{}}}],["useexisting",{"_index":766,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["useful",{"_index":864,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["user",{"_index":1294,"title":{},"body":{"index.html":{}}}],["uses",{"_index":1135,"title":{},"body":{"index.html":{}}}],["using",{"_index":346,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"contributing.html":{},"index.html":{}}}],["v",{"_index":1045,"title":{},"body":{"index.html":{}}}],["v4",{"_index":1073,"title":{},"body":{"index.html":{}}}],["v7",{"_index":1074,"title":{},"body":{"index.html":{}}}],["v8",{"_index":129,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{}}}],["valid",{"_index":114,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["validate",{"_index":768,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["validate(control",{"_index":771,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["validating",{"_index":350,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["validation",{"_index":344,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/NationalCodeService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["validationerror",{"_index":778,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["validator",{"_index":174,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["validator.service",{"_index":271,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["validator.service.ts",{"_index":342,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["validator.service.ts:115",{"_index":375,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:125",{"_index":371,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:15",{"_index":398,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:16",{"_index":364,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:25",{"_index":388,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:38",{"_index":393,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:81",{"_index":366,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:91",{"_index":386,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:99",{"_index":381,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validatorfn",{"_index":1039,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validators",{"_index":780,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["validators.ts",{"_index":990,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validators/persian",{"_index":664,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["validity",{"_index":493,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["value",{"_index":29,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidNationalCodeError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.format(jdatepipe.convertnametoformat(format",{"_index":465,"title":{},"body":{"pipes/JdatePipe.html":{}}}],["value.length",{"_index":595,"title":{},"body":{"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{}}}],["value.match(new",{"_index":834,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["value.match(persianletterservice._stringvalidationregex(options",{"_index":736,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["value.replace(/٤/g",{"_index":836,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["value.substring(0",{"_index":596,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["value.substring(3",{"_index":597,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["value.tostring",{"_index":842,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["value.trim",{"_index":743,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["value[9",{"_index":598,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["values",{"_index":508,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":980,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1403,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vase",{"_index":169,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["versa",{"_index":170,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["version",{"_index":1072,"title":{},"body":{"index.html":{}}}],["viewing",{"_index":1293,"title":{},"body":{"index.html":{}}}],["vise",{"_index":1051,"title":{},"body":{"index.html":{}}}],["vision",{"_index":1292,"title":{},"body":{"index.html":{}}}],["want",{"_index":382,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"interfaces/PersianService.html":{},"contributing.html":{},"index.html":{}}}],["warranties",{"_index":1380,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1375,"title":{},"body":{"license.html":{}}}],["way",{"_index":880,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["ways",{"_index":868,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["we've",{"_index":1200,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1392,"title":{},"body":{"license.html":{}}}],["white",{"_index":797,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["whitespace",{"_index":1187,"title":{},"body":{"index.html":{}}}],["whitespaces",{"_index":686,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["whitespaces_pattern",{"_index":702,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["winter",{"_index":233,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["within",{"_index":228,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["without",{"_index":351,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"pipes/JdatePipe.html":{},"index.html":{},"license.html":{}}}],["wondering",{"_index":899,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["word",{"_index":871,"title":{},"body":{"contributing.html":{}}}],["words",{"_index":1165,"title":{},"body":{"index.html":{}}}],["work",{"_index":862,"title":{},"body":{"contributing.html":{}}}],["working",{"_index":1047,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":774,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["write",{"_index":910,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["writing",{"_index":1268,"title":{},"body":{"index.html":{}}}],["written",{"_index":1085,"title":{},"body":{"index.html":{}}}],["wtih",{"_index":1178,"title":{},"body":{"index.html":{}}}],["x",{"_index":1034,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["xxx",{"_index":1138,"title":{},"body":{"index.html":{}}}],["xxxxxx",{"_index":1139,"title":{},"body":{"index.html":{}}}],["year",{"_index":197,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{},"index.html":{}}}],["years",{"_index":251,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["yor",{"_index":1130,"title":{},"body":{"index.html":{}}}],["you've",{"_index":1122,"title":{},"body":{"index.html":{}}}],["yy/m/d",{"_index":430,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["yyyy",{"_index":439,"title":{},"body":{"pipes/JdatePipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["zero",{"_index":200,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/NationalCodeService.html":{},"index.html":{}}}],["zone.js",{"_index":1010,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":658,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"pipes/EnNumPipe.html":{"url":"pipes/EnNumPipe.html","title":"pipe - EnNumPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  EnNumPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/enNum.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Replaces all persian numbers in the text to the english numbers.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{persianTextDigit | enNum}}\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        enNum\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/enNum.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a string containing one or more non-english digits. Could be an empty string.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        input value replaced all persian digits with english digits.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all persian numbers in the text to the english numbers.\n * @example {{persianTextDigit | enNum}}\n */\n@Pipe({name: 'enNum'})\nexport class EnNumPipe  implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   * @return input value replaced all persian digits with english digits.\n   * @param value a string containing one or more non-english digits. Could be an empty string.\n   */\n  transform(value: string): string {\n    value = String(value);\n    return this.persianNumberService.toEnglish(value);\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FaNumPipe.html":{"url":"pipes/FaNumPipe.html","title":"pipe - FaNumPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FaNumPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/faNum.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Replaces all arabic and english numbers with persian numbers.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{englishTextDigit | faNum}}\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        faNum\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/faNum.pipe.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a number or string (probably empty).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a string that all english and arabic numbers in the input has been replaced with persian digits.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all arabic and english numbers with persian numbers.\n * @example {{englishTextDigit | faNum}}\n */\n@Pipe({name: 'faNum'})\nexport class FaNumPipe implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   *\n   * @param value a number or string (probably empty).\n   * @return a string that all english and arabic numbers in the input has been replaced with persian digits.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    return this.persianNumberService.toPersian(value);\n  }\n}\n\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IRCurrencyPipe.html":{"url":"pipes/IRCurrencyPipe.html","title":"pipe - IRCurrencyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IRCurrencyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Formats input as a currency value.\ndefault type is rial. You can choose on of the following currency types:\n  r or rial for ریال\n\n  to or toman for تومان  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        irc\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | number, type: string, digitInfo: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        a number of a string only contains digits\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'rial'\n                                    \n\n                                    \n                                        currency type\n\n                                    \n                                \n                                \n                                    digitInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '1.0-0'\n                                    \n\n                                    \n                                        decimal pipe formatter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            1925100 -&gt; 1,925,100 ریال\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform} from '@angular/core';\nimport {DecimalPipe} from '@angular/common';\n\nexport enum IRCurrencies {\n  rial = 'ریال',\n  r = 'ریال',\n  toman = 'تومان',\n  t = 'تومان'\n}\n\n/**\n * Formats input as a currency value.\n * default type is rial. You can choose on of the following currency types:\n *\n *      r or rial for ریال\n *\n *      to or toman for تومان\n *\n *  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0\n */\n@Pipe({name: 'irc'})\nexport class IRCurrencyPipe extends DecimalPipe implements PipeTransform {\n\n  /**\n   * @param value a number of a string only contains digits\n   * @param type currency type\n   * @param digitInfo decimal pipe formatter\n   * @example 1925100 -> 1,925,100 ریال\n   */\n  transform(value: string | number, type: string = 'rial', digitInfo: string = '1.0-0') {\n    value = Number(value);\n    type = type.toLowerCase();\n    if (isNaN(value)) { throw new Error(`${value} is not a acceptable number`); }\n    return super.transform(value, digitInfo) + ' ' + IRCurrencies[type];\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidJalaliDateError.html":{"url":"classes/InvalidJalaliDateError.html","title":"class - InvalidJalaliDateError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidJalaliDateError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/InvalidJalaliDate.error.ts\n        \n\n            \n                Description\n            \n            \n                This Error will throw When inputted date is not a valid date according to the Jalali Calendar.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/JDate/InvalidJalaliDate.error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidJalaliDateError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidJalaliDateError);\n    }\n\n    this.message = 'Invalid jalali date.';\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidMobileOperatorError.html":{"url":"classes/InvalidMobileOperatorError.html","title":"class - InvalidMobileOperatorError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidMobileOperatorError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidMobileOperator.error.ts\n        \n\n            \n                Description\n            \n            \n                This error will throw when there is no valid mobile operator for inputted mobile phone number.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidMobileOperator.error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidMobileOperatorError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobileOperatorError);\n    }\n\n    this.message = 'Operator of this number is not recognizable.';\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidMobilePhoneNumberError.html":{"url":"classes/InvalidMobilePhoneNumberError.html","title":"class - InvalidMobilePhoneNumberError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidMobilePhoneNumberError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidMobilePhoneNumber.error.ts\n        \n\n            \n                Description\n            \n            \n                When mobile phone number is not valid this error will throw.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidMobilePhoneNumber.error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidMobilePhoneNumberError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobilePhoneNumberError);\n    }\n\n    this.message = 'This phone number is not valid.';\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidNationalCodeError.html":{"url":"classes/InvalidNationalCodeError.html","title":"class - InvalidNationalCodeError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidNationalCodeError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidNationalCode.error.ts\n        \n\n            \n                Description\n            \n            \n                When mobile phone number is not valid this error will throw.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                nationalCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(nationalCode: string, ...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidNationalCode.error.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        nationalCode\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nationalCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/InvalidNationalCode.error.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidNationalCodeError extends Error {\n  nationalCode: string;\n  constructor(nationalCode: string = '', ...params) {\n\n    super(...params);\n\n    this.nationalCode = nationalCode;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidNationalCodeError);\n    }\n\n    this.message = `The national code value (${this.nationalCode}) is not a valid national code.`;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidServiceInputError.html":{"url":"classes/InvalidServiceInputError.html","title":"class - InvalidServiceInputError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidServiceInputError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidServiceInput.error.ts\n        \n\n            \n                Description\n            \n            \n                This error will throw when input value of the service method is not a valid value.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidServiceInput.error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidServiceInputError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidServiceInputError);\n    }\n\n    this.message = 'Invalid value has been passed to the service.';\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JalaliDateCalculatorService.html":{"url":"injectables/JalaliDateCalculatorService.html","title":"injectable - JalaliDateCalculatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JalaliDateCalculatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts\n        \n\n            \n                Description\n            \n            \n                This class converts Jalali date to Georgian and vase versa. You can use all of the methods as static methods.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertToGeorgian\n                            \n                            \n                                convertToJalali\n                            \n                            \n                                createGDateFromDays\n                            \n                            \n                                firstDayOfJYearInMarch\n                            \n                            \n                                georgianYearToJalaliYear\n                            \n                            \n                                jalaliYearToGeorgianYear\n                            \n                            \n                                numberOfPassedGDays\n                            \n                            \n                                numberOfPassedJDays\n                            \n                            \n                                numOfGLeapYears\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(validator: JalaliDateValidatorService)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validator\n                                                  \n                                                        \n                                                                        JalaliDateValidatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convertToGeorgian\n                        \n                        \n                    \n                \n            \n            \n                \nconvertToGeorgian(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:149\n                \n            \n\n\n            \n                \n                    Converts a valid jalali date to a javascript Date object representing a equivalent Georgian date.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a full Jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from 1\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convertToJalali\n                        \n                        \n                    \n                \n            \n            \n                \nconvertToJalali(gDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:108\n                \n            \n\n\n            \n                \n                    this method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\nATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    gDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Georgian date as a javascript Date object.\n[Implementation in source code]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SimpleDateInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createGDateFromDays\n                        \n                        \n                    \n                \n            \n            \n                \ncreateGDateFromDays(numOfDays: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:54\n                \n            \n\n\n            \n                \n                    Creates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\nImplementation in source code\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    numOfDays\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firstDayOfJYearInMarch\n                        \n                        \n                    \n                \n            \n            \n                \nfirstDayOfJYearInMarch(jYear)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:78\n                \n            \n\n\n            \n                \n                    first day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of new jalali year in March.\nThe day number starts from 1 not zero and is equal to the real numbers in the calendar.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            georgianYearToJalaliYear\n                        \n                        \n                    \n                \n            \n            \n                \ngeorgianYearToJalaliYear(gYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:96\n                \n            \n\n\n            \n                \n                    Converts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    gYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full georgian year like 2018\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            jalaliYearToGeorgianYear\n                        \n                        \n                    \n                \n            \n            \n                \njalaliYearToGeorgianYear(jYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:88\n                \n            \n\n\n            \n                \n                    Converts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year\nthat starts in the winter of jalali year.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numberOfPassedGDays\n                        \n                        \n                    \n                \n            \n            \n                \nnumberOfPassedGDays(gDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:30\n                \n            \n\n\n            \n                \n                    Calculates the Julian Day number from Gregorian or Julian calendar dates.\nOnly some code cleaning applied to the source code.\nThe procedure was tested to be good since 1 March, -100100 (of both calendars) up to a few million years into the future.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    gDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an instance of javascript date representing a Georgian date.\n[Implementation in source code]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numberOfPassedJDays\n                        \n                        \n                    \n                \n            \n            \n                \nnumberOfPassedJDays(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:44\n                \n            \n\n\n            \n                \n                    Returns number of passed days from source day in jalali calendar to the given jalali date.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        day number starts from one\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numOfGLeapYears\n                        \n                        \n                    \n                \n            \n            \n                \nnumOfGLeapYears(targetGYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:69\n                \n            \n\n\n            \n                \n                    This function returns number of passed leap years from AD 621 until targetGYear.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetGYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is full year number like 2018\n[Implementation in source code]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            validator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JalaliDateValidatorService\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\nimport {SimpleDateInterface} from './SimpleDate.interface';\nimport {JalaliDateValidatorService} from './jalali-date-validator.service';\n\n/**\n * This class converts Jalali date to Georgian and vase versa. You can use all of the methods as static methods.\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateCalculatorService {\n\n  constructor(public validator: JalaliDateValidatorService) {}\n\n  /**\n   * Calculates the Julian Day number from Gregorian or Julian calendar dates.\n   *\n   * Only some code cleaning applied to the source code.\n   *\n   * The procedure was tested to be good since 1 March, -100100 (of both calendars) up to a few million years into the future.\n   *\n   * @param gDate an instance of javascript date representing a Georgian date.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L195}\n\n   */\n  numberOfPassedGDays(gDate: Date): number {\n    const gMonth = gDate.getMonth() - 7;\n    const gYear = gDate.getFullYear() + 100100;\n    const gMonthDiv = div(gMonth, 6);\n    const result = div((gYear + gMonthDiv) * 1461, 4) + div(153 * mod(gMonth + 17, 12) + 2, 5) + gDate.getDate() - 34840408;\n    return result - div(div(gYear + gMonthDiv, 100) * 3, 4) + 752;\n  }\n\n  /**\n   * Returns number of passed days from source day in jalali calendar to the given jalali date.\n   * @param jYear full jalali year like 1397\n   * @param jMonth starts from zero\n   * @param jDay day number starts from one\n   */\n  numberOfPassedJDays(jYear: number, jMonth: number, jDay: number): number {\n    return this.numberOfPassedGDays(new Date(this.jalaliYearToGeorgianYear(jYear), 2, this.firstDayOfJYearInMarch(jYear))) +\n      jMonth * 31 - div(jMonth + 1, 7) * (jMonth - 6) + jDay - 1;\n  }\n\n  /**\n   * Creates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L213}\n   */\n  createGDateFromDays(numOfDays: number): Date {\n    const j = (4 * numOfDays + 139361631) + div(div(4 * numOfDays + 183187720, 146097) * 3, 4) * 4 - 3908;\n    const i = div(mod(j, 1461), 4) * 5 + 308;\n    const gDay = div(mod(i, 153), 5) + 1;\n    const gMonth = mod(div(i, 153), 12);\n    const gYear = div(j, 1461) - 100100 + div(7 - gMonth, 6);\n    return new Date(gYear, gMonth, gDay);\n  }\n\n  /**\n   * This function returns number of passed leap years from AD 621 until targetGYear.\n   * @param targetGYear is full year number like 2018\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L110}\n   */\n  numOfGLeapYears(targetGYear: number): number {\n    return div(targetGYear, 4) - div((div(targetGYear, 100) + 1) * 3, 4) - 150;\n  }\n\n  /**\n   * first day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of new jalali year in March.\n   * The day number starts from 1 not zero and is equal to the real numbers in the calendar.\n   * @param jYear full jalali year like 1397\n   */\n  firstDayOfJYearInMarch(jYear): number {\n    const gYear = jYear + 621;\n    return this.validator.numOfJLeapYears(jYear) - this.numOfGLeapYears(gYear) + 20;\n  }\n\n  /**\n   * Converts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year\n   * that starts in the winter of jalali year.\n   * @param jYear full jalali year like 1397\n   */\n  jalaliYearToGeorgianYear(jYear: number): number {\n    return jYear + 621;\n  }\n\n  /**\n   * Converts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\n   * @param gYear full georgian year like 2018\n   */\n  georgianYearToJalaliYear(gYear: number): number {\n    return gYear - 621;\n  }\n\n  /**\n   * this method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\n   *\n   * ATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\n   * @param gDate Georgian date as a javascript Date object.\n   *\n   * [Implementation in source code]{@link https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L149}\n   */\n  convertToJalali(gDate: Date): SimpleDateInterface {\n    const georgianYear = gDate.getFullYear();\n    let jalaliYear = this.georgianYearToJalaliYear(georgianYear);\n    const passedDays = this.numberOfPassedGDays(gDate);\n    const numOfPassedDaysTo1Farvardin = this.numberOfPassedGDays(new Date(georgianYear, 2, this.firstDayOfJYearInMarch(jalaliYear)));\n\n    let jalaliDay: number;\n    let jalaliMonth: number;\n\n    // Find number of days that passed since 1 Farvardin.\n    let numOfDayInJYear = passedDays - numOfPassedDaysTo1Farvardin;\n    if (numOfDayInJYear >= 0) {\n      if (numOfDayInJYear \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JalaliDateValidatorService.html":{"url":"injectables/JalaliDateValidatorService.html","title":"injectable - JalaliDateValidatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JalaliDateValidatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts\n        \n\n            \n                Description\n            \n            \n                Methods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for\nvalidating Jalali dates without needing to convert them to the Georgian Date.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _maxAcceptableYear\n                            \n                            \n                                    Private\n                                    Static\n                                _minAcceptableYear\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isJYearLeap\n                            \n                            \n                                isValidJDate\n                            \n                            \n                                isValidJDay\n                            \n                            \n                                isValidJMonth\n                            \n                            \n                                isValidJYear\n                            \n                            \n                                jMonthLength\n                            \n                            \n                                numOfJLeapYears\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isJYearLeap\n                        \n                        \n                    \n                \n            \n            \n                \nisJYearLeap(jYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:81\n                \n            \n\n\n            \n                \n                    If JYear is a leap year in jalali Calendar, return true. We using the fact that if a year is leap, number of leap years until that year\nand the year after it is not equal.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like: 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJDate\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJDate(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:125\n                \n            \n\n\n            \n                \n                    If Jalali date is not a valid Jalali date, return false. otherwise returns true.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full year number like: 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from one\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJDay\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJDay(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:115\n                \n            \n\n\n            \n                \n                    Checks if day number is in valid range according to the given year and month.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        month number starting from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        day number starting from one\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJMonth\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJMonth(jMonth: number, startFromZero: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:99\n                \n            \n\n\n            \n                \n                    Checks if jalali month is in valid range or not. In default, jMonth should start from zero.\nIf you want to start month number from one instead of zero, you should make startFromZero parameter to false.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startFromZero\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJYear\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJYear(jYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:91\n                \n            \n\n\n            \n                \n                    Checks if jalali year is in acceptable range or not.\nImplementation in source code\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            jMonthLength\n                        \n                        \n                    \n                \n            \n            \n                \njMonthLength(jYear: number, jMonth: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:25\n                \n            \n\n\n            \n                \n                    Returns number of days in a given month counting from 1.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number of month from 0 for Farvardin to 11 for Esfand.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numOfJLeapYears\n                        \n                        \n                    \n                \n            \n            \n                \nnumOfJLeapYears(targetJYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:38\n                \n            \n\n\n            \n                \n                    Calculates the number of the leap years in jalali Calendar.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetJYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        should be full year like: 1397 and should be between -61 to 3177.\n[Implementation in source code]{\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _maxAcceptableYear\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3177\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _minAcceptableYear\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -61\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\n\n\n/**\n * Methods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for\n * validating Jalali dates without needing to convert them to the Georgian Date.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateValidatorService {\n\n  private static _minAcceptableYear = -61;\n  private static _maxAcceptableYear = 3177;\n\n  constructor() { }\n\n  /**\n   * Returns number of days in a given month counting from 1.\n   * @param jYear full jalali year like 1397\n   * @param jMonth number of month from 0 for Farvardin to 11 for Esfand.\n   */\n  jMonthLength(jYear: number, jMonth: number): number {\n    if (jMonth = JalaliDateValidatorService._minAcceptableYear && jYear = minMonthNumber && jMonth  0;\n  }\n\n  /**\n   * If Jalali date is not a valid Jalali date, return false. otherwise returns true.\n   * @param jYear full year number like: 1397\n   * @param jMonth starts from zero\n   * @param jDay starts from one\n   */\n  isValidJDate(jYear: number, jMonth: number, jDay: number): boolean {\n    return this.isValidJYear(jYear) && this.isValidJMonth(jMonth) && this.isValidJDay(jYear, jMonth, jDay);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/JdatePipe.html":{"url":"pipes/JdatePipe.html","title":"pipe - JdatePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  JdatePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/jdate.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Formats JDate objects according to the given format.\nThe result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection\ncycle, treat the date as an immutable object and change the reference when the pipe needs to run again.\nYou can pass a format pattern string like JDate format method\nAlso you can use pre-defined format names described below:\n    'short': equivalent to yy/m/d h:M t {@example '97/2/23 12:12 ب.ظ'}\n\n    'shortDate': same as short\n\n    'medium': equivalent to 'd mmm yyyy، h:M t' {@example '23 اردیبهشت 1397، 12:12 ب.ظ'}\n\n    'mediumDate': same as medium\n\n    'long': equivalent to 'd mmm yyyy، h:M:S T' {@example '23 اردیبهشت 1397، 12:12:30 بعد از ظهر'}\n\n    'longDate': same as long\n\n    'shortTime': equivalent to 'h:M t' {@example '12:12 ب.ظ'}\n\n    'mediumTime': equivalent to 'h:M:S t' {@example '12:12:30 ب.ظ'}\n\n    'longTime': equivalent to 'h:M:S.l T' {@example '12:12:30.300 بعد از ظهر'}  Default format is medium.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        jdate\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            convertNameToFormat\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    convertNameToFormat(formatName: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/jdate.pipe.ts:60\n                \n            \n\n\n            \n                \n                    Checks if formatName is in the FromatNames enum. If it is, returns related format string. Else returns formatName string\nwithout any change.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    formatName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        format name or format pattern string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        formatting pattern string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: JDate, format: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/jdate.pipe.ts:72\n                \n            \n\n\n            \n                \n                    Formatting the date using format method of it with proper formatting pattern created from format\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                JDate\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        a Jalali Date object\n\n                                    \n                                \n                                \n                                    format\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'mediumDate'\n                                    \n\n                                    \n                                        format name or format pattern string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\nimport {JDate} from '../JDate/jdate';\n\n/**\n * Pre-defined formats date formats those can use for formatting JDate objects with jdate pipe.\n */\nenum FromatNames {\n  'short' = 'yy/m/d h:M t',\n  'shortDate' = 'yy/m/d h:M t',\n  'medium' = 'd mmm yyyy، h:M t',\n  'mediumDate' = 'd mmm yyyy، h:M t',\n  'long' = 'd mmm yyyy، h:M:S T',\n  'longDate' = 'd mmm yyyy، h:M:S T',\n  'shortTime' = 'h:M t',\n  'mediumTime' = 'h:M:S t',\n  'longTime' = 'h:M:S.l T',\n}\n\n/**\n * Formats JDate objects according to the given format.\n *\n * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to reformat the date on every change-detection\n * cycle, treat the date as an immutable object and change the reference when the pipe needs to run again.\n *\n * You can pass a format pattern string like [JDate format method]{@link https://alihoseiny.github.io/ngx-persian/classes/JDate.html#format}\n *\n * Also you can use pre-defined format names described below:\n *\n *        'short': equivalent to yy/m/d h:M t {@example '97/2/23 12:12 ب.ظ'}\n *\n *        'shortDate': same as short\n *\n *        'medium': equivalent to 'd mmm yyyy، h:M t' {@example '23 اردیبهشت 1397، 12:12 ب.ظ'}\n *\n *        'mediumDate': same as medium\n *\n *        'long': equivalent to 'd mmm yyyy، h:M:S T' {@example '23 اردیبهشت 1397، 12:12:30 بعد از ظهر'}\n *\n *        'longDate': same as long\n *\n *        'shortTime': equivalent to 'h:M t' {@example '12:12 ب.ظ'}\n *\n *        'mediumTime': equivalent to 'h:M:S t' {@example '12:12:30 ب.ظ'}\n *\n *        'longTime': equivalent to 'h:M:S.l T' {@example '12:12:30.300 بعد از ظهر'}\n *\n *  Default format is `medium`.\n */\n@Pipe({\n  name: 'jdate'\n})\nexport class JdatePipe implements PipeTransform {\n\n  /**\n   * Checks if `formatName` is in the `FromatNames` enum. If it is, returns related format string. Else returns `formatName` string\n   * without any change.\n   * @param formatName format name or format pattern string\n   * @return formatting pattern string\n   */\n  private static convertNameToFormat(formatName: string): string {\n    if (!FromatNames[formatName]) {\n      return formatName\n    }\n    return FromatNames[formatName];\n  }\n\n  /**\n   * Formatting the date using `format` method of it with proper formatting pattern created from `format`\n   * @param value a Jalali Date object\n   * @param format format name or format pattern string\n   */\n  transform(value: JDate, format: string = 'mediumDate'): string {\n    return value.format(JdatePipe.convertNameToFormat(format));\n  }\n\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MobilePhoneNumberService.html":{"url":"injectables/MobilePhoneNumberService.html","title":"injectable - MobilePhoneNumberService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MobilePhoneNumberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n        \n\n            \n                Description\n            \n            \n                This service using for validating phone numbers sold by Iranian Mobile operators.\nYou can get operator name and validation result of a phone number by methods of this service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPhoneNumberOperator\n                            \n                            \n                                isPhoneNumberPatternValid\n                            \n                            \n                                isValidPhoneNumber\n                            \n                            \n                                normalizePhoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPhoneNumberOperator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPhoneNumberOperator(phoneNumber: string, nameInEnglish: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:83\n                \n            \n\n\n            \n                \n                    Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from\noperatorsNames enum.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                                \n                                    nameInEnglish\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        if true, operator name will return in English. if false operator name will return in persian\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        operator name in english or persian according to the nameInEnglish parameter\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPhoneNumberPatternValid\n                        \n                        \n                    \n                \n            \n            \n                \nisPhoneNumberPatternValid(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:59\n                \n            \n\n\n            \n                \n                    This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.\nThis method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and\nin reality are not a valid phone number.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidPhoneNumber\n                        \n                        \n                    \n                \n            \n            \n                \nisValidPhoneNumber(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            normalizePhoneNumber\n                        \n                        \n                    \n                \n            \n            \n                \nnormalizePhoneNumber(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:68\n                \n            \n\n\n            \n                \n                    Removes +98 from the phoneNumber and replaces it with a 0 character.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {InvalidMobilePhoneNumberError} from './InvalidMobilePhoneNumber.error';\nimport {InvalidMobileOperatorError} from './InvalidMobileOperator.error';\n\n/**\n * English name of mobile operators are enum keys and persian name of them are values.\n * All characters of all of the keys are in lowercase\n */\nexport enum operatorsNames {\n  irancell = 'ایرانسل',\n  mci = 'همراه اول',\n  talia = 'تالیا',\n  rightel = 'رایتل',\n  spadan = 'اسپادان',\n  tkc = 'شبکه مستقل تلفن همراه کیش',\n  shatel = 'شاتل',\n  aptel = 'آپتل',\n  azartel = 'آذرتل',\n  samantel = 'سامانتل',\n  lotustel = 'لوتوس‌تل',\n  anarestan = 'انارستان'\n}\n\n/**\n * A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.\n */\nexport const MobileCodes = {\n  irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],\n  mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],\n  talia: ['0932'],\n  rightel: ['0920', '0921', '0922'],\n  spadan: ['0931'],\n  tkc: ['0934'],\n  shatel: ['099810', '099811', '099812'],\n  aptel: ['099910', '099911', '099913'],\n  azartel: ['099914'],\n  samantel: ['099996', '099997', '099998', '099999'],\n  lotustel: ['09990'],\n  anarestan: ['09944']\n};\n\n/**\n * This service using for validating phone numbers sold by Iranian Mobile operators.\n *\n * You can get operator name and validation result of a phone number by methods of this service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MobilePhoneNumberService {\n\n  /**\n   * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.\n   * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and\n   * in reality are not a valid phone number.\n   * @link isValidPhoneNumber\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  isPhoneNumberPatternValid(phoneNumber: string): boolean {\n    const generalRegex = new RegExp(/^((\\+98|0)9\\d{9})$/);\n    return generalRegex.test(phoneNumber);\n  }\n\n  /**\n   * Removes +98 from the phoneNumber and replaces it with a 0 character.\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  normalizePhoneNumber(phoneNumber: string): string {\n    return phoneNumber.replace('+98', '0');\n  }\n\n  /**\n   * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from\n   * operatorsNames enum.\n   * @return operator name in english or persian according to the nameInEnglish parameter\n   * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid.\n   * @throws InvalidMobilePhoneNumberError If pattern is not correct\n   * @param phoneNumber Digits in this string should be english digits.\n   * @param nameInEnglish if true, operator name will return in English. if false operator name will return in persian\n   * @link MobileCodes\n   * @link operatorsNames\n   */\n  getPhoneNumberOperator(phoneNumber: string, nameInEnglish: boolean = false): string {\n    if (!this.isPhoneNumberPatternValid(phoneNumber)) { throw new InvalidMobilePhoneNumberError(); }\n    phoneNumber = this.normalizePhoneNumber(phoneNumber);\n    for (const operator of Object.keys(MobileCodes)) {\n      for (const code of MobileCodes[operator]) {\n        if (phoneNumber.indexOf(code) === 0) {\n          return nameInEnglish ? operator : operatorsNames[operator];\n        }\n      }\n    }\n    throw new InvalidMobileOperatorError();\n  }\n\n  /**\n   * @return If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.\n   * @param phoneNumber Digits in this string should be english digits.\n   * @link getPhoneNumberOperator\n   */\n  isValidPhoneNumber(phoneNumber: string): boolean {\n    try {\n      this.getPhoneNumberOperator(phoneNumber);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NationalCodePipe.html":{"url":"pipes/NationalCodePipe.html","title":"pipe - NationalCodePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NationalCodePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/nationalCode.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Formats a 10-digit number or string to national code format.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        nationalCode\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/nationalCode.pipe.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a 10-digit number or a string only contains 10 digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            001-236547-5\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a formatted text from 10-digit input or an empty string if length of the input is not 10.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Formats a 10-digit number or string to national code format.\n */\n@Pipe({name: 'nationalCode'})\nexport class NationalCodePipe implements PipeTransform {\n\n  /**\n   * @param value a 10-digit number or a string only contains 10 digits.\n   * @example 001-236547-5\n   * @return a formatted text from 10-digit input or an empty string if length of the input is not 10.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    if (value.length !== 10) { return ''; }\n    return `${value.substring(0, 3)}-${value.substring(3, 9)}-${value[9]}`;\n  }\n}\n\n    \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NationalCodeService.html":{"url":"injectables/NationalCodeService.html","title":"injectable - NationalCodeService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NationalCodeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/national-code.service.ts\n        \n\n            \n                Description\n            \n            \n                For validating Iranian National code (number), you can use this service in your components or every other places using DI or not.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _is_repetitive\n                            \n                            \n                                isValid\n                            \n                            \n                                normalize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _is_repetitive\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _is_repetitive(input: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/national-code.service.ts:18\n                \n            \n\n\n            \n                \n                    We are using for loop instead of match or split because it has better performance according to this link\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    input\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if all characters of the input are equal and input length is greater than 1. Otherwise returns false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValid\n                        \n                        \n                    \n                \n            \n            \n                \nisValid(nationalCode: number | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/national-code.service.ts:53\n                \n            \n\n\n            \n                \n                    This method first normalizes the input using normalize method and implicitly checks input length, So you DO NOT NEED to\nnormalize input before, but this will not make any bad effect.\nThen checking validation of the input using algorithm described in this link\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nationalCode\n                                    \n                                            number | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            normalize\n                        \n                        \n                    \n                \n            \n            \n                \nnormalize(nationalCode: number | string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/national-code.service.ts:37\n                \n            \n\n\n            \n                \n                    This method adds zero character at the beginning of the input until the length of the result reach to 10.\nThis method removes spaces from right and left sides of the input.\nATTENTION: This method doesn't any validation about correctness of the input if it has correct length (between 8 and 10).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    nationalCode\n                                    \n                                            number | string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a number with at most 10 digits or a string with at most 10 character.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a string with length equal to 10.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {InvalidNationalCodeError} from './InvalidNationalCode.error';\n\n/**\n * For validating Iranian National code (number), you can use this service in your components or every other places using DI or not.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NationalCodeService {\n\n  /**\n   *\n   * [We are using for loop instead of match or split because it has better performance according to this link]{@link https://stackoverflow.com/a/46312614/5400597}\n   * @return true if all characters of the `input` are equal and input length is greater than 1. Otherwise returns false.\n   * @param input\n   */\n  private _is_repetitive(input: string): boolean {\n    if (input.length  10 || nationalCodeLength  1) {\n      desiredControlNum = 11 - reminder;\n    }\n    return desiredControlNum === controlNum;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxPersianModule.html":{"url":"modules/NgxPersianModule.html","title":"module - NgxPersianModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxPersianModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxPersianModule\n\n\n\ncluster_NgxPersianModule_declarations\n\n\n\ncluster_NgxPersianModule_exports\n\n\n\n\nEnNumPipe\n\nEnNumPipe\n\n\n\nNgxPersianModule\n\nNgxPersianModule\n\nNgxPersianModule -->\n\nEnNumPipe->NgxPersianModule\n\n\n\n\n\nFaNumPipe\n\nFaNumPipe\n\nNgxPersianModule -->\n\nFaNumPipe->NgxPersianModule\n\n\n\n\n\nIRCurrencyPipe\n\nIRCurrencyPipe\n\nNgxPersianModule -->\n\nIRCurrencyPipe->NgxPersianModule\n\n\n\n\n\nJdatePipe\n\nJdatePipe\n\nNgxPersianModule -->\n\nJdatePipe->NgxPersianModule\n\n\n\n\n\nNationalCodePipe\n\nNationalCodePipe\n\nNgxPersianModule -->\n\nNationalCodePipe->NgxPersianModule\n\n\n\n\n\nPersianLetterDirective\n\nPersianLetterDirective\n\nNgxPersianModule -->\n\nPersianLetterDirective->NgxPersianModule\n\n\n\n\n\nPersianNumbersDirective\n\nPersianNumbersDirective\n\nNgxPersianModule -->\n\nPersianNumbersDirective->NgxPersianModule\n\n\n\n\n\nEnNumPipe \n\nEnNumPipe \n\nEnNumPipe  -->\n\nNgxPersianModule->EnNumPipe \n\n\n\n\n\nFaNumPipe \n\nFaNumPipe \n\nFaNumPipe  -->\n\nNgxPersianModule->FaNumPipe \n\n\n\n\n\nIRCurrencyPipe \n\nIRCurrencyPipe \n\nIRCurrencyPipe  -->\n\nNgxPersianModule->IRCurrencyPipe \n\n\n\n\n\nJdatePipe \n\nJdatePipe \n\nJdatePipe  -->\n\nNgxPersianModule->JdatePipe \n\n\n\n\n\nNationalCodePipe \n\nNationalCodePipe \n\nNationalCodePipe  -->\n\nNgxPersianModule->NationalCodePipe \n\n\n\n\n\nPersianLetterDirective \n\nPersianLetterDirective \n\nPersianLetterDirective  -->\n\nNgxPersianModule->PersianLetterDirective \n\n\n\n\n\nPersianNumbersDirective \n\nPersianNumbersDirective \n\nPersianNumbersDirective  -->\n\nNgxPersianModule->PersianNumbersDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/ngx-persian.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            EnNumPipe\n                        \n                        \n                            FaNumPipe\n                        \n                        \n                            IRCurrencyPipe\n                        \n                        \n                            JdatePipe\n                        \n                        \n                            NationalCodePipe\n                        \n                        \n                            PersianLetterDirective\n                        \n                        \n                            PersianNumbersDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EnNumPipe\n                        \n                        \n                            FaNumPipe\n                        \n                        \n                            IRCurrencyPipe\n                        \n                        \n                            JdatePipe\n                        \n                        \n                            NationalCodePipe\n                        \n                        \n                            PersianLetterDirective\n                        \n                        \n                            PersianNumbersDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport {PersianLetterDirective, PersianNumbersDirective} from './Validators/persian-directives';\nimport {FaNumPipe} from './Pipes/faNum.pipe';\nimport {EnNumPipe} from './Pipes/enNum.pipe';\nimport {IRCurrencyPipe} from './Pipes/IRCurrency.pipe';\nimport {NationalCodePipe} from './Pipes/nationalCode.pipe';\nimport {JdatePipe} from './Pipes/jdate.pipe';\n@NgModule({\n  declarations: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe, JdatePipe],\n  imports: [],\n  exports: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe, JdatePipe]\n})\nexport class NgxPersianModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PLOptions.html":{"url":"interfaces/PLOptions.html","title":"interface - PLOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PLOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n        \n\n            \n                Description\n            \n            \n                isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enDigits\n                                \n                                \n                                            Optional\n                                        persianDigits\n                                \n                                \n                                            Optional\n                                        symbols\n                                \n                                \n                                            Optional\n                                        whitespaces\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enDigits\n                                    \n                                \n                                \n                                    \n                                        enDigits:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        persianDigits\n                                    \n                                \n                                \n                                    \n                                        persianDigits:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbols\n                                    \n                                \n                                \n                                    \n                                        symbols:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        whitespaces\n                                    \n                                \n                                \n                                    \n                                        whitespaces:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {PersianNumberService} from './persian-number.service';\n\n/**\n * isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n */\nexport interface PLOptions {\n  persianDigits?: boolean;\n  enDigits?: boolean;\n  symbols?: boolean;\n  whitespaces?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service brings validation of persian texts to the program and let you convert some not-persian letters with persian ones.\n *\n */\nexport class PersianLetterService implements PersianService {\n\n  static PERSIAN_LETTERS_PATTERN = '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654';\n  private static SYMBOLS_PATTERN = '؟$-/:-?،{-~!\"^_`\\\\[\\\\]';\n  static WHITESPACES_PATTERN = '\\\\s';\n\n  /**\n   * According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\n   * elements those specified in the options object plus persian letters.\n   * @return a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n   * @param options\n   */\n  private static _stringValidationRegex(options: PLOptions): RegExp {\n    let result = '';\n    if (options.enDigits) { result += '0-9'; }\n    if (options.symbols) { result += PersianLetterService.SYMBOLS_PATTERN; }\n    if (options.whitespaces) { result += PersianLetterService.WHITESPACES_PATTERN; }\n    if (options.persianDigits) { result += PersianNumberService.persianNumberPattern; }\n    // language=JSRegexp\n    return new RegExp(`[${result + PersianLetterService.PERSIAN_LETTERS_PATTERN}]`, 'g');\n  }\n\n  /**\n   * This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\n   *\n   * If match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\n   * occurred in the input value.\n   * @param value\n   * @param options\n   * @return a number greater equal to 0 representing number of matches occurred in the input value.\n   */\n  private static _getMatchedPatternLength(value: string, options: PLOptions): number {\n    const matchResult = value.match(PersianLetterService._stringValidationRegex(options));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n   * @param value\n   */\n  containsPersian(value: string): boolean {\n    if (value === undefined || value === null) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianLetterService.PERSIAN_LETTERS_PATTERN}]`);\n    return value.trim() ? persianRegex.test(value) : true;\n  }\n\n  /**\n   * Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\n   * Result of validation on existence  of other characters controls by options parameter.\n   * @param value\n   * @param options controlling validation result on existence  of other characters controls by options parameter. Fields:\n   *\n   *        persianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters.\n   *\n   *\n   *        enDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\n   *\n   *\n   *        symbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\n   *                 symbols list: ?$-/:؟!~\"'^_-[]{}()%&*>\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/PersianLetterDirective.html":{"url":"directives/PersianLetterDirective.html","title":"directive - PersianLetterDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  PersianLetterDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Validators/persian-directives.ts\n        \n\n            \n                Description\n            \n            \n                You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\nFor setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\nFor more information also see persianLettersValidator\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: PersianLetterDirective }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        persianLettersValidator\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                PersianLetterDirective\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        PersianLetterDirective\n                    \n                \n                \n                    \n                        Type :         PLOptions\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Validators/persian-directives.ts:39\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Validators/persian-directives.ts:46\n                \n            \n\n\n            \n                \n                    Only a wrapper for persianLettersValidator validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type | null\n\n                    \n                    \n                        null for success or ValidationError for invalid inputs\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport {persianLettersValidator, persianNumbersValidator} from './persian-validators';\nimport {PLOptions} from '../Services/persian-letter.service';\n\n\n/**\n * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n *\n * [For more information also see persianNumbersValidator]{@link persianNumbersValidator}\n */\n@Directive({\n  selector: 'PersianNumbersDirective',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianNumbersDirective}]\n})\nexport class PersianNumbersDirective implements Validator {\n\n  /**\n   * Only a wrapper for persianNumbersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianNumbersValidator()(control);\n  }\n}\n\n/**\n * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\n * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n * [For more information also see persianLettersValidator]{@link persianLettersValidator}\n */\n@Directive({\n  selector: 'persianLettersValidator',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianLetterDirective}]\n})\nexport class PersianLetterDirective implements Validator {\n\n  @Input('PersianLetterDirective') options: PLOptions;\n\n  /**\n   * Only a wrapper for persianLettersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianLettersValidator(this.options)(control);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersianLetterService.html":{"url":"injectables/PersianLetterService.html","title":"injectable - PersianLetterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersianLetterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                PERSIAN_LETTERS_PATTERN\n                            \n                            \n                                    Private\n                                    Static\n                                SYMBOLS_PATTERN\n                            \n                            \n                                    Static\n                                WHITESPACES_PATTERN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _getMatchedPatternLength\n                            \n                            \n                                    Private\n                                    Static\n                                _stringValidationRegex\n                            \n                            \n                                containsPersian\n                            \n                            \n                                isPersian\n                            \n                            \n                                toPersian\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _getMatchedPatternLength\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getMatchedPatternLength(value: string, options: PLOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:54\n                \n            \n\n\n            \n                \n                    This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\nIf match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\noccurred in the input value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                PLOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        a number greater equal to 0 representing number of matches occurred in the input value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _stringValidationRegex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _stringValidationRegex(options: PLOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:35\n                \n            \n\n\n            \n                \n                    According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\nelements those specified in the options object plus persian letters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                PLOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     RegExp\n\n                    \n                    \n                        a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            containsPersian\n                        \n                        \n                    \n                \n            \n            \n                \ncontainsPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:63\n                \n            \n\n\n            \n                \n                    If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPersian\n                        \n                        \n                    \n                \n            \n            \n                \nisPersian(value: string, options: PLOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:91\n                \n            \n\n\n            \n                \n                    Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\nResult of validation on existence  of other characters controls by options parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                                PLOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {\n                                                  persianDigits: false,\n                                                  enDigits: false,\n                                                  symbols: true,\n                                                  whitespaces: true}\n                                    \n\n                                    \n                                        controlling validation result on existence  of other characters controls by options parameter. Fields:\npersianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters.\nenDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\nsymbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\nsymbols list: ?$-/:؟!~\"'^_-[]{}()%&*>\nwhitespaces: if sets to true, validation result will be true if input value contains white spaces plus persian letters\nYou can combine any number of options field together.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toPersian\n                        \n                        \n                    \n                \n            \n            \n                \ntoPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:104\n                \n            \n\n\n            \n                \n                    Converts arabic letters: ي and ك to persian corresponding letters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            PERSIAN_LETTERS_PATTERN\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            SYMBOLS_PATTERN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '؟$-/:-?،{-~!\"^_`\\\\[\\\\]'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            WHITESPACES_PATTERN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '\\\\s'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {PersianNumberService} from './persian-number.service';\n\n/**\n * isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n */\nexport interface PLOptions {\n  persianDigits?: boolean;\n  enDigits?: boolean;\n  symbols?: boolean;\n  whitespaces?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service brings validation of persian texts to the program and let you convert some not-persian letters with persian ones.\n *\n */\nexport class PersianLetterService implements PersianService {\n\n  static PERSIAN_LETTERS_PATTERN = '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654';\n  private static SYMBOLS_PATTERN = '؟$-/:-?،{-~!\"^_`\\\\[\\\\]';\n  static WHITESPACES_PATTERN = '\\\\s';\n\n  /**\n   * According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\n   * elements those specified in the options object plus persian letters.\n   * @return a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n   * @param options\n   */\n  private static _stringValidationRegex(options: PLOptions): RegExp {\n    let result = '';\n    if (options.enDigits) { result += '0-9'; }\n    if (options.symbols) { result += PersianLetterService.SYMBOLS_PATTERN; }\n    if (options.whitespaces) { result += PersianLetterService.WHITESPACES_PATTERN; }\n    if (options.persianDigits) { result += PersianNumberService.persianNumberPattern; }\n    // language=JSRegexp\n    return new RegExp(`[${result + PersianLetterService.PERSIAN_LETTERS_PATTERN}]`, 'g');\n  }\n\n  /**\n   * This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\n   *\n   * If match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\n   * occurred in the input value.\n   * @param value\n   * @param options\n   * @return a number greater equal to 0 representing number of matches occurred in the input value.\n   */\n  private static _getMatchedPatternLength(value: string, options: PLOptions): number {\n    const matchResult = value.match(PersianLetterService._stringValidationRegex(options));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n   * @param value\n   */\n  containsPersian(value: string): boolean {\n    if (value === undefined || value === null) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianLetterService.PERSIAN_LETTERS_PATTERN}]`);\n    return value.trim() ? persianRegex.test(value) : true;\n  }\n\n  /**\n   * Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\n   * Result of validation on existence  of other characters controls by options parameter.\n   * @param value\n   * @param options controlling validation result on existence  of other characters controls by options parameter. Fields:\n   *\n   *        persianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters.\n   *\n   *\n   *        enDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\n   *\n   *\n   *        symbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\n   *                 symbols list: ?$-/:؟!~\"'^_-[]{}()%&*>\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersianNumberService.html":{"url":"injectables/PersianNumberService.html","title":"injectable - PersianNumberService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersianNumberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-number.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                englishNumbersTable\n                            \n                            \n                                    Static\n                                persianNumberPattern\n                            \n                            \n                                    Private\n                                    Static\n                                persianNumbersTable\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _getMatchedPatternLength\n                            \n                            \n                                arabicToPersian\n                            \n                            \n                                containsPersian\n                            \n                            \n                                isPersian\n                            \n                            \n                                toEnglish\n                            \n                            \n                                toPersian\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _getMatchedPatternLength\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getMatchedPatternLength(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:30\n                \n            \n\n\n            \n                \n                    splits input value by persian letters and then returns length of matched array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        0 if input value has no persian letter, numbers of persian letters in the input value otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            arabicToPersian\n                        \n                        \n                    \n                \n            \n            \n                \narabicToPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:49\n                \n            \n\n\n            \n                \n                    Converts arabic numbers to the persian ones.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            containsPersian\n                        \n                        \n                    \n                \n            \n            \n                \ncontainsPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:18\n                \n            \n\n\n            \n                \n                    Checks if input value contains any persian number or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if input value contains any persian number. false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPersian\n                        \n                        \n                    \n                \n            \n            \n                \nisPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:40\n                \n            \n\n\n            \n                \n                    Checks if input value contains only persian letters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toEnglish\n                        \n                        \n                    \n                \n            \n            \n                \ntoEnglish(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:76\n                \n            \n\n\n            \n                \n                    Convert persian numbers in input value to the english numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toPersian\n                        \n                        \n                    \n                \n            \n            \n                \ntoPersian(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:59\n                \n            \n\n\n            \n                \n                    Converts all arabic and english numbers to the persian numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            englishNumbersTable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            persianNumberPattern\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '\\u06F0-\\u06F9'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            persianNumbersTable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9']\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {InvalidServiceInputError} from './InvalidServiceInput.error';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersianNumberService implements PersianService {\n  static persianNumberPattern = '\\u06F0-\\u06F9';\n  private static persianNumbersTable = ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9'];\n  private static englishNumbersTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n  /**\n   * Checks if input value contains any persian number or not.\n   * @param value\n   * @return true if input value contains any persian number. false otherwise.\n   */\n  containsPersian(value: string): boolean {\n    if (!value) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianNumberService.persianNumberPattern}]`);\n    return persianRegex.test(value);\n  }\n\n  /**\n   * splits input value by persian letters and then returns length of matched array.\n   * @param value\n   * @return 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.\n   */\n  private static _getMatchedPatternLength(value: string): number {\n    // language=JSRegexp\n    const matchResult = value.match(new RegExp(`[${PersianNumberService.persianNumberPattern}]`, 'g'));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * Checks if input value contains only persian letters.\n   * @param value\n   */\n  isPersian(value: string): boolean {\n    if (!value) {return false; }\n    return value.length === PersianNumberService._getMatchedPatternLength(value);\n  }\n\n  /**\n   * Converts arabic numbers to the persian ones.\n   * @param value\n   */\n  arabicToPersian(value: string): string {\n    return value.replace(/٤/g, PersianNumberService.persianNumbersTable[4])\n                .replace(/٥/g, PersianNumberService.persianNumbersTable[5])\n                .replace(/٦/g, PersianNumberService.persianNumbersTable[6]);\n  }\n\n  /**\n   * Converts all arabic and english numbers to the persian numbers.\n   * @param value\n   */\n  toPersian(value: string | number): string {\n    if (value === undefined || value === null) {throw new InvalidServiceInputError(); }\n    value = value.toString();\n    value = this.arabicToPersian(value);\n    let regex: RegExp;\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/PersianNumbersDirective.html":{"url":"directives/PersianNumbersDirective.html","title":"directive - PersianNumbersDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  PersianNumbersDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Validators/persian-directives.ts\n        \n\n            \n                Description\n            \n            \n                You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\nFor more information also see persianNumbersValidator\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: PersianNumbersDirective }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        PersianNumbersDirective\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Validators/persian-directives.ts:23\n                \n            \n\n\n            \n                \n                    Only a wrapper for persianNumbersValidator validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type | null\n\n                    \n                    \n                        null for success or ValidationError for invalid inputs\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport {persianLettersValidator, persianNumbersValidator} from './persian-validators';\nimport {PLOptions} from '../Services/persian-letter.service';\n\n\n/**\n * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n *\n * [For more information also see persianNumbersValidator]{@link persianNumbersValidator}\n */\n@Directive({\n  selector: 'PersianNumbersDirective',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianNumbersDirective}]\n})\nexport class PersianNumbersDirective implements Validator {\n\n  /**\n   * Only a wrapper for persianNumbersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianNumbersValidator()(control);\n  }\n}\n\n/**\n * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\n * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n * [For more information also see persianLettersValidator]{@link persianLettersValidator}\n */\n@Directive({\n  selector: 'persianLettersValidator',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianLetterDirective}]\n})\nexport class PersianLetterDirective implements Validator {\n\n  @Input('PersianLetterDirective') options: PLOptions;\n\n  /**\n   * Only a wrapper for persianLettersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianLettersValidator(this.options)(control);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PersianService.html":{"url":"interfaces/PersianService.html","title":"interface - PersianService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PersianService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-service.ts\n        \n\n            \n                Description\n            \n            \n                All services those want to serve conversion to persian language should implement this interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    containsPersian\n                                \n                                \n                                    isPersian\n                                \n                                \n                                    toPersian\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            containsPersian\n                        \n                        \n                    \n                \n            \n            \n                \ncontainsPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPersian\n                        \n                        \n                    \n                \n            \n            \n                \nisPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toPersian\n                        \n                        \n                    \n                \n            \n            \n                \ntoPersian(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface PersianService {\n\n  isPersian(value: string): boolean;\n\n  toPersian(value: string | number): string;\n\n  containsPersian(value: string): boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleDateInterface.html":{"url":"interfaces/SimpleDateInterface.html","title":"interface - SimpleDateInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SimpleDateInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/SimpleDate.interface.ts\n        \n\n            \n                Description\n            \n            \n                A simple interface for grouping three important numbers of a date together: Year, month and day.\nNumbers could be in any calendar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        day\n                                \n                                \n                                        month\n                                \n                                \n                                        year\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        day\n                                    \n                                \n                                \n                                    \n                                        day:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        month\n                                    \n                                \n                                \n                                    \n                                        month:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        year\n                                    \n                                \n                                \n                                    \n                                        year:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SimpleDateInterface {\n  year: number;\n  month: number;\n  day: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nFirst of all, I am so happy to see this work seemed useful to you. Also THANK YOU for your help.\nThere are many ways you can help this project and all Iranian and Persian speakers all around the word:\nFind A Bug\nThe simplest thing that you can do is if you see any bug, bad code and etc, open an issue and tell us there is a problem.\nThis way you can help us find problems.\nBut please before creating new issue, search for simmilar issues and avoid opening duplicated issues.\nRequesting New Features\nAnother helpful thing you can do is requesting a useful feature that is not in the library yet. For this, you can open an issue and request a feature for implementing.\nAdding New Features\nAnd most helpful thing is adding new features in the library.\nHow You can Help All Iranian Angular Developers?\nYou are wondering how you can contribute in this project? Here is a list of what you can do:\n\nYou did anything useful and special for Iranian apps? So you can add that in this library and save other developers time.\nYou think number of tests for some part of this library is not enough? So you can write more tests.\nDocuments are not enough? You can help us by adding more documents.\nCurrent code could be better? You can make this cleaner or faster.\n\nYou should follow these steps for contributing in this project:\n1. Getting the Repository\nFor contributing, first fork the repository. Then create your branch and start coding.\n2. Follow the Flow\nWe are using git flow in this project for keeping things clean and maintainable. If you don't now how to use git flow, you can find it here in less than a minute.\n3. Add Tests\nWe are following TDD guides for developing this library, So you SHOULD add tests first and then add your code.\n4. Write the Dock\nAll codes should have complete in-code document following JSDoc syntax. Plus you should re-generate the code document using compodoc.\nFor generating documents, you should run following command in the project directory:\nnpm run generate-docs\nAlso you should add some documents about how to using a feature in the README.md file.\n5. Create A Pull Request\nNow you are done and want to add your code. So come here and create a new pull request. Please make pull request message complete and useful. Also you should keep all commit messages in your branch meaningful and useful.\nThank you for your contribution and make life easier for Iranian Angular developers.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n            \n            function\n            div\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n            \n            function\n            mod\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n            \n            function\n            round\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/InvalidJalaliDate.error.ts\n            \n            class\n            InvalidJalaliDateError\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/SimpleDate.interface.ts\n            \n            interface\n            SimpleDateInterface\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts\n            \n            injectable\n            JalaliDateCalculatorService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts\n            \n            injectable\n            JalaliDateValidatorService\n            \n                72 %\n                (8/11)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/jdate.ts\n            \n            class\n            JDate\n            \n                46 %\n                (37/80)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts\n            \n            pipe\n            IRCurrencyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/enNum.pipe.ts\n            \n            pipe\n            EnNumPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/faNum.pipe.ts\n            \n            pipe\n            FaNumPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/jdate.pipe.ts\n            \n            pipe\n            JdatePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/nationalCode.pipe.ts\n            \n            pipe\n            NationalCodePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidMobileOperator.error.ts\n            \n            class\n            InvalidMobileOperatorError\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidMobilePhoneNumber.error.ts\n            \n            class\n            InvalidMobilePhoneNumberError\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidNationalCode.error.ts\n            \n            class\n            InvalidNationalCodeError\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidServiceInput.error.ts\n            \n            class\n            InvalidServiceInputError\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n            \n            injectable\n            MobilePhoneNumberService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n            \n            variable\n            MobileCodes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/national-code.service.ts\n            \n            injectable\n            NationalCodeService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n            \n            injectable\n            PersianLetterService\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n            \n            interface\n            PLOptions\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-number.service.ts\n            \n            injectable\n            PersianNumberService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-service.ts\n            \n            interface\n            PersianService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-directives.ts\n            \n            directive\n            PersianLetterDirective\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-directives.ts\n            \n            directive\n            PersianNumbersDirective\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-validators.ts\n            \n            function\n            persianLettersValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-validators.ts\n            \n            function\n            persianNumbersValidator\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.0.3\n        \n            @angular/common : ~8.0.3\n        \n            @angular/compiler : ~8.0.3\n        \n            @angular/core : ~8.0.3\n        \n            @angular/forms : ~8.0.3\n        \n            @angular/platform-browser : ~8.0.3\n        \n            @angular/platform-browser-dynamic : ~8.0.3\n        \n            @angular/router : ~8.0.3\n        \n            core-js : ^2.6.9\n        \n            rxjs : ~6.5.2\n        \n            tslib : ^1.10.0\n        \n            typedoc : ^0.15.0\n        \n            zone.js : ~0.9.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FromatNames   (projects/.../jdate.pipe.ts)\n                        \n                        \n                            IRCurrencies   (projects/.../IRCurrency.pipe.ts)\n                        \n                        \n                            operatorsNames   (projects/.../mobile-phone-number.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-persian/src/lib/Pipes/jdate.pipe.ts\n    \n        \n            \n                \n                    \n                        \n                        FromatNames\n                    \n                \n                    \n                        \n                            Pre-defined formats date formats those can use for formatting JDate objects with jdate pipe.\n\n                        \n                    \n                        \n                            \n                                 short\n                            \n                        \n                        \n                            \n                                Value : yy/m/d h:M t\n                            \n                        \n                        \n                            \n                                 shortDate\n                            \n                        \n                        \n                            \n                                Value : yy/m/d h:M t\n                            \n                        \n                        \n                            \n                                 medium\n                            \n                        \n                        \n                            \n                                Value : d mmm yyyy، h:M t\n                            \n                        \n                        \n                            \n                                 mediumDate\n                            \n                        \n                        \n                            \n                                Value : d mmm yyyy، h:M t\n                            \n                        \n                        \n                            \n                                 long\n                            \n                        \n                        \n                            \n                                Value : d mmm yyyy، h:M:S T\n                            \n                        \n                        \n                            \n                                 longDate\n                            \n                        \n                        \n                            \n                                Value : d mmm yyyy، h:M:S T\n                            \n                        \n                        \n                            \n                                 shortTime\n                            \n                        \n                        \n                            \n                                Value : h:M t\n                            \n                        \n                        \n                            \n                                 mediumTime\n                            \n                        \n                        \n                            \n                                Value : h:M:S t\n                            \n                        \n                        \n                            \n                                 longTime\n                            \n                        \n                        \n                            \n                                Value : h:M:S.l T\n                            \n                        \n            \n        \n\n    projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts\n    \n        \n            \n                \n                    \n                        \n                        IRCurrencies\n                    \n                \n                        \n                            \n                                 rial\n                            \n                        \n                        \n                            \n                                Value : ریال\n                            \n                        \n                        \n                            \n                                 r\n                            \n                        \n                        \n                            \n                                Value : ریال\n                            \n                        \n                        \n                            \n                                 toman\n                            \n                        \n                        \n                            \n                                Value : تومان\n                            \n                        \n                        \n                            \n                                 t\n                            \n                        \n                        \n                            \n                                Value : تومان\n                            \n                        \n            \n        \n\n    projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n    \n        \n            \n                \n                    \n                        \n                        operatorsNames\n                    \n                \n                    \n                        \n                            English name of mobile operators are enum keys and persian name of them are values.\nAll characters of all of the keys are in lowercase\n\n                        \n                    \n                        \n                            \n                                 irancell\n                            \n                        \n                        \n                            \n                                Value : ایرانسل\n                            \n                        \n                        \n                            \n                                 mci\n                            \n                        \n                        \n                            \n                                Value : همراه اول\n                            \n                        \n                        \n                            \n                                 talia\n                            \n                        \n                        \n                            \n                                Value : تالیا\n                            \n                        \n                        \n                            \n                                 rightel\n                            \n                        \n                        \n                            \n                                Value : رایتل\n                            \n                        \n                        \n                            \n                                 spadan\n                            \n                        \n                        \n                            \n                                Value : اسپادان\n                            \n                        \n                        \n                            \n                                 tkc\n                            \n                        \n                        \n                            \n                                Value : شبکه مستقل تلفن همراه کیش\n                            \n                        \n                        \n                            \n                                 shatel\n                            \n                        \n                        \n                            \n                                Value : شاتل\n                            \n                        \n                        \n                            \n                                 aptel\n                            \n                        \n                        \n                            \n                                Value : آپتل\n                            \n                        \n                        \n                            \n                                 azartel\n                            \n                        \n                        \n                            \n                                Value : آذرتل\n                            \n                        \n                        \n                            \n                                 samantel\n                            \n                        \n                        \n                            \n                                Value : سامانتل\n                            \n                        \n                        \n                            \n                                 lotustel\n                            \n                        \n                        \n                            \n                                Value : لوتوس‌تل\n                            \n                        \n                        \n                            \n                                 anarestan\n                            \n                        \n                        \n                            \n                                Value : انارستان\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            div   (projects/.../ArithmeticUtils.ts)\n                        \n                        \n                            mod   (projects/.../ArithmeticUtils.ts)\n                        \n                        \n                            persianLettersValidator   (projects/.../persian-validators.ts)\n                        \n                        \n                            persianNumbersValidator   (projects/.../persian-validators.ts)\n                        \n                        \n                            round   (projects/.../ArithmeticUtils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            div\n                        \n                        \n                    \n                \n            \n            \n                \ndiv(num1, num2)\n                \n            \n\n\n\n\n            \n                \n                    This function returns integer part of division result of num1 and num2 numbers.\nFor example: div (10, 3) is equal to 3.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num1\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    num2\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mod\n                        \n                        \n                    \n                \n            \n            \n                \nmod(num1, num2)\n                \n            \n\n\n\n\n            \n                \n                    This function return arithmetic mod result of two inputs as a integer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num1\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    num2\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            round\n                        \n                        \n                    \n                \n            \n            \n                \nround(x)\n                \n            \n\n\n\n\n            \n                \n                    This function removes fraction part of the number if exists. So, for example, it will turn -145,455 to -145 and\n145,455 to 145.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/ngx-persian/src/lib/Validators/persian-validators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            persianLettersValidator\n                        \n                        \n                    \n                \n            \n            \n                \npersianLettersValidator(options, persianLetterService)\n                \n            \n\n\n\n\n            \n                \n                    Reactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        see documents of isPersian method of the PersianLetterService for more info about options.\n\n                                    \n                                \n                                \n                                    persianLetterService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            persianNumbersValidator\n                        \n                        \n                    \n                \n            \n            \n                \npersianNumbersValidator(persianNumberService)\n                \n            \n\n\n\n\n            \n                \n                    Reactive form validator that checks form control value contains only persian numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    persianNumberService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgxPersian\n\n\n\n\nA full featured tool set for Persian Applications Created by Angular (v > 2) containing Pipes, Services, Directives and javascript Similar Date object for working with Jalali Date.\nYou can use Tools provided by this library for:\n\nConverting English numbers to Persian numbers and vise versa \nValidating persian text with different options\nValidating persian numbers for numeric inputs\nConverting and validating Jalali Date and time like native javascript Date object\nFormatting Jalali Dates using jdate pipe\nFormatting currency values in Rial or Toman currency type with flexable options.\nValidating and Formatting Iranian National Number\nValidating phone numbers of Iranian Mobile operators.\nGetting operator name of a phone number in English or Persian\nValidating reactive and template-base form inputs for persian numbers or texts.\n\nWhy you should use this library?\nThere are many reasons for using this library For everyone who develops an Angular application for people living in Iran:\n\nYou can find almost everything you need in a signle library and don't need to install thousand of different libraries.\nIt's developed for recent version of angular (v4 to v7) and is not out ot date like most of other libraries.\nWe solved problems in Angular way, not like most of other libraries those only glued a js solution to the Angular and Typescript.\nIt's alive! Many of other persian libraries have unanswered issues from 1-2 year ago.\nAlmost everything has been tested. There are more than 590 unit tests written for all parts. So you can use everything without any fear of breaking things down.\nIt's documented. Everything are clear and you can find anything you want from this document, code document and also unit test.\n\n\n\nTable of Contents \n\nNgxPersian\nWhy you should use this library?\n\n\nHow to Install?\nDocuments\nPipes\nfaNum\nenNum\nirc\nnationalCode\njdate\n\n\nServices\nPersianNumberService\nPersianLetterService\nMobilePhoneNumberService\nJalaliDateValidatorService\nJalaliDateCalculatorService\n\n\nJalali Date\nNationalCodeService\nValidators\npersianNumbersValidator\npersianNumbersValidator\n\n\nDirectives\n\n\nContribution\nThere is any problem?\nCitations\n\n\n\n\n\nHow to Install?\nFor installing this library, you can simply run following command in your Angular app root:\nnpm install ngx-persian --save\nFor installing the library globally, you can run following command instead:\nnpm install ngx-persian -g\nDocuments\nShort documentation of the library is here. For more detailed documents, you can see the code document.\nPipes\nWe are using pipes for formatting values in the templates. We Have 4 Different pipes in the ngx-persian for formatting stuff needed by the persian app developers:\nfaNum\nThis pipe replaces all the English and Arabic digits to the Persian Digits without any need for additional code or parameter.\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {FaNumPipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nFaNumPipe,\nNow you can this pipe anywhere you like in your templates.\nFor example, if we want to convert non-english digits in a attribute named: englishTextDigit, we can use this code in our template:\n{{englishTextDigit | faNum}}\nenNum\nThis pipe replaces all the Persian Digits to English digits without any need for additional code or parameter.\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {EnNumPipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nEnNumPipe,\nYou can use this pipe anywhere you like in your templates for converting persian digits to english digits.\nFor example, if we want to convert persian digits in a attribute named: persianTextDigit, we can use this code in our template:\n{{persianTextDigit | enNum}}\nYou can see the example usage of these pipes in below GIF:\n\nStill have questions? see the related part of example app or see: related section in code document for EnNumPipe or see: related section in code document for FaNumPipe. \nAlso you can see unit tests of FaNumPipe and unit tests of EnNumPipe for more examples of how input and outputs could be. \nirc\nThis pipe formats currency values for two popular currency types in Iran: Rian and Toman.\nThis pipes accepts one optional parameter for declaring currency type And get's this value as first parameter.\nPossible values for currency type parameter:\n\n\n\nValue\nOutput currency type\n\n\n\n\nr\nریال\n\n\nrial\nریال\n\n\nt\nتومان\n\n\ntoman\nتومان\n\n\n\nThe default value is r, so if you don't set any currency type, this pipe will consider that you've chosen rial currency type.\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {IRCurrencyPipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nIRCurrencyPipe,\nYou can use this pipe anywhere you like in your templates for formatting a currency value in Iranian currency types.\nFor example, For converting a digit to rial:\n{{13750 | irc}} output will be: 13,750 ریال\nYou can pass currency type parameter as below:\n{{13750 | irc:'t'}}\nThe output will be like:\n137,750 تومان\nYou can see the example usage of this pipes in below GIF:\n\nAlso this pipes inherits the Angular decimal pipe. So you can choose different formatting styles for numeric part of formatted currency value and pass yor pattern as second parameter of the pipe.\nFor example, below code recreates default behaviour of the pipe (Grouping each 3 digit from right):\n{{13750 | irc:'r':'1.0-0'}}\nIn regular uses, you never need to pass the second parameter, but it's here for more special usages.\nStill have questions? see the related part of example app or see: related section in code document for IRCurrencyPipe. \nAlso you can see unit tests of IRCurrencyPipe for more examples of how input and outputs could be.\nnationalCode\nThis pipe formats a 10-digit string to national code format like:\nxxx-xxxxxx-x\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {NationalCodePipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nNationalCodePipe,\nYou can use this pipe anywhere you like in your templates for formatting iranian national number.\nFor example: 0011753646 | nationalCode produces following text: 001-175364-6\nYou can see the example usage of this pipes in below GIF:\n\nStill have questions? see the related part of example app or see: related section in code document for NationalCodePipe. \nAlso you can see unit tests of NationalCodePipe for more examples of how input and outputs could be.\njdate\nThis pipe formats JDate object and creates a human readable text with different pre-defiend formats. Also you can pass you custom format to it.\nYou can pass Format name or custom format pattern as second parameter of this pipe.\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {JdatePipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nJdatePipe,\nYou can use this pipe anywhere you like in your templates for formatting Jalali dates as JDate objects.\nFor example: dateObject | jdate produces following text: 23 اردیبهشت 1397، 12:12 ب.ظ'\nFor changing formatting pattern, you can set second parameter like this:\ndateObject| jdate:'small' That produces this result: 97/2/23 12:12 ب.ظ\nBelow you can see list of pre-defined formats:\n\n\n\nFormat name\nEquivalent Pattern String\nExample Result\n\n\n\n\nshort\nyy/m/d h:M t\n97/2/23 12:12 ب.ظ'\n\n\nshortDate\nyy/m/d h:M t\n97/2/23 12:12 ب.ظ\n\n\nmedium\nd mmm yyyy، h:M t\n23 اردیبهشت 1397، 12:12 ب.ظ\n\n\nmediumDate\nd mmm yyyy، h:M t\n23 اردیبهشت 1397، 12:12 ب.ظ\n\n\nlong\nd mmm yyyy، h:M:S T\n23 اردیبهشت 1397، 12:12:30 بعد از ظهر\n\n\nlongDate\nd mmm yyyy، h:M:S T\n23 اردیبهشت 1397، 12:12:30 بعد از ظهر\n\n\nshortTime\nh:M t\n12:12 ب.ظ\n\n\nmediumTime\nh:M:S t\n12:12:30 ب.ظ\n\n\nlongTime\nh:M:S.l T\n12:12:30.300 بعد از ظهر\n\n\n\nAlso instead of those patter names, you can set your desired pattern string as described in the documents of format method of JDate object.\nStill have questions? see the related part of example app or see: related section in code document for JdatePipe. \nAlso you can see unit tests of JdatePipe for more examples of how input and outputs could be.\nServices\nWe provide some useful Angular Services for data validation and conversion. You can Inject Them anywhere you like using Angular DI.\nPersianNumberService\nThis service created for validation of strings contains persian digits and converting other digits to the persian ones.\nFor reading more detailed document, you can see related part of code document of the PersianNumberService.\nAdding PersianNumberService to Your Application\nFor using this service you only need to import it in the file you want to use that in it. Simple as this:\nimport {PersianNumberService} from 'ngx-persian';\nFor Injecting this service, you just need to add it in the constructor of your service or component like this:\nconstructor(private persianNumberService: PersianNumberService) {}\nNow you can use it like other attributes of your class with this keyword.\nSo lets digging deep to the class and see what its methods do:\narabicToPersian\nYou can use this method for converting arabic digits in the input string with persian digits. This method will not change other characters of the string and left them unchanged.\nExample:\nconsole.log(this.persianNumberService.arabicToPersian('٤٥٦'))\n// Expected output: ۴۵۶For more information you can see the related part of code document about arabicToPersian method. Also for more examples, you can see the unit tests of the arabicToPersian method.\ncontainsPersian\nThis method checks if input text contains any persian digit. So if there is at least one persian digit in the input, returns true.\nExample:\nif (this.persianNumberService.containsPersian('A long text with english و فارسی words with a persian digit: ۱')) {\n  console.log('Input text contains persian digits.');\n} \n\nif (!this.persianNumberService.containsPersian('یک متن فارسی با اعداد انگلیسی 156465 که رقم فارسی ندارد.')){\n  console.log('input text does not contain persian digits.');\n}For more information you can see the related part of code document about containsPersian method. Also for more examples, you can see the unit tests of the containsPersian method.\nisPersian\nThis method check if input string contains ONLY persian digits. So if there is any other character, returns false.\nExample:\nif (this.persianNumberService.isPersian('۶۸۷۹۷۹۷')) {\n  console.log('Input string contains only persian numbers.')\n} \n\nif (!this.persianNumberService.isPersian('۷۶۷۶۸ ۸۹۰۹۷')) {\n  console.log('Input string does not contain only persian numbers');\n} For more information you can see the related part of code document about isPersian method. Also for more examples, you can see the unit tests of the isPersian method.\ntoEnglish\nConverts all Persian digits in the input string to English digits. This method will not change any other characters of the input.\nExample:\nconsole.log(this.persianNumberService.toEnglish('یک متن با اعداد فارسی مثل ۵۴۳۲۴۴۵'));\n// Expected output: یک متن با اعداد فارسی مثل 5432445For more information you can see the related part of code document about toEnglish method. Also for more examples, you can see the unit tests of the toEnglish method.\ntoPersian\nThis method converts all English and Arabic digits to the Persian digits. This method will not change any other characters of the input.\nExample:\nconsole.log(this.persianNumberService.toPersian('A long text with english digits: 54484 and Arabic digits: ٤٥٦'));\n// Expected output: A long text with english digits: ۵۴۴۸۴ and Arabic digits: ۴۵۶PersianLetterService\nThis service created for validation of strings contains persian letters and converting arabic letters to the persian ones.\nFor reading more detailed document, you can see related part of code document of the PersianLetterService.\nAdding PersianLetterService to Your Application\nFor using this service you only need to import it in the file you want to use that in it. Simple as this:\nimport {PersianLetterService} from 'ngx-persian';\nFor Injecting this service, you just need to add it in the constructor of your service or component like this:\nconstructor(private persianLetterService: PersianLetterService) {}\nNow you can use it like other attributes of your class with this keyword.\nSo lets digging deep to the class and see what its methods do:\ncontainsPersian\nThis method checks if input string contains any persian letter or not. So if there is at least one persian letter in the input, return true.\nBe careful, digits (۱,۲,...) are not letters.\nExample:\nif (this.persianLetterService.containsPersian('Some words and numbers5454 wtih one persian letterی')) {\n  console.log('Input contains persian letters');\n} \n\nif (!this.persianLetterService.containsPersian('۴۳۵۵ fdhf 45')) {\n  console.log('Input does not contain persian letters.');\n} For more information you can see the related part of code document about containsPersian method. Also for more examples, you can see the unit tests of the containsPersian method.\nisPersian\nThis method checks if input string contains ONLY persian letters or not.\nIn default mode, if input contains any other character (instead whitespaces and special characters explained below), returns false. But you can control behaviour of this method by second parameter, options.\nisPersian(value: string, options: PLOptions = {\n                                                  persianDigits: false,\n                                                  enDigits: false,\n                                                  symbols: true,\n                                                  whitespaces: true}): booleanoptions parameter is an object implementing PLOptions interface.\nYou can see possible properties of the options object, their meaning and their default value in the table below:\n\n\n\nProperty\nMeaning\nDefault Value\n\n\n\n\npersianDigits\nIf sets to true, accepts persian digits plus persian letters in the input string\nfalse\n\n\nenDigits\nIf sets to true, accept english digits plus persian letters\nfalse\n\n\nsymbols\nAccepts certain symbols plus persian letters.\ntrue\n\n\n\nSymbols list:\n\n\n\n\n?$-/:؟!~\"'^_-[]{}()%&*>\n\n\n\nwhitespaces\nIf sets to true, accepts whitespace characters plus persian letters.\ntrue\n\n\n\nYou can use any combination of those parameters for getting the result you want.\nYou only need to pass parameters of options those are different from default value. Missing properties will fill with default values.\nExample:\nif (this.persianLetterService.isPersian('بدونفاصله'), {whitespaces: false, symbols: false}) {\n  console.log('Input string contains only persian letters, not any other thing.');\n} \n\nif (this.persianLetterService.isPersian('متن فارسی با فاصله و علائم به صورت پیش‌فرض قابل قبول است.')) {\n  console.log('Input string contains only persian letters, whitespaces and symbols.');\n} For more information you can see the related part of code document about isPersian method. Also for more examples, you can see the unit tests of the isPersian method.\ntoPersian\nThis method converts arabic letters: ك and ي to persian letters: ک and ی.\nExample:\nconsole.log(this.persianLetterService.toPersian('یك متن فارسي شامل حروف عربی'));\n// Expected output: یک متن فارسی شامل حروف عربیFor more information you can see the related part of code document about toPersian method. Also for more examples, you can see the unit tests of the toPersian method.\nMobilePhoneNumberService\nThis service created for validation of strings contains mobile phone numbers of iranian mobile operators.\nYou can get operator name and validation result of a phone number by methods of this service.\nAdding MobilePhoneNumberService to Your Application\nFor using this service you only need to import it in the file you want to use that in it. Simple as this:\nimport {MobilePhoneNumberService} from 'ngx-persian';\nFor Injecting this service, you just need to add it in the constructor of your service or component like this:\nconstructor(private mobilePhoneNumberService: MobilePhoneNumberService) {}\nNow you can use it like other attributes of your class with this keyword.\nSo lets digging deep to the class and see what its methods do:\nisPhoneNumberPatternValid\n This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits. This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and in reality are not a valid phone number.\nExample:\nif (this.mobilePhoneNumberService.isPhoneNumberPatternValid('09357413028')) {\n  console.log('phone number follows correct pattern');\n} \n\nif (!this.mobilePhoneNumberService.isPhoneNumberPatternValid('912475')) {\n  console.log('phone number is not valid.');\n} For more information you can see the related part of code document about isPhoneNumberPatternValid method. Also for more examples, you can see the unit tests of the  isPhoneNumberPatternValid method.\ngetPhoneNumberOperator\nThis method first checks input for following correct pattern explained in the isPhoneNumberPatternValid method.\nThen, Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from operatorsNames enum.\nIn default, Persian name of operator will return. For controlling language of the output, you can use second optional parameter (nameInEnglish) of this method.\nBy passing true, operator name will return in English. Default value of nameInEnglish parameter is `false.\nIf there is no recognizable operator for inputted mobile number, a InvalidMobileOperatorError will throw.\nAlso if input string does not follow correct pattern, an InvalidMobilePhoneNumberError will throw.\nSupporting Mobile operator companies are listed in table below:\n\n\n\nOperator Name in English\nنام فارسی اپراتور\n\n\n\n\nirancell\nایرانسل\n\n\nmci\nهمراه اول\n\n\ntalia\nتالیا\n\n\nrightel\nرایتل\n\n\nspadan\nاسپادان\n\n\ntkc\nشبکه مستقل تلفن همراه کیش\n\n\nshatel\nشاتل\n\n\naptel\nآپتل\n\n\nazartel\nآذرتل\n\n\nsamantel\nسامانتل\n\n\nlotustel\nلوتوس‌تل\n\n\nanarestan\nانارستان\n\n\n\nWe've provided an enum named operatorsNames you can see it here.\nExample:\nconsole.log(this.mobilePhoneNumberService.getPhoneNumberOperator('09352479965'));\n// Expected output: ایرانسل\n\nconsole.log(this.mobilePhoneNumberService.getPhoneNumberOperator('+989352479965', true));\n// Expected output: irancellFor more information you can see the related part of code document about getPhoneNumberOperator method. Also for more examples, you can see the unit tests of the   getPhoneNumberOperator method.\nisValidPhoneNumber\nIf phoneNumber follows correct pattern and has valid operator, returns true. Otherwise returns false.\nExample:\nif (this.mobilePhoneNumberService.isValidPhoneNumber('09195574410')) {\n  console.log('mobile phone number is valid.');\n}\n\nif (this.mobilePhoneNumberService.isValidPhoneNumber('09005574410')) {\n  console.log('mobile phone number is not valid.');\n}For more information you can see the related part of code document about isValidPhoneNumber method. Also for more examples, you can see the unit tests of the isValidPhoneNumber method.\nnormalizePhoneNumber\nRemoves +98 from the phoneNumber and replaces it with a 0 character. This method will not make any validation on the input.\nExample:\nconsole.log(this.mobilePhoneNumberService.normalizePhoneNumber('+989352479965'));\n// Expected output: 09352479965For more information you can see the related part of code document about normalizePhoneNumber method. Also for more examples, you can see the unit tests of the normalizePhoneNumber method.\nJalaliDateValidatorService\nMethods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for validating Jalali dates without needing to convert them to the Georgian Date.\nAdding JalaliDateValidatorService to Your Application\nFor using this service you only need to import it in the file you want to use that in it. Simple as this:\nimport {JalaliDateValidatorService} from 'ngx-persian';\nFor Injecting this service, you just need to add it in the constructor of your service or component like this:\nconstructor(private jalaliDateValidatorService: JalaliDateValidatorService) {}\nNow you can use it like other attributes of your class with this keyword.\nSo lets digging deep to the class and see what its methods do:\nisJYearLeap\nThis method gets a Jalali year as input. It jalali year is a leap year, returns true. If not, returns false.\nExample:\nif (this.jalaliDateValidatorService.isJYearLeap(1375)) {\n  console.log('1375 is a leap year.');\n} \n\nif (!this.jalaliDateValidatorService.isJYearLeap(1397)) {\n  console.log('1397 is not a leap year.');\n} For more information you can see the related part of code document about isJYearLeap method. Also for more examples, you can see the unit tests of the isJYearLeap method.\nisValidJDate\nIf Jalali date is not a valid Jalali date, return false. otherwise returns true.\nInput format of this method is:\nisValidJDate(jYear, jMonth, jDay)\njYear is a Jalali year. jMonth is number of month starting from zero. jDay is day number starting from one.\nCombination of year, month and day should be a valid date in the calendar.\nExample:\nif (this.jalaliDateValidatorService.isValidJDate(1375, 11, 30)) {\n  console.log('Input is a valid Jalali date.');\n} \n\nif (!this.jalaliDateValidatorService.isValidJDate(1397, 11, 30)) {\n  console.log('Input is not a valid Jalali date.');\n}  For more information you can see the related part of code document about isValidJDate method. Also for more examples, you can see the unit tests of the isValidJDate method.\nisValidJDay\nChecks if day number is in valid range according to the given year and month.\nFirst six month of the year have 31 days. 5 next months have 30 days and last month maybe has 29 or 30 days.\nThis method checks is day number in the valid range of day numbers of the month in a particular year or not.\nExample:\nif (this.jalaliDateValidatorService.isValidJDay(1375, 11, 30)) {\n  console.log('Input day is valid in Jalali calendar.');\n} \n\nif (!this.jalaliDateValidatorService.isValidJDay(1397, 11, 30)) {\n  console.log('Input is not valid in Jalali calendar.');\n} For more information you can see the related part of code document about isValidJDay method. Also for more examples, you can see the unit tests of the isValidJDay method.\nisValidJMonth\nChecks if jalali month is in valid range or not. In default, jMonth should start from zero. If you want to start month number from one instead of zero, you should make startFromZero parameter to false.\nisValidJMonth(jMonth: number, startFromZero: boolean)\nBe careful about month number. Only in this method you can choose starting month number from one or zero. In others, month number starts only from zero.\nExample:\nif (this.jalaliDateValidatorService.isValidJMonth(12, false)) {\n  console.log('Month is valid.');\n} \n\nif (!this.jalaliDateValidatorService.isValidJMonth(12)) {\n  console.log('Month is not valid');\n} For more information you can see the related part of code document about isValidJMonth method. Also for more examples, you can see the unit tests of the isValidJMonth method.\nisValidJYear\nChecks if jalali year is in acceptable range or not. Acceptable range for this validator is from -61 to 3177.\nExample:\nif (this.jalaliDateValidatorService.isValidJYear(1397)) {\n  console.log('Year is valid.');\n} \n\nif (!this.jalaliDateValidatorService.isValidJYear(3179)) {\n  console.log('Year is not valid');\n} For more information you can see the related part of code document about isValidJYear method. Also for more examples, you can see the unit tests of the isValidJYear method.\njMonthLength\nReturns number of days in a given month counting from 1.\njMonthLength(jYear: number, jMonth: number)\njYear is Jalali year number and jMonth is month number starts from zero.\noutput is number of days in given month. First six months of the year have 31 days. 5 next months have 30 days and last month maybe has 29 or 30 days.\nExample:\nconsole.log(this.jalaliDateValidatorService.jMonthLength(1375, 11));\n// Expected output: 30\n\nconsole.log(this.jalaliDateValidatorService.jMonthLength(1397, 0));\n// Expected output: 31For more information you can see the related part of code document about jMonthLength method. \nAlso for more examples, you can see the unit tests of the jMonthLength method.\nnumOfJLeapYears\nReturn number of leap years passed from base year until given Jalali year.\nFor more information you can see the related part of code document about numOfJLeapYears method. \nAlso for more examples, you can see the unit tests of the numOfJLeapYears method.\nJalaliDateCalculatorService\nThis service converts Georgian date to Jalali and vase versa. You can use all of the methods as static methods.\nAdding JalaliDateCalculatorService to Your Application\nFor using this service you only need to import it in the file you want to use that in it. Simple as this:\nimport {JalaliDateCalculatorService} from 'ngx-persian';\nFor Injecting this service, you just need to add it in the constructor of your service or component like this:\nconstructor(private jalaliDateCalculatorService: JalaliDateCalculatorService) {}\nNow you can use it like other attributes of your class with this keyword.\nJalaliDateValidatorService injected into this service. So if you want to create an instance of this service and don't want to use DI, you should pass an instance of that service in it. But if you are using DI as described before, you don't need to do anything at all.\nSo lets digging deep to the class and see what its methods do:\nconvertToGeorgian\nConverts a valid jalali date to a javascript Date object representing a equivalent Georgian date.\nthis method looking like:\nconvertToGeorgian(jYear: number, jMonth: number, jDay: number)\njYear is a full Jalali year like 1397.\njMonth is month number starting from zero.\njDay in day number starting from one.\nExample:\nthis.jalaliDateCalculator.convertToGeorgian(1397, 11, 22);\n// Expecting output of this line is: Date(2019, 2, 13);For more information you can see the related part of code document about convertToGeorgian method. \nAlso for more examples, you can see the unit tests of the convertToGeorgian method.\nconvertToJalali\nThis method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\nATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\nInput of this method is a native javascript Date object.\nExample:\nconst jalali = this.jalaliDateCalculator.convertToJalali(new Date(2019, 2, 13));\nconsole.log(jalali.year); // Expected output: 1397\nconsole.log(jalali.month) // Expected output: 11\nconsole.log(jalali.day) // Expected output: 22For more information you can see the related part of code document about convertToJalali method. \nAlso for more examples, you can see the unit tests of the convertToJalali method.\ncreateGDateFromDays\nCreates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\nExample:\nconsole.log(this.jalaliDateCalculator.createGDateFromDays(2458736));\n// Expected output: Date(2019, 8, 9)For more information you can see the related part of code document about createGDateFromDays method. \nAlso for more examples, you can see the unit tests of the createGDateFromDays method.\nfirstDayOfJYearInMarch\nFirst day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of starting day of new jalali year in March.\nThe day number starts from 1 not zero and is equal to the real numbers in the calendar.\nExample:\nconsole.log(this.jalaliDateCalculator.firstDayOfJYearInMarch(1398));\n// Expected output: 21For more information you can see the related part of code document about firstDayOfJYearInMarch method. \nAlso for more examples, you can see the unit tests of the firstDayOfJYearInMarch method.\ngeorgianYearToJalaliYear\nConverts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\nExample:\nconsole.log(this.jalaliDateCalculator.georgianYearToJalaliYear(2018));\n// Expected output: 1397For more information you can see the related part of code document about georgianYearToJalaliYear method.\njalaliYearToGeorgianYear\nConverts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year that starts in the winter of jalali year.\nExample:\nconsole.log(this.jalaliDateCalculator.jalaliYearToGeorgianYear(1397));\n// Expected output: 2018For more information you can see the related part of code document about jalaliYearToGeorgianYear method.\nnumberOfPassedGDays\nCalculates the Julian Day number from Gregorian or Julian calendar dates.\nInput value of this method is a javascript Date object.\nExample:\nconst dateObj = new Date(2019, 8, 9);\nconsole.log(this.jalaliDateCalculator.numberOfPassedGDays(dateObj));\n// Expected output: 2458736For more information you can see the related part of code document about numberOfPassedGDays method. \nAlso for more examples, you can see the unit tests of the numberOfPassedGDays method.\nnumberOfPassedJDays\nReturns number of passed days from source day in jalali calendar to the given jalali date.\nmethod declaration:\nnumberOfPassedJDays(jYear: number, jMonth: number, jDay: number)\njYear is a full Jalali year like 1397.\njMonth is month number starting from zero.\njDay in day number starting from one.\nExample:\nconsole.log(this.jalaliDateCalculator.numberOfPassedJDays(1397, 0, 1));\n// Expected output: 2458199For more information you can see the related part of code document about numberOfPassedJDays method. \nAlso for more examples, you can see the unit tests of the numberOfPassedJDays method.\nnumOfGLeapYears\nThis function returns number of passed leap years from AD 621 until targetGYear.\nExample:\nExample:\nconsole.log(this.jalaliDateCalculator.numOfGLeapYears(2018));\n// Expected output: 339For more information you can see the related part of code document about numOfGLeapYears method. \nAlso for more examples, you can see the unit tests of the numOfGLeapYears method.\nJalali Date\nWe always had problems with Jalali dates. Built-in javascript Date object created for Georgian date and everything has been built for that object.\nNow, in ngx-persian, we solved the problem for ever.\nWe provided a class named JDate. This class implemented javascript native Date. So you have access to all the methods and behaviours of that object, now in Jalali.\nAlso you can use objects of JDate everywhere accepts javascript native Date object.\nThat means you can use all libraries, services and ... those are working with javascript Date object, with Jalali date. without any need for changing things or writing them for Jalali date from scratch.\nThis is the end of bad days for Iranian developers.&#x1F377;&#x1F377;&#x1F377;\nHow to add JDate to your project?\nFor using JDate, you only need to import it in the file you are working on it:\nimport {JDate} from 'ngx-persian';\nHow to create instances of JDate\nThere are many ways to create a Jalali Date object for your convenience.\n\ngetting current date and time by creating an instance without any parameter: new JDate()\nCreating JDate object from a jalali date string as described in the\npars method document, you can pass that string as\nfirst parameter and leave others empty. new JDate('11 دی 1348 00:00:00')\nCreating JDate object from number of passed milliseconds from UNIX epoch: new JDate(-12600000)\nCreating JDate object from a Georgian Date object and convert that date to the Jalali date effortlessly: new JDate(new Date(2018, 1, 1))\nCreating JDate object from date and time values: new JDate(1397, 12, 25) or new JDate(1397, 12, 25, 12, 32, 45, 123)\n\n\n\nAs I said, This class implements entire Date object, so there are many methods and you can do anything you could do with javascript Date , \nplus some additional methods for simpler use like format method that formats date and time in desired pattern.\nYou can see complete document of all methods of this class by clicking on this text.\nAlso you can get more clear vision of each method by viewing unit test of JDate class here.\nBy using this class in your app, you never need another help for working and validating Jalali date and time.\nNationalCodeService\nYou can use this service for validating Iranian national code (number) And finding out if user input is a correct National code or not.\nFor reading more detailed document, you can see [related part of the code document of the NationalCodeService] (https://alihoseiny.github.io/ngx-persian/injectables/NationalCodeService.html)\nAdding NationalCodeService to Your Application\nFor using this service you only need to import it in the file you want to use that in it. Simple as this:\nimport {NationalCodeService} from 'ngx-persian';\nFor Injecting this service, you just need to add it in the constructor of your service or component like this:\nconstructor(private nationalCodeService: NationalCodeService) {}\nNow you can use it like other attributes of your class with this keyword.\nSo lets digging deep to the class and see what its methods do:\nnormalize\nThis method normalizes inputs for being a 10-digit string.\nThis method removes whitespaces from sides of the input and adds zero character at the beginning of the input until the length of the result reach to 10.\nIf Input length is shorter than 8 or longer than 10, an [`InvalidNationalCodeError](https://alihoseiny.github.io/ngx-persian/classes/) will throw.\nExample:\nconsole.log(this.nationalCodeService(15234756));\n// Expected output is: '0015234756'\n\nconsole.log(this.nationalCodeService('015234756'));\n// Expected output is: '0015234756'\n\nconsole.log(this.nationalCodeService('0015234756'));\n// Expected output is: '0015234756'\n\ntry {\n  this.nationalCodeService('34756');\n} catch (e) {\n  console.log('Input length is less than 8 and an InvalidNationalCodeError throw');\n}\nFor more information you can see the related part of code document about normalize method. Also for more examples, you can see the unit tests of the normalize method.\nisValid\nThis method first normalizes the input using normalize method and implicitly checks input length, So you DO NOT NEED to normalize input before, but this will not make any bad effect.\nThen checks the validity of the input for being a valid Iranian national code. If it's a valid code, return true. Otherwise returns false.\nExample:\nconsole.log(this.isValid(2365478824));\n// Expected output: true\n\nconsole.log(this.isValid(7731689951));\n// Expected output: falseFor more information you can see the related part of code document about isValid method. Also for more examples, you can see the unit tests of the normalize method.\nValidators\nThere are different validators for reactive forms. You can use them in your forms for validating data related to Iran or Farsi language without any need for writing new code.\npersianNumbersValidator\nReactive form validator that checks form control value contains only persian numbers.\nAdding persianNumbersValidator to your code\nFirst you should add validator in your component:\nimport {persianNumbersValidator} from 'ngx-persian';\nThen you should add it to validators list of desired FormControl. That's it.\nYou can see the example usage in below GIF:\n\nStill have questions? see the related part of example app\nFor more information you can see the related part of code document about persianNumbersValidator. \nAlso for more examples, you can see the unit tests of the persianNumbersValidator.\npersianNumbersValidator\nReactive form validator that checks form control value contains only persian numbers.\nAdding  persianLettersValidator to your code\nFirst you should add validator in your component:\nimport {persianLettersValidator} from 'ngx-persian';\nReactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.\nThis validator gets an optional options parameter as isPersian method of PersianLetterService.\nFor validating only persian letters without any other character (default behavior), you can add validator to your FormControl like it:\npersianLettersValidator()\nYou can see the example usage in below GIF:\n\nFor validating only persian letters and whitespaces, you can add validator to your FormControl like it:\npersianLettersValidator({whitespaces: true})\nYou can see the example usage in below GIF:\n\nFor validating only persian letters and english digits, you can add validator to your FormControl like it:\npersianLettersValidator({enDigits: true})\nYou can see the example usage in below GIF:\n\nFor validating only persian letters and persian digits, you can add validator to your FormControl like it:\npersianLettersValidator({persianDigits: true})\nYou can see the example usage in below GIF:\n\nFor validating only persian letters and symbols, you can add validator to your FormControl like it:\npersianLettersValidator({symbols: true})\nYou can see the example usage in below GIF:\n\nYou can validate inputs with any combination of these options.\nStill have questions? see the related part of example app\nFor more information you can see the related part of code document about persianLettersValidator. \nAlso for more examples, you can see the unit tests of the persianLettersValidator.\nDirectives\nFor template-driven forms, we also provided Two directives those using above validator functions.\nRead code document of PersianLetterDirective or [code document of PersianNumbersDirective].(https://alihoseiny.github.io/ngx-persian/directives/PersianNumbersDirective.html)\nContribution\nWe want to keep this library fresh and useful for all Iranian developers. So we need your help for adding new features, fixing bugs and adding more documents.\nHow You can Help All Iranian Angular Developers?\nYou are wondering how you can contribute in this project? Here is a list of what you can do:\n\nYou did anything useful and special for Iranian apps? So you can add that in this library and save other developers time.\nYou think number of tests for some part of this library is not enough? So you can write more tests.\nDocuments are not enough? You can help us by adding more documents.\nCurrent code could be better? You can make this cleaner or faster.\n\nYou should follow these steps for contributing in this project:\n1. Getting the Repository\nFor contributing, first fork the repository. Then create your branch and start coding.\n2. Add Tests\nWe are following TDD guides for developing this library, So you SHOULD add tests first and then add your code.\n3. Write the Dock\nAll codes should have complete in-code document following JSDoc syntax. Plus you should re-generate the code document using compodoc.\nFor generating documents, you should run following command in the project directory:\nnpm run generate-docs\nAlso you should add some documents about how to using a feature in the README.md file.\n4. Create A Pull Request\nNow you are done and want to add your code. So come here and create a new pull request. Please make pull request message complete and useful. Also you should keep all commit messages in your branch meaningful and useful.\nThank you for your contribution and make life easier for Iranian Angular developers.\nThere is any problem?\nIf you have questions, find some bugs or need some features, you can open an issue and tell us. For some strange reasons this is not possible? so contact me by this email: salam@alihoseiny.ir.\nCitations\nI should say a thank you to developers of jalaali js and it's implementation in Type script: jalaali Helper in Typescript Because I used their code in Jalali services.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Mr Alihoseiny\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxPersianModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxPersianModule\n\n\n\ncluster_NgxPersianModule_declarations\n\n\n\ncluster_NgxPersianModule_exports\n\n\n\n\nEnNumPipe\n\nEnNumPipe\n\n\n\nNgxPersianModule\n\nNgxPersianModule\n\nNgxPersianModule -->\n\nEnNumPipe->NgxPersianModule\n\n\n\n\n\nFaNumPipe\n\nFaNumPipe\n\nNgxPersianModule -->\n\nFaNumPipe->NgxPersianModule\n\n\n\n\n\nIRCurrencyPipe\n\nIRCurrencyPipe\n\nNgxPersianModule -->\n\nIRCurrencyPipe->NgxPersianModule\n\n\n\n\n\nJdatePipe\n\nJdatePipe\n\nNgxPersianModule -->\n\nJdatePipe->NgxPersianModule\n\n\n\n\n\nNationalCodePipe\n\nNationalCodePipe\n\nNgxPersianModule -->\n\nNationalCodePipe->NgxPersianModule\n\n\n\n\n\nPersianLetterDirective\n\nPersianLetterDirective\n\nNgxPersianModule -->\n\nPersianLetterDirective->NgxPersianModule\n\n\n\n\n\nPersianNumbersDirective\n\nPersianNumbersDirective\n\nNgxPersianModule -->\n\nPersianNumbersDirective->NgxPersianModule\n\n\n\n\n\nEnNumPipe \n\nEnNumPipe \n\nEnNumPipe  -->\n\nNgxPersianModule->EnNumPipe \n\n\n\n\n\nFaNumPipe \n\nFaNumPipe \n\nFaNumPipe  -->\n\nNgxPersianModule->FaNumPipe \n\n\n\n\n\nIRCurrencyPipe \n\nIRCurrencyPipe \n\nIRCurrencyPipe  -->\n\nNgxPersianModule->IRCurrencyPipe \n\n\n\n\n\nJdatePipe \n\nJdatePipe \n\nJdatePipe  -->\n\nNgxPersianModule->JdatePipe \n\n\n\n\n\nNationalCodePipe \n\nNationalCodePipe \n\nNationalCodePipe  -->\n\nNgxPersianModule->NationalCodePipe \n\n\n\n\n\nPersianLetterDirective \n\nPersianLetterDirective \n\nPersianLetterDirective  -->\n\nNgxPersianModule->PersianLetterDirective \n\n\n\n\n\nPersianNumbersDirective \n\nPersianNumbersDirective \n\nPersianNumbersDirective  -->\n\nNgxPersianModule->PersianNumbersDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    5 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MobileCodes   (projects/.../mobile-phone-number.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MobileCodes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],\n  mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],\n  talia: ['0932'],\n  rightel: ['0920', '0921', '0922'],\n  spadan: ['0931'],\n  tkc: ['0934'],\n  shatel: ['099810', '099811', '099812'],\n  aptel: ['099910', '099911', '099913'],\n  azartel: ['099914'],\n  samantel: ['099996', '099997', '099998', '099999'],\n  lotustel: ['09990'],\n  anarestan: ['09944']\n}\n                        \n                    \n\n                \n                    \n                        A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
