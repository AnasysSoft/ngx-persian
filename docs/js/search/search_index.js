var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/pipes/EnNumPipe.html",[0,1.058,1,1.557]],["body/pipes/EnNumPipe.html",[0,1.245,1,2.354,2,1.832,3,0.425,4,0.486,5,0.425,6,0.331,7,3.003,8,0.888,9,2.932,10,1.544,11,2.252,12,2.932,13,2.384,14,1.931,15,3.857,16,0.037,17,4.497,18,1.832,19,0.625,20,1.031,21,2.283,22,2.932,23,1.87,24,0.691,25,3.629,26,0.619,27,0.367,28,0.551,29,1.07,30,3.857,31,3.328,32,3.328,33,3.857,34,2.384,35,2.932,36,0.849,37,1.599,38,3.857,39,1.091,40,2.932,41,0.849,42,2.134,43,2.283,44,2.283,45,2.283,46,0.486,47,0.311,48,1.367,49,3.003,50,1.203,51,1.031,52,2.591,53,3.629,54,0.021,55,0.027,56,0.021]],["title/pipes/FaNumPipe.html",[0,1.058,57,1.557]],["body/pipes/FaNumPipe.html",[0,1.245,2,1.832,3,0.425,4,0.486,5,0.425,6,0.331,8,0.888,9,2.932,10,1.544,11,2.384,13,2.252,14,1.931,16,0.037,18,1.832,19,0.625,20,1.031,21,2.283,22,2.932,23,1.87,24,0.691,26,0.619,27,0.367,28,0.551,29,0.981,34,1.931,35,2.932,36,0.849,37,1.599,38,3.857,39,1.091,40,2.932,41,0.849,42,2.134,43,2.283,44,2.283,45,2.283,46,0.486,47,0.311,48,1.367,49,3.003,50,1.203,51,1.031,52,2.591,54,0.021,55,0.027,56,0.021,57,2.354,58,3.003,59,3.419,60,3.857,61,4.497,62,1.189,63,3.629,64,4.661,65,3.629]],["title/pipes/IRCurrencyPipe.html",[0,1.058,66,1.731]],["body/pipes/IRCurrencyPipe.html",[0,1.803,2,1.496,3,0.347,4,0.397,5,0.347,6,0.289,8,0.776,14,1.688,16,0.037,18,1.496,19,0.546,20,0.842,21,1.864,22,2.562,23,1.874,24,0.564,26,0.505,27,0.588,28,0.45,29,1.034,34,1.688,36,0.693,37,1.397,39,0.953,40,2.562,41,0.693,45,1.864,46,0.546,47,0.254,48,1.116,50,0.765,51,1.323,54,0.017,55,0.024,56,0.017,62,1.149,66,2.286,67,2.115,68,3.371,69,4.494,70,2.654,71,3.972,72,4.073,73,2.908,74,4.073,75,3.852,76,3.323,77,2.613,78,5.013,79,4.073,80,1.86,81,4.073,82,4.073,83,3.371,84,5.013,85,5.013,86,2.077,87,4.073,88,5.255,89,2.963,90,2.057,91,4.073,92,4.073,93,2.963,94,4.073,95,2.452,96,2.115,97,2.452,98,2.452,99,2.963,100,2.963,101,2.963,102,1.496,103,1.228,104,2.452,105,2.115,106,2.963,107,2.963]],["title/classes/InvalidJalaliDateError.html",[47,0.264,108,1.731]],["body/classes/InvalidJalaliDateError.html",[3,0.496,4,0.568,5,0.496,6,0.365,16,0.037,19,0.568,24,0.807,26,0.722,27,0.428,28,0.643,46,0.568,47,0.363,54,0.025,55,0.03,56,0.025,77,2.882,108,3.101,109,2.378,110,3.505,111,3.475,112,2.139,113,3.23,114,4.236,115,2.665,116,2.665,117,2.665,118,2.665,119,2.665,120,2.665,121,2.665,122,2.665,123,2.665,124,3.23,125,3.23,126,2.665,127,2.665,128,2.665,129,2.378,130,2.665,131,2.139]],["title/classes/InvalidMobileOperatorError.html",[47,0.264,132,1.94]],["body/classes/InvalidMobileOperatorError.html",[3,0.496,4,0.568,5,0.496,6,0.365,16,0.037,19,0.568,24,0.807,26,0.722,27,0.428,28,0.643,46,0.568,47,0.363,54,0.025,55,0.03,56,0.025,62,0.896,77,2.882,109,2.378,111,3.475,112,2.139,113,3.23,115,2.665,116,2.665,117,2.665,118,2.665,119,2.665,120,2.665,121,2.665,122,2.665,123,2.665,124,3.23,125,3.23,126,2.665,127,2.665,128,2.665,132,3.475,133,3.505,134,4.236,135,2.665,136,4.236]],["title/classes/InvalidMobilePhoneNumberError.html",[47,0.264,137,1.94]],["body/classes/InvalidMobilePhoneNumberError.html",[3,0.488,4,0.558,5,0.488,6,0.361,8,0.793,16,0.037,19,0.558,24,0.793,26,0.71,27,0.421,28,0.632,46,0.558,47,0.357,54,0.024,55,0.03,56,0.024,62,1.075,77,2.852,102,2.102,109,2.337,111,3.592,112,2.102,113,3.196,115,2.619,116,2.619,117,2.619,118,2.619,119,2.619,120,2.619,121,2.619,122,2.619,123,2.619,124,3.196,125,3.196,126,2.619,127,2.619,128,2.619,137,3.449,138,3.445,139,2.337,140,2.565,141,2.852,142,4.163]],["title/classes/InvalidServiceInputError.html",[47,0.264,143,1.94]],["body/classes/InvalidServiceInputError.html",[3,0.484,4,0.554,5,0.484,6,0.359,8,0.787,16,0.037,19,0.554,24,0.787,26,0.705,27,0.418,28,0.627,29,1.041,37,1.418,46,0.554,47,0.354,54,0.024,55,0.03,56,0.024,77,2.839,102,2.087,109,2.32,111,3.583,112,2.087,113,3.182,115,2.6,116,2.6,117,2.6,118,2.6,119,2.6,120,2.6,121,2.6,122,2.6,123,2.6,124,3.182,125,3.182,126,2.6,127,2.6,128,2.6,129,2.32,141,2.32,143,3.438,144,3.42,145,2.554,146,2.087,147,4.133,148,3.42]],["title/injectables/JalaliDateCalculatorService.html",[149,0.876,150,2.202]],["body/injectables/JalaliDateCalculatorService.html",[3,0.151,4,0.482,5,0.151,6,0.346,8,0.855,11,0.891,16,0.037,19,0.621,20,1.104,24,0.906,26,0.79,27,0.468,28,0.703,31,1.536,36,1.2,39,0.842,41,0.301,46,0.173,47,0.237,50,1.065,51,1.276,54,0.016,55,0.013,56,0.008,62,1.296,86,1.147,103,1.147,108,0.723,112,0.65,130,3.625,131,3.029,141,0.723,146,1.633,148,3.413,149,0.611,150,1.536,151,0.65,152,3.476,153,1.066,154,3.206,155,4.583,156,2.151,157,1.78,158,1.086,159,1.207,160,0.301,161,1.086,162,2.151,163,2.035,164,2.151,165,2.151,166,2.151,167,2.151,168,2.151,169,2.151,170,2.151,171,2.151,172,2.151,173,1.288,174,2.263,175,1.288,176,1.288,177,3.577,178,3.413,179,1.288,180,3.716,181,1.861,182,2.568,183,1.288,184,3.716,185,3.398,186,4.192,187,3.413,188,4.301,189,2.976,190,3.063,191,2.151,192,1.288,193,2.775,194,2.151,195,2.263,196,2.151,197,2.775,198,3.606,199,1.78,200,3.234,201,2.151,202,1.288,203,2.151,204,2.976,205,3.309,206,2.769,207,2.151,208,1.288,209,2.151,210,2.292,211,3.887,212,0.982,213,2.151,214,2.151,215,1.288,216,1.78,217,3.234,218,3.887,219,3.234,220,2.151,221,1.288,222,2.151,223,2.151,224,1.288,225,1.78,226,3.234,227,2.151,228,1.78,229,2.035,230,2.151,231,2.151,232,2.151,233,2.151,234,2.151,235,3.234,236,2.151,237,2.151,238,2.151,239,2.151,240,2.151,241,2.676,242,2.151,243,2.151,244,2.151,245,1.288,246,1.78,247,2.151,248,1.288,249,1.207,250,1.78,251,2.151,252,3.597,253,1.78,254,3.234,255,1.288,256,0.81,257,0.81,258,1.066,259,1.066,260,1.288,261,1.288,262,0.65,263,0.588,264,1.288,265,2.309,266,3.234,267,1.288,268,2.787,269,3.234,270,1.288,271,1.78,272,2.151,273,2.769,274,1.288,275,2.292,276,1.288,277,2.769,278,2.719,279,1.288,280,1.288,281,1.288,282,2.151,283,1.742,284,1.742,285,1.288,286,1.288,287,1.288,288,1.78,289,1.555,290,1.288,291,2.151,292,1.288,293,1.288,294,1.288,295,1.288,296,1.288,297,1.288,298,1.288,299,1.288,300,1.288,301,1.288,302,1.288,303,1.288,304,1.288,305,2.151,306,1.288,307,2.151,308,1.288,309,1.288,310,1.288,311,1.288,312,1.288,313,1.288,314,1.288,315,1.288,316,1.288,317,1.288,318,1.066,319,1.288,320,1.288,321,1.288,322,1.288,323,2.151,324,1.288,325,2.151,326,1.288,327,1.288,328,1.288,329,1.288,330,1.288,331,2.769]],["title/injectables/JalaliDateValidatorService.html",[149,0.876,174,1.94]],["body/injectables/JalaliDateValidatorService.html",[3,0.236,4,0.27,5,0.236,6,0.384,8,0.94,16,0.037,19,0.662,20,1.187,24,1.014,26,0.842,27,0.499,28,0.749,29,0.711,31,2.983,36,1.267,39,0.874,41,0.471,46,0.27,47,0.172,50,1.079,51,1.279,54,0.012,55,0.018,56,0.012,62,1.291,70,2.11,80,0.919,86,1.547,105,1.437,108,1.13,112,1.885,130,3.622,131,2.944,141,2.346,145,2.11,149,0.874,151,1.016,152,3.866,155,2.545,158,1.553,159,2.664,160,0.471,161,1.553,174,1.935,177,4.692,178,4.086,184,4.319,185,3.635,186,4.011,187,4.214,188,3.458,189,3.725,190,1.935,197,3.635,198,2.196,204,2.545,205,2.196,210,2.545,212,0.919,216,2.545,225,1.666,228,2.545,241,2.545,246,3.089,250,3.458,253,1.666,256,1.266,257,1.266,258,1.666,259,1.666,262,1.016,263,0.919,332,1.666,333,3.076,334,1.935,335,2.545,336,2.095,337,3.076,338,3.076,339,2.545,340,2.196,341,2.196,342,3.076,343,1.727,344,2.986,345,3.733,346,3.733,347,3.076,348,3.076,349,3.076,350,3.076,351,3.076,352,3.076,353,3.076,354,3.076,355,2.013,356,2.013,357,2.346,358,2.013,359,2.571,360,3.076,361,2.013,362,2.095,363,1.553,364,2.013,365,2.013,366,1.885,367,3.733,368,1.266,369,2.545,370,2.013,371,3.733,372,2.013,373,1.437,374,1.666,375,2.013,376,2.013,377,2.013,378,3.076,379,2.013,380,3.076,381,3.076,382,3.076,383,2.013,384,2.013,385,2.013,386,2.013,387,3.733,388,3.733,389,2.013,390,2.013,391,2.013,392,2.013,393,2.013,394,2.013]],["title/injectables/MobilePhoneNumberService.html",[149,0.876,395,2.202]],["body/injectables/MobilePhoneNumberService.html",[3,0.205,4,0.234,5,0.205,6,0.299,8,0.803,9,1.734,10,1.332,11,1.605,13,2.284,16,0.037,19,0.746,20,1.101,23,1.827,24,0.738,26,0.661,27,0.391,28,0.588,29,0.333,34,2.344,36,1.137,39,0.799,41,0.409,46,0.457,47,0.15,50,1.39,51,1.198,54,0.02,55,0.016,56,0.01,62,0.819,70,0.882,80,1.258,86,1.856,96,2.765,102,1.391,103,1.414,129,1.547,132,2.147,135,3.502,137,2.147,139,2.366,140,2.719,141,2.632,145,1.956,146,1.956,149,0.783,151,0.882,160,0.409,181,1.414,229,2.818,262,0.882,263,0.798,268,2.174,334,1.734,336,1.547,340,1.967,357,2.366,359,2.367,362,2.632,363,1.391,366,1.956,368,1.734,369,2.281,395,1.967,396,2.652,397,0.981,398,2.756,399,2.281,400,3.009,401,3.412,402,2.756,403,3.412,404,2.756,405,2.756,406,4.688,407,1.747,408,2.824,409,2.765,410,2.756,411,1.734,412,3.205,413,5.615,414,2.756,415,1.446,416,3.873,417,3.198,418,2.756,419,3.873,420,2.174,421,2.281,422,2.756,423,2.756,424,2.756,425,2.756,426,1.915,427,2.756,428,2.756,429,2.756,430,1.747,431,3.873,432,2.756,433,1.747,434,2.281,435,2.756,436,1.747,437,1.747,438,2.436,439,1.391,440,0.981,441,1.446,442,1.967,443,1.967,444,1.967,445,1.967,446,1.967,447,1.967,448,1.967,449,1.967,450,1.967,451,1.967,452,1.967,453,1.967,454,1.446,455,1.446,456,1.446,457,1.446,458,1.446,459,1.446,460,1.446,461,1.446,462,1.446,463,1.446,464,1.446,465,1.446,466,1.446,467,1.446,468,1.446,469,1.446,470,1.446,471,1.446,472,1.446,473,1.446,474,1.446,475,1.446,476,1.446,477,1.446,478,1.446,479,1.446,480,1.446,481,1.446,482,1.446,483,1.446,484,1.446,485,1.446,486,1.446,487,1.446,488,1.446,489,1.446,490,1.446,491,1.446,492,1.446,493,1.446,494,1.446,495,1.446,496,1.446,497,1.446,498,1.446,499,1.446,500,1.446,501,1.446,502,1.446,503,2.765,504,1.747,505,1.747,506,1.747,507,1.747,508,2.756,509,1.747,510,1.747,511,1.747,512,1.747,513,1.747,514,1.747,515,1.747,516,1.747,517,1.747,518,1.747]],["title/pipes/NationalCodePipe.html",[0,1.058,519,1.731]],["body/pipes/NationalCodePipe.html",[0,1.25,2,1.84,3,0.427,4,0.488,5,0.427,6,0.332,8,0.89,14,1.937,16,0.037,18,1.84,19,0.626,20,1.035,21,2.292,22,2.94,23,1.829,24,0.694,26,0.621,27,0.368,28,0.553,29,0.983,34,1.937,36,0.853,39,0.853,40,2.94,41,0.853,45,2.292,46,0.488,47,0.312,48,1.373,50,0.941,51,1.035,52,2.602,54,0.021,55,0.027,56,0.021,62,1.239,68,3.868,90,2.36,102,1.84,103,1.51,104,3.016,105,2.602,229,3.246,284,2.94,289,2.046,420,2.046,421,4.505,519,2.624,520,3.016,521,4.847,522,4.27,523,4.674,524,4.674,525,3.644,526,4.674,527,4.674,528,3.016,529,3.644,530,3.644,531,3.644]],["title/modules/NgxPersianModule.html",[532,1.94,533,1.94]],["body/modules/NgxPersianModule.html",[1,3.056,3,0.398,4,0.455,5,0.398,6,0.241,16,0.037,39,1.322,41,0.795,46,0.455,47,0.291,54,0.02,55,0.026,56,0.02,57,3.056,66,3.397,519,3.397,532,2.136,533,3.935,534,2.424,535,2.136,536,2.81,537,3.561,538,2.81,539,2.136,540,4.128,541,2.81,542,2.81,543,2.81,544,3.056,545,3.056,546,3.695,547,2.81,548,2.424,549,3.396,550,3.396,551,3.695,552,3.396,553,1.906,554,3.396,555,3.396,556,3.396,557,3.396,558,3.396]],["title/interfaces/PLOptions.html",[559,1.278,560,1.557]],["body/interfaces/PLOptions.html",[3,0.255,4,0.292,5,0.255,6,0.154,8,0.414,10,1.634,12,1.369,13,0.902,16,0.037,23,1.358,27,0.439,28,0.792,29,1.086,34,1.352,35,1.369,36,1.09,37,1.83,39,0.916,41,0.509,42,0.902,44,1.369,46,0.437,47,0.186,48,0.82,50,1.262,51,1.389,54,0.033,55,0.019,56,0.013,62,0.92,80,1.985,86,1.801,90,2.469,103,1.352,145,1.647,146,1.976,149,0.927,158,1.099,159,2.614,160,0.509,161,1.647,181,1.93,182,1.553,193,1.553,212,0.993,262,1.099,263,0.993,268,1.831,334,3.076,343,1.221,344,2.462,357,2.928,359,2.852,362,2.197,363,1.647,366,1.099,368,1.369,411,1.369,417,1.553,420,1.221,426,1.221,439,1.099,440,2.197,559,1.622,560,2.195,561,1.369,562,1.221,563,1.553,564,2.44,565,2.821,566,2.329,567,3.239,568,2.7,569,2.329,570,3.854,571,3.854,572,4.196,573,3.598,574,1.647,575,1.8,576,1.553,577,1.8,578,3.19,579,1.553,580,1.221,581,1.8,582,1.8,583,1.8,584,1.8,585,1.8,586,1.8,587,1.8,588,2.7,589,1.8,590,1.8,591,2.794,592,3.104,593,1.8,594,1.8,595,1.8,596,3.239,597,3.598,598,1.8,599,1.8,600,1.8,601,1.8,602,1.8,603,1.8,604,1.8,605,1.8,606,1.8,607,1.8,608,1.8,609,2.329,610,1.8,611,1.8,612,1.369,613,1.8,614,1.8,615,1.553,616,3.239,617,1.831,618,1.553,619,1.369,620,1.8,621,2.7,622,1.8,623,1.8,624,1.553,625,2.329,626,1.8,627,1.553,628,2.329,629,1.369,630,1.553,631,1.553,632,1.8,633,1.8,634,1.553,635,2.7,636,2.7,637,1.8,638,3.239,639,1.8,640,1.8]],["title/directives/PersianLetterDirective.html",[544,1.557,641,1.731]],["body/directives/PersianLetterDirective.html",[3,0.344,4,0.394,5,0.344,6,0.329,8,0.559,10,0.835,14,1.217,16,0.037,18,1.483,19,0.394,20,1.15,23,1.264,24,0.771,26,0.501,27,0.468,28,0.446,29,0.998,36,0.687,37,1.713,39,1.169,41,0.687,43,1.848,46,0.543,47,0.347,48,1.746,50,1.289,51,1.15,54,0.017,55,0.024,56,0.017,129,2.601,160,0.687,163,3.491,181,1.678,212,1.849,249,3.04,336,2.601,503,2.891,539,2.915,544,2.933,545,2.522,553,1.649,560,2.645,565,2.34,617,3.04,641,2.601,642,2.915,643,2.097,644,3.308,645,4.336,646,3.835,647,3.296,648,3.351,649,2.891,650,2.891,651,3.835,652,4.133,653,3.835,654,3.835,655,3.491,656,3.351,657,3.296,658,2.937,659,3.835,660,4.336,661,2.937,662,3.835,663,3.308,664,2.431,665,3.835,666,3.835,667,2.097,668,2.431,669,2.431,670,3.351,671,2.431,672,2.431,673,2.431]],["title/injectables/PersianLetterService.html",[149,0.876,580,1.731]],["body/injectables/PersianLetterService.html",[3,0.186,4,0.212,5,0.186,6,0.344,8,0.302,10,1.654,12,1.605,13,1.057,16,0.037,19,0.538,20,0.725,23,1.72,24,0.893,26,0.685,27,0.456,28,0.61,29,1.128,34,1.519,35,1.605,36,1.263,37,1.906,39,0.749,41,0.371,42,0.657,44,0.997,46,0.342,47,0.136,48,0.597,50,1.108,51,1.219,54,0.033,55,0.015,56,0.009,59,0.997,62,0.992,70,1.851,80,1.834,86,1.778,90,2.613,103,1.057,145,1.288,146,1.616,149,0.725,151,0.801,154,1.132,158,1.288,159,3.03,160,0.371,161,1.288,181,1.869,182,1.821,193,1.821,212,1.165,262,0.801,263,0.724,268,1.432,334,3.196,343,0.89,344,3.047,357,3.092,359,2.278,362,2.533,363,1.851,366,1.288,368,1.605,411,1.605,417,1.821,420,0.89,426,1.432,439,1.288,440,2.409,559,1.057,560,2.445,562,2.718,563,1.132,564,2.058,565,2.883,566,1.132,567,2.648,568,1.312,569,1.132,570,3.034,571,3.034,572,3.883,573,2.111,574,1.288,575,1.312,576,1.132,577,1.312,578,3.395,579,1.132,580,1.432,581,2.648,582,2.111,583,2.111,584,2.111,585,2.111,586,2.111,587,2.648,588,3.034,589,2.648,590,2.111,591,3.064,592,3.35,593,2.111,594,2.111,595,2.111,596,3.552,597,3.883,598,2.111,599,2.111,600,2.111,601,2.111,602,1.312,603,1.312,604,1.312,605,1.312,606,1.312,607,1.312,608,1.312,609,1.821,610,1.312,611,1.312,612,0.997,613,2.111,614,2.111,615,1.821,616,3.552,617,1.796,618,1.821,619,1.605,620,2.111,621,3.034,622,2.111,623,2.111,624,1.821,625,1.821,626,1.312,627,1.132,628,2.617,629,1.605,630,1.132,631,1.132,632,1.312,633,1.312,634,1.132,635,3.034,636,3.034,637,2.111,638,3.552,639,2.111,640,2.111,674,2.111,675,2.551,676,1.821,677,1.821,678,1.586,679,1.586,680,1.586,681,1.132,682,1.586,683,1.132,684,1.586,685,1.586,686,1.586,687,1.586,688,1.586]],["title/injectables/PersianNumberService.html",[42,1.278,149,0.876]],["body/injectables/PersianNumberService.html",[3,0.239,4,0.273,5,0.239,6,0.379,10,1.65,11,2.214,13,1.559,16,0.037,19,0.639,20,0.883,23,1.858,24,0.997,26,0.814,27,0.529,28,0.724,29,1.163,36,1.197,37,1.912,39,0.881,41,0.477,42,1.287,46,0.273,47,0.175,48,0.769,50,1.32,51,1.287,54,0.012,55,0.018,56,0.012,59,2.647,62,1.108,70,1.9,86,1.977,90,2.409,102,1.03,103,1.287,143,1.954,145,1.03,149,0.883,151,1.03,154,3.004,159,3.092,160,0.477,161,1.569,190,1.954,262,1.03,263,0.931,268,1.744,271,2.571,275,2.571,278,1.954,283,1.954,284,1.954,289,1.744,343,1.145,344,3.295,357,1.744,359,2.124,362,2.362,363,2.124,366,2.124,397,1.145,411,1.954,415,1.688,420,1.744,528,1.688,562,2.999,564,1.744,574,1.569,578,3.001,579,2.218,591,1.456,592,1.456,609,2.218,612,1.283,615,2.218,617,1.145,618,2.218,619,1.954,624,2.218,625,2.218,627,1.456,628,2.218,629,1.954,630,1.456,631,1.456,634,1.456,674,2.571,676,2.218,677,2.218,681,2.218,683,2.218,689,3.763,690,3.763,691,3.763,692,3.107,693,3.107,694,2.04,695,3.107,696,2.04,697,2.04,698,2.04,699,2.04,700,2.04,701,3.107,702,2.04,703,4.207,704,4.207,705,2.04,706,3.107,707,3.107,708,3.107,709,3.107,710,3.107,711,3.107,712,3.107,713,3.107,714,2.04,715,2.04,716,3.107,717,2.04,718,2.04,719,2.04,720,2.04,721,2.04,722,2.04,723,2.04,724,2.04,725,2.04,726,2.04]],["title/directives/PersianNumbersDirective.html",[545,1.557,641,1.731]],["body/directives/PersianNumbersDirective.html",[3,0.357,4,0.408,5,0.357,6,0.295,8,0.58,10,0.866,14,1.263,16,0.037,18,1.539,19,0.408,20,1.18,23,1.297,24,0.58,26,0.52,27,0.42,28,0.463,29,0.966,36,0.713,37,1.74,39,1.187,41,0.713,43,1.917,46,0.557,47,0.356,48,1.78,50,1.31,51,1.18,54,0.018,55,0.024,56,0.018,129,2.652,160,0.713,163,3.526,181,1.263,212,1.392,249,3.075,336,2.652,503,2.965,539,2.972,544,2.561,545,2.88,553,1.711,560,2.385,565,2.097,617,3.075,641,2.652,642,2.613,643,2.176,644,3.373,645,4.198,646,3.909,647,3.446,648,2.522,649,2.176,650,2.176,651,3.909,652,4.198,653,3.909,654,3.909,655,3.339,656,3.437,657,2.972,659,3.909,660,4.393,662,3.909,663,3.373,664,2.522,665,3.909,666,3.909,667,2.176,668,2.522,669,2.522,670,3.437,671,2.522,672,2.522,673,2.522,727,3.048]],["title/interfaces/PersianService.html",[559,1.278,574,1.557]],["body/interfaces/PersianService.html",[3,0.452,4,0.517,5,0.452,6,0.395,8,0.735,10,1.097,16,0.036,19,0.71,20,1.377,23,1.915,24,1.009,26,0.904,27,0.535,28,0.804,29,1.009,36,1.24,46,0.517,54,0.023,55,0.028,56,0.023,62,1.121,160,0.903,359,2.807,373,2.756,426,2.167,559,2.009,561,2.428,562,3.121,564,2.721,566,2.756,574,2.448,629,3.05,676,3.461,677,3.461,681,3.461,683,3.461,728,3.194,729,3.194,730,3.86,731,3.86,732,3.86,733,3.86,734,3.86,735,3.86]],["title/interfaces/SimpleDateInterface.html",[195,1.94,559,1.278]],["body/interfaces/SimpleDateInterface.html",[3,0.496,4,0.568,5,0.496,6,0.301,8,0.807,11,2.127,16,0.036,27,0.558,46,0.568,54,0.025,55,0.03,56,0.025,62,1.3,131,2.139,160,0.991,161,2.592,186,4.2,195,3.23,197,4.2,198,4.2,205,3.024,559,2.127,561,2.665,736,3.505,737,4.236,738,4.236,739,4.236,740,4.236,741,4.236]],["title/coverage.html",[742,3.464]],["body/coverage.html",[0,1.756,1,1.573,5,0.365,6,0.443,7,2.578,16,0.037,27,0.315,42,1.291,47,0.458,54,0.018,55,0.025,56,0.018,57,1.573,58,2.578,66,1.749,67,2.224,86,1.747,103,1.291,108,1.749,110,2.578,131,2.128,132,1.96,133,2.578,137,1.96,138,2.578,140,2.128,143,1.96,144,2.578,149,1.52,150,2.224,152,3.009,153,2.578,174,1.96,195,1.96,249,3.002,256,1.96,257,1.96,288,4.905,318,2.578,332,2.578,395,2.224,396,2.652,397,2.682,409,2.224,519,1.749,520,2.578,544,1.573,545,1.573,559,1.98,560,1.573,562,2.873,563,3.009,574,1.573,580,1.749,641,2.366,642,3.22,643,3.009,647,1.96,655,1.96,728,2.578,736,2.578,742,2.578,743,2.224,744,3.115,745,3.115,746,3.954,747,5.875,748,2.578,749,4.215,750,4.215,751,4.215,752,3.115,753,3.115,754,3.115,755,3.115,756,3.115,757,3.115,758,3.115,759,3.115,760,4.215,761,4.215,762,3.115,763,3.115,764,3.115,765,3.115,766,3.115,767,3.115,768,3.115,769,3.115,770,3.115,771,3.115,772,3.115,773,3.488,774,3.115,775,3.115]],["title/dependencies.html",[535,2.329,776,2.586]],["body/dependencies.html",[16,0.037,41,1.022,54,0.026,55,0.031,56,0.026,95,3.614,535,2.747,667,3.118,777,4.367,778,6.138,779,4.367,780,5.229,781,4.327,782,4.367,783,4.367,784,4.367,785,4.367,786,4.367,787,4.367,788,4.367,789,4.367,790,4.367,791,4.367,792,4.367,793,4.367,794,4.367]],["title/miscellaneous/enumerations.html",[795,1.306,796,3.064]],["body/miscellaneous/enumerations.html",[6,0.343,10,1.089,13,1.588,16,0.038,19,0.647,29,1.189,54,0.023,55,0.028,56,0.023,67,2.737,71,2.737,75,3.172,76,2.737,96,2.737,97,3.995,98,3.172,139,2.152,140,2.437,160,0.897,396,2.412,397,2.71,400,2.737,412,3.995,438,3.446,439,1.936,440,2.152,441,3.172,442,2.737,443,2.737,444,2.737,445,2.737,446,2.737,447,2.737,448,2.737,449,2.737,450,2.737,451,2.737,452,2.737,453,2.737,795,1.936,796,3.172,797,3.834,798,3.172]],["title/miscellaneous/functions.html",[795,1.306,799,3.064]],["body/miscellaneous/functions.html",[3,0.407,6,0.322,8,0.661,10,1.287,11,1.877,14,1.877,16,0.036,19,0.743,26,0.945,28,0.841,29,0.863,32,2.479,36,1.331,42,1.439,50,0.896,54,0.03,55,0.027,56,0.02,62,1.13,80,1.586,90,2.288,146,1.753,160,0.813,163,2.85,212,1.586,249,2.831,256,3.172,257,3.172,265,2.479,289,2.543,366,2.288,434,2.874,440,1.949,521,2.874,564,1.949,565,2.546,578,2.184,580,2.831,642,2.184,647,2.85,655,2.85,657,2.184,663,3.234,746,2.874,748,3.749,773,4.173,795,1.753,799,2.874,800,5.043,801,4.531,802,3.472,803,5.544,804,4.531,805,3.749,806,3.472,807,5.043,808,3.472,809,3.472,810,3.472,811,3.472,812,3.472,813,3.472,814,3.472,815,4.531,816,4.531,817,3.472,818,3.472,819,3.749,820,4.423,821,3.472,822,2.874,823,4.531,824,3.472]],["title/index.html",[160,0.605,825,1.846,826,2.14]],["body/index.html",[0,1.999,1,2.236,2,2.565,9,2.401,10,1.692,11,2.105,12,1.698,13,2.105,14,1.995,15,3.158,16,0.03,17,3.158,19,0.362,27,0.273,30,2.233,32,2.725,33,2.233,34,2.185,37,0.926,39,1.127,54,0.016,55,0.022,56,0.016,57,2.236,59,1.698,60,3.158,61,3.158,62,0.807,69,3.158,71,1.927,73,3.437,76,1.927,80,1.743,83,3.984,130,2.401,131,2.431,135,1.698,139,1.515,140,1.927,157,2.233,158,2.236,180,3.158,181,1.581,185,1.927,199,2.233,229,3.317,263,1.232,265,3.626,278,1.698,283,1.698,335,2.233,336,2.486,339,3.664,340,3.626,341,2.725,343,2.142,373,2.725,374,2.233,399,3.158,400,1.927,439,1.927,522,2.233,532,3.317,537,2.725,551,3.158,553,1.515,565,1.927,569,2.725,576,1.927,612,1.698,619,2.401,644,2.725,649,1.927,650,1.927,657,2.401,729,2.233,743,1.927,805,2.233,819,2.233,820,2.233,822,3.158,825,1.927,827,2.699,828,2.699,829,2.699,830,2.699,831,2.699,832,3.817,833,2.699,834,2.699,835,2.699,836,2.699,837,2.233,838,5.273,839,3.817,840,2.699,841,3.817,842,2.699,843,2.699,844,2.699,845,4.428,846,2.699,847,4.428,848,3.817,849,3.817,850,3.817,851,3.817,852,5.079,853,2.699,854,2.699,855,2.699,856,2.699,857,2.699,858,4.428,859,2.699,860,2.699,861,5.273,862,3.817,863,3.817,864,3.817,865,3.817,866,3.817,867,3.817,868,3.817,869,3.817,870,2.699,871,2.699,872,2.699,873,2.699,874,2.699,875,3.817,876,2.699,877,3.817,878,3.817,879,2.699,880,2.699]],["title/license.html",[825,1.846,826,2.14,881,2.14]],["body/license.html",[16,0.029,54,0.023,55,0.029,56,0.023,73,2.768,158,2.455,341,3.792,363,1.958,548,2.768,743,2.768,837,3.209,881,3.209,882,3.877,883,5.311,884,3.877,885,3.877,886,3.877,887,3.877,888,4.862,889,3.877,890,3.877,891,3.877,892,3.877,893,3.877,894,3.877,895,4.862,896,6.058,897,3.877,898,3.877,899,3.877,900,3.877,901,4.862,902,3.877,903,3.877,904,3.877,905,3.877,906,3.877,907,3.877,908,3.877,909,3.877,910,3.877,911,4.862,912,3.877,913,3.877,914,3.877,915,3.877,916,3.877,917,3.877,918,4.862,919,4.862,920,3.877,921,3.877,922,3.877,923,3.877,924,3.877,925,3.877,926,3.877,927,3.877,928,3.877,929,3.877,930,3.877,931,3.877,932,3.877,933,3.877,934,3.877,935,3.877,936,3.877,937,3.877,938,3.877,939,3.877,940,3.877,941,3.877,942,3.877,943,3.877,944,3.877,945,3.877,946,3.877,947,3.877]],["title/modules.html",[534,2.989]],["body/modules.html",[16,0.033,54,0.028,55,0.033,56,0.028,533,3.045,534,3.456,781,4.006,948,4.841,949,4.841,950,4.841]],["title/overview.html",[951,3.464]],["body/overview.html",[1,2.987,2,1.923,16,0.036,54,0.022,55,0.028,56,0.022,57,2.987,66,3.32,109,2.137,151,1.923,190,2.395,278,2.395,283,2.395,284,3.024,289,2.137,519,3.32,532,3.024,533,3.958,535,2.395,536,3.151,537,2.719,538,3.151,539,2.395,540,3.151,541,3.151,542,3.151,543,3.151,544,2.987,545,2.987,546,3.978,547,3.151,548,2.719,553,2.137,561,2.395,951,3.151]],["title/miscellaneous/variables.html",[795,1.306,952,3.064]],["body/miscellaneous/variables.html",[6,0.278,16,0.034,27,0.395,29,0.745,54,0.023,55,0.029,56,0.023,70,1.976,135,2.462,139,2.745,140,2.469,160,0.916,181,2.026,396,2.462,397,2.745,408,3.238,409,3.491,426,2.197,438,2.794,439,1.976,442,2.794,443,2.794,444,2.794,445,2.794,446,2.794,447,2.794,448,2.794,449,2.794,450,2.794,451,2.794,452,2.794,453,2.794,454,3.238,455,3.238,456,3.238,457,3.238,458,3.238,459,3.238,460,3.238,461,3.238,462,3.238,463,3.238,464,3.238,465,3.238,466,3.238,467,3.238,468,3.238,469,3.238,470,3.238,471,3.238,472,3.238,473,3.238,474,3.238,475,3.238,476,3.238,477,3.238,478,3.238,479,3.238,480,3.238,481,3.238,482,3.238,483,3.238,484,3.238,485,3.238,486,3.238,487,3.238,488,3.238,489,3.238,490,3.238,491,3.238,492,3.238,493,3.238,494,3.238,495,3.238,496,3.238,497,3.238,498,3.238,499,3.238,500,3.238,501,3.238,502,3.238,795,1.976,798,3.238,952,3.238]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":86,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{}}}],["0.14.2",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["0.8.26",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["0/2",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["001",{"_index":526,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["0901",{"_index":458,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0902",{"_index":459,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0903",{"_index":460,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0904",{"_index":461,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0905",{"_index":462,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0910",{"_index":471,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0911",{"_index":472,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0912",{"_index":473,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0913",{"_index":474,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0914",{"_index":475,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0915",{"_index":476,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0916",{"_index":477,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0917",{"_index":478,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0918",{"_index":479,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0919",{"_index":480,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0920",{"_index":485,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0921",{"_index":486,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0922",{"_index":487,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0930",{"_index":463,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0931",{"_index":488,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0932",{"_index":484,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0933",{"_index":464,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0934",{"_index":489,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0935",{"_index":465,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0936",{"_index":466,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0937",{"_index":467,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0938",{"_index":468,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0939",{"_index":469,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0941",{"_index":470,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0990",{"_index":481,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0991",{"_index":482,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["0992",{"_index":483,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["09944",{"_index":502,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099810",{"_index":490,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099811",{"_index":491,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099812",{"_index":492,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["09990",{"_index":501,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099910",{"_index":493,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099911",{"_index":494,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099913",{"_index":495,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099914",{"_index":496,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099996",{"_index":497,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099997",{"_index":498,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099998",{"_index":499,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["099999",{"_index":500,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":190,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/PersianNumberService.html":{},"overview.html":{}}}],["1,925,100",{"_index":94,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["1.0",{"_index":85,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["1.9.0",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":521,"title":{},"body":{"pipes/NationalCodePipe.html":{},"miscellaneous/functions.html":{}}}],["10/12",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":288,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["100100",{"_index":235,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["11",{"_index":381,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["12",{"_index":282,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["139361631",{"_index":298,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["1397",{"_index":187,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["145",{"_index":816,"title":{},"body":{"miscellaneous/functions.html":{}}}],["145,455",{"_index":815,"title":{},"body":{"miscellaneous/functions.html":{}}}],["146097",{"_index":301,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["1461",{"_index":277,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["150",{"_index":315,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["153",{"_index":307,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["17",{"_index":281,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["183187720",{"_index":300,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["1925100",{"_index":92,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["2",{"_index":283,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{},"index.html":{},"overview.html":{}}}],["2.5.4",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":318,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["2018",{"_index":219,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["2019",{"_index":885,"title":{},"body":{"license.html":{}}}],["236547",{"_index":527,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["25",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":289,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["308",{"_index":304,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["31",{"_index":294,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["3177",{"_index":388,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["34840408",{"_index":286,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["35/77",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["3908",{"_index":302,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["4",{"_index":278,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{},"index.html":{},"overview.html":{}}}],["4/5",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["45",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":284,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{},"overview.html":{}}}],["5/9",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["55",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":275,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{}}}],["6.3.3",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["61",{"_index":387,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["621",{"_index":252,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["66",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":271,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianNumberService.html":{}}}],["7.2.0",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["752",{"_index":290,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["8",{"_index":701,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["8/11",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":420,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["98",{"_index":419,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["_",{"_index":588,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["_getmatchedpatternlength",{"_index":674,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["_getmatchedpatternlength(value",{"_index":624,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["_maxacceptableyear",{"_index":345,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["_minacceptableyear",{"_index":346,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["_stringvalidationregex",{"_index":675,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["_stringvalidationregex(options",{"_index":601,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["above",{"_index":917,"title":{},"body":{"license.html":{}}}],["abstractcontrol",{"_index":660,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["accept",{"_index":424,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["acceptable",{"_index":105,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateValidatorService.html":{},"pipes/NationalCodePipe.html":{}}}],["according",{"_index":368,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["action",{"_index":942,"title":{},"body":{"license.html":{}}}],["ad",{"_index":251,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["add",{"_index":644,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["additional",{"_index":862,"title":{},"body":{"index.html":{}}}],["alihoseiny",{"_index":887,"title":{},"body":{"license.html":{}}}],["allowed",{"_index":821,"title":{},"body":{"miscellaneous/functions.html":{}}}],["anarestan",{"_index":453,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":909,"title":{},"body":{"license.html":{}}}],["angular",{"_index":832,"title":{},"body":{"index.html":{}}}],["angular/animations",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":95,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":41,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":667,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["anywhere",{"_index":867,"title":{},"body":{"index.html":{}}}],["app",{"_index":339,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["application",{"_index":830,"title":{},"body":{"index.html":{}}}],["applied",{"_index":231,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["aptel",{"_index":449,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["arabic",{"_index":59,"title":{},"body":{"pipes/FaNumPipe.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["arabictopersian",{"_index":692,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["arabictopersian(value",{"_index":695,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["arising",{"_index":945,"title":{},"body":{"license.html":{}}}],["arithmetic",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arithmeticutils",{"_index":258,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["around",{"_index":338,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["array",{"_index":619,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["arrays",{"_index":456,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":897,"title":{},"body":{"license.html":{}}}],["attention",{"_index":196,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["attribute",{"_index":868,"title":{},"body":{"index.html":{}}}],["authors",{"_index":935,"title":{},"body":{"license.html":{}}}],["available",{"_index":122,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["azartel",{"_index":450,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["base",{"_index":846,"title":{},"body":{"index.html":{}}}],["below",{"_index":871,"title":{},"body":{"index.html":{}}}],["between",{"_index":386,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["boolean",{"_index":359,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["bootstrap",{"_index":538,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["both",{"_index":236,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["brings",{"_index":575,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["browse",{"_index":950,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":781,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["c",{"_index":884,"title":{},"body":{"license.html":{}}}],["calculates",{"_index":225,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["calculator.service.ts",{"_index":153,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["calculator.service.ts:103",{"_index":192,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:14",{"_index":175,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:144",{"_index":179,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:16",{"_index":255,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:28",{"_index":224,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:42",{"_index":245,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:51",{"_index":202,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:65",{"_index":248,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:74",{"_index":208,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:84",{"_index":221,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calculator.service.ts:92",{"_index":215,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["calendar",{"_index":205,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["calendars",{"_index":237,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["catch",{"_index":517,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["character",{"_index":435,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["characters",{"_index":440,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["charge",{"_index":892,"title":{},"body":{"license.html":{}}}],["chars",{"_index":614,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["check",{"_index":422,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["checks",{"_index":366,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{}}}],["choose",{"_index":72,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["claim",{"_index":938,"title":{},"body":{"license.html":{}}}],["class",{"_index":47,"title":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{}}}],["classes",{"_index":109,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"overview.html":{}}}],["cleaning",{"_index":230,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["cluster_ngxpersianmodule",{"_index":541,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["cluster_ngxpersianmodule_declarations",{"_index":542,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["cluster_ngxpersianmodule_exports",{"_index":543,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["code",{"_index":229,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"index.html":{}}}],["codes",{"_index":408,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["command",{"_index":850,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":916,"title":{},"body":{"license.html":{}}}],["connection",{"_index":946,"title":{},"body":{"license.html":{}}}],["const",{"_index":268,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["constant",{"_index":454,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":112,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["constructor(...params",{"_index":113,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["constructor(private",{"_index":49,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{}}}],["constructor(public",{"_index":264,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["constructor(validator",{"_index":173,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["containing",{"_index":30,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["contains",{"_index":90,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{}}}],["containspersian",{"_index":676,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["containspersian(value",{"_index":629,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["contract",{"_index":943,"title":{},"body":{"license.html":{}}}],["control",{"_index":663,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{}}}],["controlling",{"_index":637,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["controls",{"_index":636,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["conversion",{"_index":731,"title":{},"body":{"interfaces/PersianService.html":{}}}],["convert",{"_index":343,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["converting",{"_index":839,"title":{},"body":{"index.html":{}}}],["converts",{"_index":154,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["converttogeorgian",{"_index":164,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["converttogeorgian(jyear",{"_index":176,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["converttojalali",{"_index":165,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["converttojalali(gdate",{"_index":191,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["copies",{"_index":911,"title":{},"body":{"license.html":{}}}],["copy",{"_index":895,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":883,"title":{},"body":{"license.html":{}}}],["core",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["correct",{"_index":431,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["corresponding",{"_index":685,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["counting",{"_index":380,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["coverage",{"_index":742,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["created",{"_index":831,"title":{},"body":{"index.html":{}}}],["creategdatefromdays",{"_index":166,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["creategdatefromdays(numofdays",{"_index":201,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["creates",{"_index":203,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["currency",{"_index":69,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["damages",{"_index":939,"title":{},"body":{"license.html":{}}}],["date",{"_index":131,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"index.html":{}}}],["date(georgianyear",{"_index":326,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["date(gyear",{"_index":311,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["date(this.jalaliyeartogeorgianyear(jyear",{"_index":292,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["dates",{"_index":228,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["day",{"_index":198,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["days",{"_index":204,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["deal",{"_index":899,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":947,"title":{},"body":{"license.html":{}}}],["decimal",{"_index":91,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["decimalpipe",{"_index":78,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["declarations",{"_index":537,"title":{},"body":{"modules/NgxPersianModule.html":{},"index.html":{},"overview.html":{}}}],["declare",{"_index":864,"title":{},"body":{"index.html":{}}}],["default",{"_index":70,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":24,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{}}}],["dependencies",{"_index":535,"title":{"dependencies.html":{}},"body":{"modules/NgxPersianModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":8,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{}}}],["descriptions",{"_index":568,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["desired",{"_index":82,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["detailed",{"_index":857,"title":{},"body":{"index.html":{}}}],["developers",{"_index":860,"title":{},"body":{"index.html":{}}}],["di",{"_index":337,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["different",{"_index":841,"title":{},"body":{"index.html":{}}}],["digit",{"_index":421,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{}}}],["digitinfo",{"_index":88,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["digits",{"_index":34,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["directive",{"_index":641,"title":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{}}}],["directives",{"_index":553,"title":{},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{},"overview.html":{}}}],["directives.ts",{"_index":643,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{}}}],["directives.ts:22",{"_index":727,"title":{},"body":{"directives/PersianNumbersDirective.html":{}}}],["directives.ts:38",{"_index":658,"title":{},"body":{"directives/PersianLetterDirective.html":{}}}],["directives.ts:45",{"_index":661,"title":{},"body":{"directives/PersianLetterDirective.html":{}}}],["distribute",{"_index":907,"title":{},"body":{"license.html":{}}}],["div",{"_index":256,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["div((div(targetgyear",{"_index":314,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div((gyear",{"_index":276,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(153",{"_index":279,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(7",{"_index":310,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(div(4",{"_index":299,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(div(gyear",{"_index":287,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(gmonth",{"_index":274,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(j",{"_index":309,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(jmonth",{"_index":295,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(mod(i",{"_index":306,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(mod(j",{"_index":303,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["div(num1",{"_index":802,"title":{},"body":{"miscellaneous/functions.html":{}}}],["div(targetgyear",{"_index":313,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["division",{"_index":806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["document",{"_index":569,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["documentation",{"_index":743,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documents",{"_index":822,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["doing",{"_index":333,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["dynamic",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":518,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["each",{"_index":594,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["elements",{"_index":595,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["empty",{"_index":35,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["endigits",{"_index":570,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["english",{"_index":13,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["englishnumberstable",{"_index":689,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["englishtextdigit",{"_index":60,"title":{},"body":{"pipes/FaNumPipe.html":{},"index.html":{}}}],["ennum",{"_index":17,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["ennumpipe",{"_index":1,"title":{"pipes/EnNumPipe.html":{}},"body":{"pipes/EnNumPipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["enter",{"_index":81,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["enum",{"_index":96,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":796,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":212,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{}}}],["equivalent",{"_index":183,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["error",{"_index":111,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["error(`${value",{"_index":104,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["error.capturestacktrace",{"_index":126,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["error.capturestacktrace(this",{"_index":127,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["esfand",{"_index":382,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["event",{"_index":934,"title":{},"body":{"license.html":{}}}],["example",{"_index":14,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["examples",{"_index":879,"title":{},"body":{"index.html":{}}}],["existence",{"_index":635,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["exists",{"_index":813,"title":{},"body":{"miscellaneous/functions.html":{}}}],["export",{"_index":46,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["exports",{"_index":540,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["express",{"_index":925,"title":{},"body":{"license.html":{}}}],["extends",{"_index":77,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["fact",{"_index":358,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["false",{"_index":362,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["fanum",{"_index":61,"title":{},"body":{"pipes/FaNumPipe.html":{},"index.html":{}}}],["fanumpipe",{"_index":57,"title":{"pipes/FaNumPipe.html":{}},"body":{"pipes/FaNumPipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["farvardin",{"_index":210,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["featured",{"_index":828,"title":{},"body":{"index.html":{}}}],["few",{"_index":239,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["fields",{"_index":567,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["file",{"_index":5,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{}}}],["files",{"_index":898,"title":{},"body":{"license.html":{}}}],["find",{"_index":330,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["finding",{"_index":593,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["finds",{"_index":410,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["first",{"_index":209,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["firstdayofjyearinmarch",{"_index":167,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["firstdayofjyearinmarch(jyear",{"_index":207,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["firstly",{"_index":863,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":930,"title":{},"body":{"license.html":{}}}],["flexable",{"_index":844,"title":{},"body":{"index.html":{}}}],["following",{"_index":73,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{},"license.html":{}}}],["follows",{"_index":416,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["form",{"_index":820,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["format",{"_index":523,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["formats",{"_index":68,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["formatter",{"_index":84,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["formatting",{"_index":83,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"index.html":{}}}],["fraction",{"_index":812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["free",{"_index":891,"title":{},"body":{"license.html":{}}}],["full",{"_index":185,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["function",{"_index":249,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":799,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":914,"title":{},"body":{"license.html":{}}}],["future",{"_index":242,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["g",{"_index":612,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["gdate",{"_index":200,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gdate.getdate",{"_index":285,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gdate.getfullyear",{"_index":272,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gdate.getmonth",{"_index":270,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gday",{"_index":305,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["generalregex",{"_index":504,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["generalregex.test(phonenumber",{"_index":506,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["georgian",{"_index":155,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["georgianyear",{"_index":320,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["georgianyeartojalaliyear",{"_index":168,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["georgianyeartojalaliyear(gyear",{"_index":214,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["getphonenumberoperator",{"_index":401,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["getphonenumberoperator(phonenumber",{"_index":405,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["gets",{"_index":613,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["getting",{"_index":825,"title":{"index.html":{},"license.html":{}},"body":{"index.html":{}}}],["gif",{"_index":872,"title":{},"body":{"index.html":{}}}],["given",{"_index":246,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["globally",{"_index":854,"title":{},"body":{"index.html":{}}}],["gmonth",{"_index":269,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["gmonthdiv",{"_index":273,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["good",{"_index":234,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["granted",{"_index":890,"title":{},"body":{"license.html":{}}}],["greater",{"_index":622,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["gregorian",{"_index":227,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["grouping",{"_index":738,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["gt",{"_index":93,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["gyear",{"_index":218,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["here",{"_index":856,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":889,"title":{},"body":{"license.html":{}}}],["holders",{"_index":936,"title":{},"body":{"license.html":{}}}],["https://github.com/sijad/ts",{"_index":266,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["identifier",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":125,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["implement",{"_index":566,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"interfaces/PersianService.html":{}}}],["implementing",{"_index":194,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["implements",{"_index":48,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{}}}],["implied",{"_index":926,"title":{},"body":{"license.html":{}}}],["import",{"_index":39,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["important",{"_index":740,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["imports",{"_index":558,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["included",{"_index":920,"title":{},"body":{"license.html":{}}}],["including",{"_index":901,"title":{},"body":{"license.html":{}}}],["index",{"_index":160,"title":{"index.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{}}}],["injectable",{"_index":149,"title":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{}}}],["injectables",{"_index":151,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"overview.html":{}}}],["input",{"_index":37,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidServiceInputError.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["input('persianletterdirective",{"_index":672,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["inputs",{"_index":657,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["install",{"_index":847,"title":{},"body":{"index.html":{}}}],["installing",{"_index":848,"title":{},"body":{"index.html":{}}}],["instance",{"_index":243,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["instead",{"_index":374,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["integer",{"_index":804,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":559,"title":{"interfaces/PLOptions.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{}},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":561,"title":{},"body":{"interfaces/PLOptions.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"overview.html":{}}}],["invalid",{"_index":129,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/MobilePhoneNumberService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["invalidjalalidate.error",{"_index":259,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["invalidjalalidateerror",{"_index":108,"title":{"classes/InvalidJalaliDateError.html":{}},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["invalidmobileoperator.error",{"_index":437,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["invalidmobileoperatorerror",{"_index":132,"title":{"classes/InvalidMobileOperatorError.html":{}},"body":{"classes/InvalidMobileOperatorError.html":{},"injectables/MobilePhoneNumberService.html":{},"coverage.html":{}}}],["invalidmobilephonenumber.error",{"_index":436,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["invalidmobilephonenumbererror",{"_index":137,"title":{"classes/InvalidMobilePhoneNumberError.html":{}},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"injectables/MobilePhoneNumberService.html":{},"coverage.html":{}}}],["invalidserviceinput.error",{"_index":715,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["invalidserviceinputerror",{"_index":143,"title":{"classes/InvalidServiceInputError.html":{}},"body":{"classes/InvalidServiceInputError.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{}}}],["irancell",{"_index":442,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["iranian",{"_index":399,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["irc",{"_index":87,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["ircurrencies",{"_index":97,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{}}}],["ircurrencies[type",{"_index":107,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["ircurrencypipe",{"_index":66,"title":{"pipes/IRCurrencyPipe.html":{}},"body":{"pipes/IRCurrencyPipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"overview.html":{}}}],["isjyearleap",{"_index":347,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isjyearleap(jyear",{"_index":355,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isnan(value",{"_index":101,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["ispersian",{"_index":564,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{}}}],["ispersian(value",{"_index":681,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["isphonenumberpatternvalid",{"_index":402,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["isphonenumberpatternvalid(phonenumber",{"_index":414,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["isvalidjdate",{"_index":348,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjdate(jyear",{"_index":360,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjday",{"_index":349,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjday(jyear",{"_index":364,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjmonth",{"_index":350,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjmonth(jmonth",{"_index":370,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjyear",{"_index":351,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidjyear(jyear",{"_index":376,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["isvalidphonenumber",{"_index":403,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["isvalidphonenumber(phonenumber",{"_index":429,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["j",{"_index":297,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l110",{"_index":312,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l149",{"_index":319,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l195",{"_index":267,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#l213",{"_index":296,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalali",{"_index":130,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["jalalidatecalculatorservice",{"_index":150,"title":{"injectables/JalaliDateCalculatorService.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"coverage.html":{}}}],["jalalidatevalidatorservice",{"_index":174,"title":{"injectables/JalaliDateValidatorService.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["jalalidatevalidatorservice._minacceptableyear",{"_index":390,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["jalaliday",{"_index":328,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalalimonth",{"_index":329,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaliyear",{"_index":321,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaliyeartogeorgianyear",{"_index":169,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jalaliyeartogeorgianyear(jyear",{"_index":220,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["javascript",{"_index":180,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["jdate",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["jday",{"_index":178,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["jmonth",{"_index":177,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["jmonthlength",{"_index":352,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["jmonthlength(jyear",{"_index":378,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["js",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["julian",{"_index":226,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["jyear",{"_index":184,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["keep",{"_index":457,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["key",{"_index":670,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["keys",{"_index":438,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["kind",{"_index":924,"title":{},"body":{"license.html":{}}}],["language",{"_index":732,"title":{},"body":{"interfaces/PersianService.html":{}}}],["language=jsregexp",{"_index":609,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["leap",{"_index":250,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["legend",{"_index":536,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["length",{"_index":618,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["letter",{"_index":628,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["letter.service",{"_index":669,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["letter.service.ts",{"_index":563,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"coverage.html":{}}}],["letter.service.ts:24",{"_index":686,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:26",{"_index":687,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:27",{"_index":688,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:35",{"_index":679,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:53",{"_index":678,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:62",{"_index":680,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:81",{"_index":682,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letter.service.ts:94",{"_index":684,"title":{},"body":{"injectables/PersianLetterService.html":{}}}],["letters",{"_index":578,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"miscellaneous/functions.html":{}}}],["liability",{"_index":940,"title":{},"body":{"license.html":{}}}],["liable",{"_index":937,"title":{},"body":{"license.html":{}}}],["library",{"_index":838,"title":{},"body":{"index.html":{}}}],["license",{"_index":881,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":902,"title":{},"body":{"license.html":{}}}],["limited",{"_index":927,"title":{},"body":{"license.html":{}}}],["line",{"_index":865,"title":{},"body":{"index.html":{}}}],["link",{"_index":503,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["list",{"_index":640,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["literal",{"_index":664,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["locking",{"_index":427,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["lotustel",{"_index":452,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["lowercase",{"_index":441,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{}}}],["maintains",{"_index":117,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["make",{"_index":375,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["march",{"_index":211,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["match",{"_index":616,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["matched",{"_index":411,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["matches",{"_index":623,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["matching",{"_index":55,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchresult",{"_index":625,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["matchresult.length",{"_index":627,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["mci",{"_index":443,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["means",{"_index":418,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["merchantability",{"_index":929,"title":{},"body":{"license.html":{}}}],["merge",{"_index":905,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":18,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["method",{"_index":146,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/functions.html":{}}}],["methods",{"_index":20,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{}}}],["million",{"_index":240,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["minmonthnumber",{"_index":391,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["miscellaneous",{"_index":795,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":882,"title":{},"body":{"license.html":{}}}],["mobile",{"_index":139,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["mobilecodes",{"_index":409,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mobilecodes[operator",{"_index":512,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["mobilephonenumberservice",{"_index":395,"title":{"injectables/MobilePhoneNumberService.html":{}},"body":{"injectables/MobilePhoneNumberService.html":{},"coverage.html":{}}}],["mod",{"_index":257,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["mod(div(i",{"_index":308,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["mod(gmonth",{"_index":280,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["mod(num1",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modify",{"_index":904,"title":{},"body":{"license.html":{}}}],["module",{"_index":532,"title":{"modules/NgxPersianModule.html":{}},"body":{"modules/NgxPersianModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":534,"title":{"modules.html":{}},"body":{"modules/NgxPersianModule.html":{},"modules.html":{}}}],["month",{"_index":197,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["more",{"_index":32,"title":{},"body":{"pipes/EnNumPipe.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mr",{"_index":886,"title":{},"body":{"license.html":{}}}],["name",{"_index":19,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named",{"_index":869,"title":{},"body":{"index.html":{}}}],["nameinenglish",{"_index":406,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["names",{"_index":455,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/variables.html":{}}}],["national",{"_index":522,"title":{},"body":{"pipes/NationalCodePipe.html":{},"index.html":{}}}],["nationalcode",{"_index":524,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["nationalcodepipe",{"_index":519,"title":{"pipes/NationalCodePipe.html":{}},"body":{"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"coverage.html":{},"overview.html":{}}}],["native",{"_index":199,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["need",{"_index":861,"title":{},"body":{"index.html":{}}}],["needed",{"_index":859,"title":{},"body":{"index.html":{}}}],["needing",{"_index":342,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["new",{"_index":103,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{}}}],["ng_validators",{"_index":652,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["ngmodule",{"_index":551,"title":{},"body":{"modules/NgxPersianModule.html":{},"index.html":{}}}],["ngx",{"_index":852,"title":{},"body":{"index.html":{}}}],["ngxpersian",{"_index":827,"title":{},"body":{"index.html":{}}}],["ngxpersianmodule",{"_index":533,"title":{"modules/NgxPersianModule.html":{}},"body":{"modules/NgxPersianModule.html":{},"modules.html":{},"overview.html":{}}}],["non",{"_index":33,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["noninfringement",{"_index":933,"title":{},"body":{"license.html":{}}}],["normalizephonenumber",{"_index":404,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["normalizephonenumber(phonenumber",{"_index":432,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["notice",{"_index":918,"title":{},"body":{"license.html":{}}}],["now",{"_index":866,"title":{},"body":{"index.html":{}}}],["npm",{"_index":851,"title":{},"body":{"index.html":{}}}],["null",{"_index":617,"title":{},"body":{"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{}}}],["num1",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["num2",{"_index":803,"title":{},"body":{"miscellaneous/functions.html":{}}}],["number",{"_index":62,"title":{},"body":{"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["number(value",{"_index":99,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["number.service",{"_index":44,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["number.service.ts",{"_index":397,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["number.service.ts:10",{"_index":714,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:101",{"_index":430,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["number.service.ts:11",{"_index":702,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:18",{"_index":697,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:30",{"_index":694,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:40",{"_index":698,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:49",{"_index":696,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:59",{"_index":415,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{}}}],["number.service.ts:68",{"_index":433,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["number.service.ts:76",{"_index":700,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["number.service.ts:83",{"_index":407,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["number.service.ts:9",{"_index":705,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["numberofpassedgdays",{"_index":170,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numberofpassedgdays(gdate",{"_index":223,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numberofpassedjdays",{"_index":171,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numberofpassedjdays(jyear",{"_index":244,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numbers",{"_index":11,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"injectables/PersianNumberService.html":{},"interfaces/SimpleDateInterface.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["numeric",{"_index":842,"title":{},"body":{"index.html":{}}}],["numofdayinjyear",{"_index":331,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofdays",{"_index":206,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofgleapyears",{"_index":172,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofgleapyears(targetgyear",{"_index":247,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["numofjleapyears",{"_index":353,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["numofjleapyears(targetjyear",{"_index":383,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["numofpasseddaysto1farvardin",{"_index":325,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["object",{"_index":181,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.keys(mobilecodes",{"_index":511,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["obtaining",{"_index":894,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":621,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["one",{"_index":31,"title":{},"body":{"pipes/EnNumPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["ones",{"_index":579,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["operator",{"_index":135,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":400,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["operatorsnames",{"_index":412,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{}}}],["operatorsnames[operator",{"_index":514,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["optional",{"_index":28,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":565,"title":{},"body":{"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["options.endigits",{"_index":602,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["options.persiandigits",{"_index":607,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["options.symbols",{"_index":603,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["options.whitespaces",{"_index":605,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["others",{"_index":600,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["otherwise",{"_index":363,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"license.html":{}}}],["out",{"_index":548,"title":{},"body":{"modules/NgxPersianModule.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":193,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["outputs",{"_index":880,"title":{},"body":{"index.html":{}}}],["overview",{"_index":951,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":776,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":51,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{}}}],["parameter",{"_index":80,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":115,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["part",{"_index":805,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["particular",{"_index":931,"title":{},"body":{"license.html":{}}}],["passed",{"_index":148,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{}}}],["passeddays",{"_index":323,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["pattern",{"_index":417,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["permission",{"_index":888,"title":{},"body":{"license.html":{}}}],["permit",{"_index":912,"title":{},"body":{"license.html":{}}}],["persian",{"_index":10,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["persian.module.ts",{"_index":550,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["persian/src/lib/jdate/arithmeticutils.ts",{"_index":746,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["persian/src/lib/jdate/invalidjalalidate.error.ts",{"_index":110,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"coverage.html":{}}}],["persian/src/lib/jdate/invalidjalalidate.error.ts:1",{"_index":114,"title":{},"body":{"classes/InvalidJalaliDateError.html":{}}}],["persian/src/lib/jdate/jalali",{"_index":152,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["persian/src/lib/jdate/jdate.ts",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["persian/src/lib/jdate/simpledate.interface.ts",{"_index":736,"title":{},"body":{"interfaces/SimpleDateInterface.html":{},"coverage.html":{}}}],["persian/src/lib/ngx",{"_index":549,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["persian/src/lib/pipes/ennum.pipe.ts",{"_index":7,"title":{},"body":{"pipes/EnNumPipe.html":{},"coverage.html":{}}}],["persian/src/lib/pipes/ennum.pipe.ts:17",{"_index":25,"title":{},"body":{"pipes/EnNumPipe.html":{}}}],["persian/src/lib/pipes/fanum.pipe.ts",{"_index":58,"title":{},"body":{"pipes/FaNumPipe.html":{},"coverage.html":{}}}],["persian/src/lib/pipes/fanum.pipe.ts:18",{"_index":63,"title":{},"body":{"pipes/FaNumPipe.html":{}}}],["persian/src/lib/pipes/ircurrency.pipe.ts",{"_index":67,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["persian/src/lib/pipes/ircurrency.pipe.ts:30",{"_index":89,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["persian/src/lib/pipes/nationalcode.pipe.ts",{"_index":520,"title":{},"body":{"pipes/NationalCodePipe.html":{},"coverage.html":{}}}],["persian/src/lib/pipes/nationalcode.pipe.ts:14",{"_index":525,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["persian/src/lib/services/invalidmobileoperator.error.ts",{"_index":133,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidmobileoperator.error.ts:1",{"_index":134,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{}}}],["persian/src/lib/services/invalidmobilephonenumber.error.ts",{"_index":138,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidmobilephonenumber.error.ts:4",{"_index":142,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{}}}],["persian/src/lib/services/invalidserviceinput.error.ts",{"_index":144,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"coverage.html":{}}}],["persian/src/lib/services/invalidserviceinput.error.ts:4",{"_index":147,"title":{},"body":{"classes/InvalidServiceInputError.html":{}}}],["persian/src/lib/services/mobile",{"_index":396,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["persian/src/lib/services/persian",{"_index":562,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"coverage.html":{}}}],["persian/src/lib/validators/persian",{"_index":642,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["persian_letters_pattern",{"_index":581,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persiandigits",{"_index":571,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianletterdirective",{"_index":544,"title":{"directives/PersianLetterDirective.html":{}},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"overview.html":{}}}],["persianletterservice",{"_index":580,"title":{"injectables/PersianLetterService.html":{}},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["persianletterservice.persian_letters_pattern",{"_index":611,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianletterservice.symbols_pattern",{"_index":604,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianletterservice.whitespaces_pattern",{"_index":606,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persianlettersvalidator",{"_index":655,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["persianlettersvalidator(options",{"_index":818,"title":{},"body":{"miscellaneous/functions.html":{}}}],["persianlettersvalidator(this.options)(control",{"_index":673,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["persiannumberpattern",{"_index":690,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumbersdirective",{"_index":545,"title":{"directives/PersianNumbersDirective.html":{}},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"overview.html":{}}}],["persiannumberservice",{"_index":42,"title":{"injectables/PersianNumberService.html":{}},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["persiannumberservice._getmatchedpatternlength(value",{"_index":718,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberservice.persiannumberpattern",{"_index":608,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["persiannumberservice.persiannumberstable[4",{"_index":720,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberservice.persiannumberstable[5",{"_index":722,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberservice.persiannumberstable[6",{"_index":724,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumberstable",{"_index":691,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["persiannumbersvalidator",{"_index":647,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["persiannumbersvalidator()(control",{"_index":671,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["persiannumbersvalidator(persiannumberservice",{"_index":824,"title":{},"body":{"miscellaneous/functions.html":{}}}],["persianregex",{"_index":631,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["persianregex.test(value",{"_index":634,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["persianservice",{"_index":574,"title":{"interfaces/PersianService.html":{}},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{},"coverage.html":{}}}],["persiantextdigit",{"_index":15,"title":{},"body":{"pipes/EnNumPipe.html":{},"index.html":{}}}],["person",{"_index":893,"title":{},"body":{"license.html":{}}}],["persons",{"_index":913,"title":{},"body":{"license.html":{}}}],["phone",{"_index":140,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"injectables/MobilePhoneNumberService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["phonenumber",{"_index":413,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["phonenumber.indexof(code",{"_index":513,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["phonenumber.replace('+98",{"_index":507,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["pipe",{"_index":0,"title":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"coverage.html":{},"index.html":{}}}],["pipe({name",{"_index":45,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["pipes",{"_index":2,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{},"index.html":{},"overview.html":{}}}],["pipes/ennum.pipe",{"_index":555,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/fanum.pipe",{"_index":554,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/ircurrency.pipe",{"_index":556,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipes/nationalcode.pipe",{"_index":557,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["pipetransform",{"_index":40,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["ploptions",{"_index":560,"title":{"interfaces/PLOptions.html":{}},"body":{"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"directives/PersianNumbersDirective.html":{},"coverage.html":{}}}],["plus",{"_index":597,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["portions",{"_index":922,"title":{},"body":{"license.html":{}}}],["private",{"_index":344,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["probably",{"_index":64,"title":{},"body":{"pipes/FaNumPipe.html":{}}}],["procedure",{"_index":232,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["program",{"_index":577,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["projects/.../arithmeticutils.ts",{"_index":800,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/.../ircurrency.pipe.ts",{"_index":797,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["projects/.../mobile",{"_index":798,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["projects/.../persian",{"_index":801,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects/ngx",{"_index":6,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["proper",{"_index":118,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["properties",{"_index":161,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["property",{"_index":645,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["provide",{"_index":651,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["provided",{"_index":837,"title":{},"body":{"index.html":{},"license.html":{}}}],["providedin",{"_index":262,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["providers",{"_index":539,"title":{},"body":{"modules/NgxPersianModule.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"overview.html":{}}}],["public",{"_index":162,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["publish",{"_index":906,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":932,"title":{},"body":{"license.html":{}}}],["questions",{"_index":874,"title":{},"body":{"index.html":{}}}],["r",{"_index":75,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{}}}],["range",{"_index":367,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["reactive",{"_index":819,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["real",{"_index":213,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["reality",{"_index":428,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["recognizable",{"_index":136,"title":{},"body":{"classes/InvalidMobileOperatorError.html":{}}}],["regex",{"_index":592,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["regexp",{"_index":591,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["regexp(/^((\\+98|0)9\\d{9",{"_index":505,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["regexp(`[${persianletterservice.persian_letters_pattern",{"_index":632,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["regexp(`[${persiannumberservice.persiannumberpattern",{"_index":716,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["regexp(`[${result",{"_index":610,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["related",{"_index":875,"title":{},"body":{"index.html":{}}}],["removes",{"_index":434,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/functions.html":{}}}],["replace(/٥/g",{"_index":721,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["replace(/٦/g",{"_index":723,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["replaced",{"_index":38,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{}}}],["replaces",{"_index":9,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["representing",{"_index":182,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["reset",{"_index":547,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}],["restriction",{"_index":900,"title":{},"body":{"license.html":{}}}],["result",{"_index":54,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":56,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":50,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{}}}],["returns",{"_index":36,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/functions.html":{}}}],["rial",{"_index":71,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rightel",{"_index":445,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rights",{"_index":903,"title":{},"body":{"license.html":{}}}],["root",{"_index":263,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"index.html":{}}}],["round",{"_index":748,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["round(x",{"_index":811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":849,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":590,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["samantel",{"_index":451,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["save",{"_index":853,"title":{},"body":{"index.html":{}}}],["searching",{"_index":598,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["second",{"_index":79,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["section",{"_index":876,"title":{},"body":{"index.html":{}}}],["see",{"_index":265,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["selector",{"_index":654,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["sell",{"_index":910,"title":{},"body":{"license.html":{}}}],["serve",{"_index":730,"title":{},"body":{"interfaces/PersianService.html":{}}}],["service",{"_index":145,"title":{},"body":{"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["service.ts",{"_index":728,"title":{},"body":{"interfaces/PersianService.html":{},"coverage.html":{}}}],["service.ts:10",{"_index":733,"title":{},"body":{"interfaces/PersianService.html":{}}}],["service.ts:6",{"_index":734,"title":{},"body":{"interfaces/PersianService.html":{}}}],["service.ts:8",{"_index":735,"title":{},"body":{"interfaces/PersianService.html":{}}}],["services",{"_index":729,"title":{},"body":{"interfaces/PersianService.html":{},"index.html":{}}}],["services/persian",{"_index":43,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["set",{"_index":650,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["sets",{"_index":638,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["setting",{"_index":648,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["shall",{"_index":919,"title":{},"body":{"license.html":{}}}],["shatel",{"_index":448,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["short",{"_index":855,"title":{},"body":{"index.html":{}}}],["shows",{"_index":620,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["similar",{"_index":834,"title":{},"body":{"index.html":{}}}],["simple",{"_index":737,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["simpledate.interface",{"_index":260,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["simpledateinterface",{"_index":195,"title":{"interfaces/SimpleDateInterface.html":{}},"body":{"injectables/JalaliDateCalculatorService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{}}}],["simply",{"_index":649,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["software",{"_index":896,"title":{},"body":{"license.html":{}}}],["sold",{"_index":398,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["source",{"_index":4,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"modules/NgxPersianModule.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["spadan",{"_index":446,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["special",{"_index":599,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["specific",{"_index":639,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["specified",{"_index":596,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["splits",{"_index":615,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["stack",{"_index":119,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["start",{"_index":216,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["started",{"_index":826,"title":{"index.html":{},"license.html":{}},"body":{}}],["startfromzero",{"_index":371,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["starting",{"_index":369,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{}}}],["starts",{"_index":188,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["statements",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":159,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["still",{"_index":873,"title":{},"body":{"index.html":{}}}],["string",{"_index":23,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{}}}],["string(value",{"_index":52,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["strings",{"_index":425,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["stuff",{"_index":335,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{}}}],["subject",{"_index":915,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":908,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":921,"title":{},"body":{"license.html":{}}}],["success",{"_index":665,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["super(...params",{"_index":116,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["super.transform(value",{"_index":106,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["support",{"_index":948,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":949,"title":{},"body":{"modules.html":{}}}],["symbols",{"_index":572,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["symbols_pattern",{"_index":587,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["t",{"_index":98,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{}}}],["table",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":646,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["talia",{"_index":444,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["targetgyear",{"_index":254,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["targetjyear",{"_index":385,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["template",{"_index":845,"title":{},"body":{"index.html":{}}}],["templates",{"_index":858,"title":{},"body":{"index.html":{}}}],["tested",{"_index":233,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["tests",{"_index":878,"title":{},"body":{"index.html":{}}}],["text",{"_index":12,"title":{},"body":{"pipes/EnNumPipe.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["texts",{"_index":576,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{}}}],["this.arabictopersian(value",{"_index":726,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["this.firstdayofjyearinmarch(jalaliyear",{"_index":327,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.firstdayofjyearinmarch(jyear",{"_index":293,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.georgianyeartojalaliyear(georgianyear",{"_index":322,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.getphonenumberoperator(phonenumber",{"_index":516,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["this.isphonenumberpatternvalid(phonenumber",{"_index":509,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["this.isvalidjday(jyear",{"_index":394,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["this.isvalidjmonth(jmonth",{"_index":393,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["this.isvalidjyear(jyear",{"_index":392,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["this.message",{"_index":128,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["this.normalizephonenumber(phonenumber",{"_index":510,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["this.numberofpassedgdays(gdate",{"_index":324,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.numberofpassedgdays(new",{"_index":291,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.numofgleapyears(gyear",{"_index":317,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["this.persiannumberservice.toenglish(value",{"_index":53,"title":{},"body":{"pipes/EnNumPipe.html":{}}}],["this.persiannumberservice.topersian(value",{"_index":65,"title":{},"body":{"pipes/FaNumPipe.html":{}}}],["this.validator.numofjleapyears(jyear",{"_index":316,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["those",{"_index":426,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"interfaces/PersianService.html":{},"miscellaneous/variables.html":{}}}],["three",{"_index":739,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["throw",{"_index":102,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{}}}],["thrown",{"_index":121,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["throws",{"_index":508,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["time",{"_index":843,"title":{},"body":{"index.html":{}}}],["tkc",{"_index":447,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["toenglish",{"_index":693,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["toenglish(value",{"_index":699,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["together",{"_index":741,"title":{},"body":{"interfaces/SimpleDateInterface.html":{}}}],["toman",{"_index":76,"title":{},"body":{"pipes/IRCurrencyPipe.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["tool",{"_index":829,"title":{},"body":{"index.html":{}}}],["tools",{"_index":836,"title":{},"body":{"index.html":{}}}],["topersian",{"_index":677,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["topersian(value",{"_index":683,"title":{},"body":{"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"interfaces/PersianService.html":{}}}],["tort",{"_index":944,"title":{},"body":{"license.html":{}}}],["trace",{"_index":120,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["transform",{"_index":21,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["transform(value",{"_index":22,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"pipes/NationalCodePipe.html":{}}}],["true",{"_index":357,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["try",{"_index":515,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["ts",{"_index":124,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["tslib",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":814,"title":{},"body":{"miscellaneous/functions.html":{}}}],["two",{"_index":810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["type",{"_index":27,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"interfaces/SimpleDateInterface.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["type.tolowercase",{"_index":100,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["typedoc",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["types",{"_index":74,"title":{},"body":{"pipes/IRCurrencyPipe.html":{}}}],["u0629\\u0630",{"_index":584,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u0639\\u0641",{"_index":585,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u064d\\u064e\\u064f\\u067e\\u0670\\u0686\\u0698\\u200c\\u0621",{"_index":583,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u0654",{"_index":586,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u06a9\\u06af\\u06c0\\u06cc\\u060c\\u062a\\u062b\\u062c\\u062d\\u062e\\u062f\\u063a\\u064a\\u064b\\u064c",{"_index":582,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["u06f0",{"_index":703,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f1",{"_index":706,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f2",{"_index":707,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f3",{"_index":708,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f4",{"_index":709,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f5",{"_index":710,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f6",{"_index":711,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f7",{"_index":712,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f8",{"_index":713,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["u06f9",{"_index":704,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["undefined",{"_index":630,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{}}}],["unit",{"_index":877,"title":{},"body":{"index.html":{}}}],["until",{"_index":253,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["up",{"_index":238,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["usage",{"_index":870,"title":{},"body":{"index.html":{}}}],["use",{"_index":158,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"index.html":{},"license.html":{}}}],["useexisting",{"_index":653,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["using",{"_index":336,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"index.html":{}}}],["v",{"_index":833,"title":{},"body":{"index.html":{}}}],["v8",{"_index":123,"title":{},"body":{"classes/InvalidJalaliDateError.html":{},"classes/InvalidMobileOperatorError.html":{},"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{}}}],["valid",{"_index":141,"title":{},"body":{"classes/InvalidMobilePhoneNumberError.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{}}}],["validate",{"_index":656,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["validate(control",{"_index":659,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["validating",{"_index":340,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"index.html":{}}}],["validation",{"_index":334,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["validationerror",{"_index":666,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["validator",{"_index":163,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{},"miscellaneous/functions.html":{}}}],["validator.service",{"_index":261,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["validator.service.ts",{"_index":332,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"coverage.html":{}}}],["validator.service.ts:113",{"_index":365,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:123",{"_index":361,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:15",{"_index":389,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:16",{"_index":354,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:25",{"_index":379,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:37",{"_index":384,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:80",{"_index":356,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:89",{"_index":377,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validator.service.ts:97",{"_index":372,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{}}}],["validatorfn",{"_index":823,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validators",{"_index":668,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["validators.ts",{"_index":773,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["validators/persian",{"_index":552,"title":{},"body":{"modules/NgxPersianModule.html":{}}}],["validity",{"_index":423,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{}}}],["value",{"_index":29,"title":{},"body":{"pipes/EnNumPipe.html":{},"pipes/FaNumPipe.html":{},"pipes/IRCurrencyPipe.html":{},"classes/InvalidServiceInputError.html":{},"injectables/JalaliDateValidatorService.html":{},"injectables/MobilePhoneNumberService.html":{},"pipes/NationalCodePipe.html":{},"interfaces/PLOptions.html":{},"directives/PersianLetterDirective.html":{},"injectables/PersianLetterService.html":{},"injectables/PersianNumberService.html":{},"directives/PersianNumbersDirective.html":{},"interfaces/PersianService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":528,"title":{},"body":{"pipes/NationalCodePipe.html":{},"injectables/PersianNumberService.html":{}}}],["value.match(new",{"_index":717,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["value.match(persianletterservice._stringvalidationregex(options",{"_index":626,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["value.replace(/٤/g",{"_index":719,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["value.substring(0",{"_index":529,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["value.substring(3",{"_index":530,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["value.tostring",{"_index":725,"title":{},"body":{"injectables/PersianNumberService.html":{}}}],["value.trim",{"_index":633,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["value[9",{"_index":531,"title":{},"body":{"pipes/NationalCodePipe.html":{}}}],["values",{"_index":439,"title":{},"body":{"injectables/MobilePhoneNumberService.html":{},"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":952,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vase",{"_index":156,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["versa",{"_index":157,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"index.html":{}}}],["vise",{"_index":840,"title":{},"body":{"index.html":{}}}],["want",{"_index":373,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"interfaces/PersianService.html":{},"index.html":{}}}],["warranties",{"_index":928,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":923,"title":{},"body":{"license.html":{}}}],["whether",{"_index":941,"title":{},"body":{"license.html":{}}}],["whitespaces",{"_index":573,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["whitespaces_pattern",{"_index":589,"title":{},"body":{"interfaces/PLOptions.html":{},"injectables/PersianLetterService.html":{}}}],["winter",{"_index":222,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["within",{"_index":217,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{}}}],["without",{"_index":341,"title":{},"body":{"injectables/JalaliDateValidatorService.html":{},"index.html":{},"license.html":{}}}],["working",{"_index":835,"title":{},"body":{"index.html":{}}}],["wrapper",{"_index":662,"title":{},"body":{"directives/PersianLetterDirective.html":{},"directives/PersianNumbersDirective.html":{}}}],["x",{"_index":817,"title":{},"body":{"miscellaneous/functions.html":{}}}],["year",{"_index":186,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{},"interfaces/SimpleDateInterface.html":{}}}],["years",{"_index":241,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["zero",{"_index":189,"title":{},"body":{"injectables/JalaliDateCalculatorService.html":{},"injectables/JalaliDateValidatorService.html":{}}}],["zone.js",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":546,"title":{},"body":{"modules/NgxPersianModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"pipes/EnNumPipe.html":{"url":"pipes/EnNumPipe.html","title":"pipe - EnNumPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  EnNumPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/enNum.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Replaces all persian numbers in the text to the english numbers.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{persianTextDigit | enNum}}\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        enNum\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/enNum.pipe.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a string containing one or more non-english digits. Could be an empty string.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        input value replaced all persian digits with english digits.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all persian numbers in the text to the english numbers.\n * @example {{persianTextDigit | enNum}}\n */\n@Pipe({name: 'enNum'})\nexport class EnNumPipe  implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   * @return input value replaced all persian digits with english digits.\n   * @param value a string containing one or more non-english digits. Could be an empty string.\n   */\n  transform(value: string): string {\n    value = String(value);\n    return this.persianNumberService.toEnglish(value);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/FaNumPipe.html":{"url":"pipes/FaNumPipe.html","title":"pipe - FaNumPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  FaNumPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/faNum.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Replaces all arabic and english numbers with persian numbers.\n\n            \n\n            \n                Example\n            \n            \n                        \n                            {{englishTextDigit | faNum}}\n                        \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        faNum\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/faNum.pipe.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a number or string (probably empty).\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        a string that all english and arabic numbers in the input has been replaced with persian digits.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform} from '@angular/core';\nimport {PersianNumberService} from '../Services/persian-number.service';\n\n/**\n * Replaces all arabic and english numbers with persian numbers.\n * @example {{englishTextDigit | faNum}}\n */\n@Pipe({name: 'faNum'})\nexport class FaNumPipe implements PipeTransform {\n\n  constructor(private persianNumberService: PersianNumberService) {}\n\n  /**\n   *\n   * @param value a number or string (probably empty).\n   * @return a string that all english and arabic numbers in the input has been replaced with persian digits.\n   */\n  transform(value: string | number): string {\n    value = String(value);\n    return this.persianNumberService.toPersian(value);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/IRCurrencyPipe.html":{"url":"pipes/IRCurrencyPipe.html","title":"pipe - IRCurrencyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  IRCurrencyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Formats input as a currency value.\ndefault type is rial. You can choose on of the following currency types:\n  r or rial for ریال\n\n  to or toman for تومان  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        irc\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | number, type: string, digitInfo: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        a number of a string only contains digits\n\n                                    \n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        'rial'\n                                    \n\n                                    \n                                        currency type\n\n                                    \n                                \n                                \n                                    digitInfo\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        '1.0-0'\n                                    \n\n                                    \n                                        decimal pipe formatter\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            1925100 -&gt; 1,925,100 ریال\n                        \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform} from '@angular/core';\nimport {DecimalPipe} from '@angular/common';\n\nexport enum IRCurrencies {\n  rial = 'ریال',\n  r = 'ریال',\n  toman = 'تومان',\n  t = 'تومان'\n}\n\n/**\n * Formats input as a currency value.\n * default type is rial. You can choose on of the following currency types:\n *\n *      r or rial for ریال\n *\n *      to or toman for تومان\n *\n *  This pipe extends DecimalPipe, so as second parameter, you can enter your desired formatting string. Default formatter is: 1.0-0\n */\n@Pipe({name: 'irc'})\nexport class IRCurrencyPipe extends DecimalPipe implements PipeTransform {\n\n  /**\n   * @param value a number of a string only contains digits\n   * @param type currency type\n   * @param digitInfo decimal pipe formatter\n   * @example 1925100 -> 1,925,100 ریال\n   */\n  transform(value: string | number, type: string = 'rial', digitInfo: string = '1.0-0') {\n    value = Number(value);\n    type = type.toLowerCase();\n    if (isNaN(value)) { throw new Error(`${value} is not a acceptable number`); }\n    return super.transform(value, digitInfo) + ' ' + IRCurrencies[type];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidJalaliDateError.html":{"url":"classes/InvalidJalaliDateError.html","title":"class - InvalidJalaliDateError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidJalaliDateError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/InvalidJalaliDate.error.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/JDate/InvalidJalaliDate.error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidJalaliDateError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidJalaliDateError);\n    }\n\n    this.message = 'Invalid jalali date.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidMobileOperatorError.html":{"url":"classes/InvalidMobileOperatorError.html","title":"class - InvalidMobileOperatorError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidMobileOperatorError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidMobileOperator.error.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidMobileOperator.error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidMobileOperatorError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobileOperatorError);\n    }\n\n    this.message = 'Operator of this number is not recognizable.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidMobilePhoneNumberError.html":{"url":"classes/InvalidMobilePhoneNumberError.html","title":"class - InvalidMobilePhoneNumberError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidMobilePhoneNumberError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidMobilePhoneNumber.error.ts\n        \n\n            \n                Description\n            \n            \n                When mobile phone number is not valid this error will throw.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidMobilePhoneNumber.error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidMobilePhoneNumberError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidMobilePhoneNumberError);\n    }\n\n    this.message = 'This phone number is not valid.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidServiceInputError.html":{"url":"classes/InvalidServiceInputError.html","title":"class - InvalidServiceInputError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidServiceInputError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/InvalidServiceInput.error.ts\n        \n\n            \n                Description\n            \n            \n                This error will throw when input value of the service method is not a valid value.\n\n            \n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(...params: any[])\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/Services/InvalidServiceInput.error.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidServiceInputError extends Error {\n  constructor(...params) {\n    super(...params);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    // @ts-ignore\n    if (Error.captureStackTrace) {\n      // @ts-ignore\n      Error.captureStackTrace(this, InvalidServiceInputError);\n    }\n\n    this.message = 'Invalid value has been passed to the service.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JalaliDateCalculatorService.html":{"url":"injectables/JalaliDateCalculatorService.html","title":"injectable - JalaliDateCalculatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JalaliDateCalculatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts\n        \n\n            \n                Description\n            \n            \n                This class converts Jalali date to Georgian and vase versa. You can use all of the methods as static methods.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validator\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                convertToGeorgian\n                            \n                            \n                                convertToJalali\n                            \n                            \n                                createGDateFromDays\n                            \n                            \n                                firstDayOfJYearInMarch\n                            \n                            \n                                GeorgianYearToJalaliYear\n                            \n                            \n                                jalaliYearToGeorgianYear\n                            \n                            \n                                numberOfPassedGDays\n                            \n                            \n                                numberOfPassedJDays\n                            \n                            \n                                numOfGLeapYears\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(validator: JalaliDateValidatorService)\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validator\n                                                  \n                                                        \n                                                                        JalaliDateValidatorService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convertToGeorgian\n                        \n                        \n                    \n                \n            \n            \n                \nconvertToGeorgian(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:144\n                \n            \n\n\n            \n                \n                    Converts a valid jalali date to a javascript Date object representing a equivalent Georgian date.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a full Jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from 1\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            convertToJalali\n                        \n                        \n                    \n                \n            \n            \n                \nconvertToJalali(gDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:103\n                \n            \n\n\n            \n                \n                    this method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\nATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    gDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Georgian date as a javascript Date object.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         SimpleDateInterface\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createGDateFromDays\n                        \n                        \n                    \n                \n            \n            \n                \ncreateGDateFromDays(numOfDays: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:51\n                \n            \n\n\n            \n                \n                    Creates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    numOfDays\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Date\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            firstDayOfJYearInMarch\n                        \n                        \n                    \n                \n            \n            \n                \nfirstDayOfJYearInMarch(jYear)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:74\n                \n            \n\n\n            \n                \n                    first day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of new jalali year in March.\nThe day number starts from 1 not zero and is equal to the real numbers in the calendar.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            GeorgianYearToJalaliYear\n                        \n                        \n                    \n                \n            \n            \n                \nGeorgianYearToJalaliYear(gYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:92\n                \n            \n\n\n            \n                \n                    Converts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    gYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full georgian year like 2018\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            jalaliYearToGeorgianYear\n                        \n                        \n                    \n                \n            \n            \n                \njalaliYearToGeorgianYear(jYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:84\n                \n            \n\n\n            \n                \n                    Converts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year\nthat starts in the winter of jalali year.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numberOfPassedGDays\n                        \n                        \n                    \n                \n            \n            \n                \nnumberOfPassedGDays(gDate: Date)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:28\n                \n            \n\n\n            \n                \n                    Calculates the Julian Day number from Gregorian or Julian calendar dates.\nOnly some code cleaning applied to the source code.\nThe procedure was tested to be good since 1 March, -100100 (of both calendars) up to a few million years into the future.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    gDate\n                                    \n                                                Date\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an instance of javascript date representing a Georgian date.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numberOfPassedJDays\n                        \n                        \n                    \n                \n            \n            \n                \nnumberOfPassedJDays(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:42\n                \n            \n\n\n            \n                \n                    Returns number of passed days from source day in jalali calendar to the given jalali date.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        day number starts from one\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numOfGLeapYears\n                        \n                        \n                    \n                \n            \n            \n                \nnumOfGLeapYears(targetGYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:65\n                \n            \n\n\n            \n                \n                    This function returns number of passed leap years from AD 621 until targetGYear.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetGYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is full year number like 2018\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            validator\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         JalaliDateValidatorService\n\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\nimport {SimpleDateInterface} from './SimpleDate.interface';\nimport {JalaliDateValidatorService} from './jalali-date-validator.service';\n\n/**\n * This class converts Jalali date to Georgian and vase versa. You can use all of the methods as static methods.\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateCalculatorService {\n\n  constructor(public validator: JalaliDateValidatorService) {}\n\n  /**\n   * Calculates the Julian Day number from Gregorian or Julian calendar dates.\n   *\n   * Only some code cleaning applied to the source code.\n   *\n   * The procedure was tested to be good since 1 March, -100100 (of both calendars) up to a few million years into the future.\n   * @param gDate an instance of javascript date representing a Georgian date.\n   * @see https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L195\n\n   */\n  numberOfPassedGDays(gDate: Date): number {\n    const gMonth = gDate.getMonth() - 7;\n    const gYear = gDate.getFullYear() + 100100;\n    const gMonthDiv = div(gMonth, 6);\n    const result = div((gYear + gMonthDiv) * 1461, 4) + div(153 * mod(gMonth + 17, 12) + 2, 5) + gDate.getDate() - 34840408;\n    return result - div(div(gYear + gMonthDiv, 100) * 3, 4) + 752;\n  }\n\n  /**\n   * Returns number of passed days from source day in jalali calendar to the given jalali date.\n   * @param jYear full jalali year like 1397\n   * @param jMonth starts from zero\n   * @param jDay day number starts from one\n   */\n  numberOfPassedJDays(jYear: number, jMonth: number, jDay: number): number {\n    return this.numberOfPassedGDays(new Date(this.jalaliYearToGeorgianYear(jYear), 2, this.firstDayOfJYearInMarch(jYear))) +\n      jMonth * 31 - div(jMonth + 1, 7) * (jMonth - 6) + jDay - 1;\n  }\n\n  /**\n   * Creates a javascript Date object from number of passed days in Georgian calendar representing Georgian date.\n   * @see https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L213\n   */\n  createGDateFromDays(numOfDays: number): Date {\n    const j = (4 * numOfDays + 139361631) + div(div(4 * numOfDays + 183187720, 146097) * 3, 4) * 4 - 3908;\n    const i = div(mod(j, 1461), 4) * 5 + 308;\n    const gDay = div(mod(i, 153), 5) + 1;\n    const gMonth = mod(div(i, 153), 12);\n    const gYear = div(j, 1461) - 100100 + div(7 - gMonth, 6);\n    return new Date(gYear, gMonth, gDay);\n  }\n\n  /**\n   * This function returns number of passed leap years from AD 621 until targetGYear.\n   * @param targetGYear is full year number like 2018\n   * @see https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L110\n   */\n  numOfGLeapYears(targetGYear: number): number {\n    return div(targetGYear, 4) - div((div(targetGYear, 100) + 1) * 3, 4) - 150;\n  }\n\n  /**\n   * first day of the Farvardin month in Jalali calendar is in March month. This method returns the day number of new jalali year in March.\n   * The day number starts from 1 not zero and is equal to the real numbers in the calendar.\n   * @param jYear full jalali year like 1397\n   */\n  firstDayOfJYearInMarch(jYear): number {\n    const gYear = jYear + 621;\n    return this.validator.numOfJLeapYears(jYear) - this.numOfGLeapYears(gYear) + 20;\n  }\n\n  /**\n   * Converts jalali year number to the georgian year. Output year is the georgian year that jalali year starts within it, not the year\n   * that starts in the winter of jalali year.\n   * @param jYear full jalali year like 1397\n   */\n  jalaliYearToGeorgianYear(jYear: number): number {\n    return jYear + 621;\n  }\n\n  /**\n   * Converts georgian year to the jalali year. Output year is the jalali year that start within the Georgian year.\n   * @param gYear full georgian year like 2018\n   */\n  GeorgianYearToJalaliYear(gYear: number): number {\n    return gYear - 621;\n  }\n\n  /**\n   * this method converts Georgian date to the jalali date. Output is an object implementing SimpleDateInterface.\n   *\n   * ATTENTION: month number starts from 0, but day number starts from 1. Just like native javascript Date object.\n   * @param gDate Georgian date as a javascript Date object.\n   * @see https://github.com/sijad/ts-jalaali/blob/296a7c2fa1816a5bbb0b11bbe3eb03ebc17059f6/src/jalaali.ts#L149\n   */\n  convertToJalali(gDate: Date): SimpleDateInterface {\n    const georgianYear = gDate.getFullYear();\n    let jalaliYear = this.GeorgianYearToJalaliYear(georgianYear);\n    const passedDays = this.numberOfPassedGDays(gDate);\n    const numOfPassedDaysTo1Farvardin = this.numberOfPassedGDays(new Date(georgianYear, 2, this.firstDayOfJYearInMarch(jalaliYear)));\n\n    let jalaliDay: number;\n    let jalaliMonth: number;\n\n    // Find number of days that passed since 1 Farvardin.\n    let numOfDayInJYear = passedDays - numOfPassedDaysTo1Farvardin;\n    if (numOfDayInJYear >= 0) {\n      if (numOfDayInJYear \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JalaliDateValidatorService.html":{"url":"injectables/JalaliDateValidatorService.html","title":"injectable - JalaliDateValidatorService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JalaliDateValidatorService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts\n        \n\n            \n                Description\n            \n            \n                Methods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for\nvalidating Jalali dates without needing to convert them to the Georgian Date.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _maxAcceptableYear\n                            \n                            \n                                    Private\n                                    Static\n                                _minAcceptableYear\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isJYearLeap\n                            \n                            \n                                isValidJDate\n                            \n                            \n                                isValidJDay\n                            \n                            \n                                isValidJMonth\n                            \n                            \n                                isValidJYear\n                            \n                            \n                                jMonthLength\n                            \n                            \n                                numOfJLeapYears\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isJYearLeap\n                        \n                        \n                    \n                \n            \n            \n                \nisJYearLeap(jYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:80\n                \n            \n\n\n            \n                \n                    If JYear is a leap year in jalali Calendar, return true. We using the fact that if a year is leap, number of leap years until that year\nand the year after it is not equal.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        : full jalali year like: 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJDate\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJDate(jYear, jMonth, jDay)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:123\n                \n            \n\n\n            \n                \n                    If Jalali date is not a valid Jalali date, return false. otherwise returns true.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full year number like: 1397\n\n                                    \n                                \n                                \n                                    jMonth\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from zero\n\n                                    \n                                \n                                \n                                    jDay\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        starts from one\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJDay\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJDay(jYear: number, jMonth: number, jDay: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:113\n                \n            \n\n\n            \n                \n                    Checks if day number is in valid range according to the given year and month.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        month number starting from zero\n\n                                    \n                                \n                                \n                                    jDay\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        day number starting from one\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJMonth\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJMonth(jMonth: number, startFromZero: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:97\n                \n            \n\n\n            \n                \n                    Checks if jalali month is in valid range or not. In default, jMonth should start from zero.\nIf you want to start month number from one instead of zero, you should make startFromZero parameter to false.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    jMonth\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    startFromZero\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        true\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidJYear\n                        \n                        \n                    \n                \n            \n            \n                \nisValidJYear(jYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:89\n                \n            \n\n\n            \n                \n                    Checks if jalali year is in acceptable range or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            jMonthLength\n                        \n                        \n                    \n                \n            \n            \n                \njMonthLength(jYear: number, jMonth)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:25\n                \n            \n\n\n            \n                \n                    Returns number of days in a given month counting from 1.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    jYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        full jalali year like 1397\n\n                                    \n                                \n                                \n                                    jMonth\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        number of month from 0 for Farvardin to 11 for Esfand.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            numOfJLeapYears\n                        \n                        \n                    \n                \n            \n            \n                \nnumOfJLeapYears(targetJYear: number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:37\n                \n            \n\n\n            \n                \n                    Calculates the number of the leap years in jalali Calendar.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    targetJYear\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        should be full year like: 1397 and should be between -61 to 3177.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _maxAcceptableYear\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 3177\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _minAcceptableYear\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : -61\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {div, mod} from './ArithmeticUtils';\nimport {InvalidJalaliDateError} from './InvalidJalaliDate.error';\n\n\n/**\n * Methods of this Service doing validation stuff on a Jalali date. You can use this Service using DI in all around of your app for\n * validating Jalali dates without needing to convert them to the Georgian Date.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class JalaliDateValidatorService {\n\n  private static _minAcceptableYear = -61;\n  private static _maxAcceptableYear = 3177;\n\n  constructor() { }\n\n  /**\n   * Returns number of days in a given month counting from 1.\n   * @param jYear full jalali year like 1397\n   * @param jMonth number of month from 0 for Farvardin to 11 for Esfand.\n   */\n  jMonthLength(jYear: number, jMonth): number {\n    if (jMonth = JalaliDateValidatorService._minAcceptableYear && jYear = minMonthNumber && jMonth  0;\n  }\n\n  /**\n   * If Jalali date is not a valid Jalali date, return false. otherwise returns true.\n   * @param jYear full year number like: 1397\n   * @param jMonth starts from zero\n   * @param jDay starts from one\n   */\n  isValidJDate(jYear, jMonth, jDay): boolean {\n    return this.isValidJYear(jYear) && this.isValidJMonth(jMonth) && this.isValidJDay(jYear, jMonth, jDay);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MobilePhoneNumberService.html":{"url":"injectables/MobilePhoneNumberService.html","title":"injectable - MobilePhoneNumberService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MobilePhoneNumberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n        \n\n            \n                Description\n            \n            \n                This service using for validating phone numbers sold by Iranian Mobile operators.\nYou can get operator name and validation result of a phone number by methods of this service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getPhoneNumberOperator\n                            \n                            \n                                isPhoneNumberPatternValid\n                            \n                            \n                                isValidPhoneNumber\n                            \n                            \n                                normalizePhoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPhoneNumberOperator\n                        \n                        \n                    \n                \n            \n            \n                \ngetPhoneNumberOperator(phoneNumber: string, nameInEnglish: boolean)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:83\n                \n            \n\n\n            \n                \n                    Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from\noperatorsNames enum.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                                \n                                    nameInEnglish\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                    \n                                        if true, operator name will return in English. if false operator name will return in persian\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        operator name in english or persian according to the nameInEnglish parameter\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPhoneNumberPatternValid\n                        \n                        \n                    \n                \n            \n            \n                \nisPhoneNumberPatternValid(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:59\n                \n            \n\n\n            \n                \n                    This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.\nThis method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and\nin reality are not a valid phone number.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidPhoneNumber\n                        \n                        \n                    \n                \n            \n            \n                \nisValidPhoneNumber(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            normalizePhoneNumber\n                        \n                        \n                    \n                \n            \n            \n                \nnormalizePhoneNumber(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts:68\n                \n            \n\n\n            \n                \n                    Removes +98 from the phoneNumber and replaces it with a 0 character.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Digits in this string should be english digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {InvalidMobilePhoneNumberError} from './InvalidMobilePhoneNumber.error';\nimport {InvalidMobileOperatorError} from './InvalidMobileOperator.error';\n\n/**\n * English name of mobile operators are enum keys and persian name of them are values.\n * All characters of all of the keys are in lowercase\n */\nexport enum operatorsNames {\n  irancell = 'ایرانسل',\n  mci = 'همراه اول',\n  talia = 'تالیا',\n  rightel = 'رایتل',\n  spadan = 'اسپادان',\n  tkc = 'شبکه مستقل تلفن همراه کیش',\n  shatel = 'شاتل',\n  aptel = 'آپتل',\n  azartel = 'آذرتل',\n  samantel = 'سامانتل',\n  lotustel = 'لوتوس‌تل',\n  anarestan = 'انارستان'\n}\n\n/**\n * A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.\n */\nexport const MobileCodes = {\n  irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],\n  mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],\n  talia: ['0932'],\n  rightel: ['0920', '0921', '0922'],\n  spadan: ['0931'],\n  tkc: ['0934'],\n  shatel: ['099810', '099811', '099812'],\n  aptel: ['099910', '099911', '099913'],\n  azartel: ['099914'],\n  samantel: ['099996', '099997', '099998', '099999'],\n  lotustel: ['09990'],\n  anarestan: ['09944']\n};\n\n/**\n * This service using for validating phone numbers sold by Iranian Mobile operators.\n *\n * You can get operator name and validation result of a phone number by methods of this service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MobilePhoneNumberService {\n\n  /**\n   * This method only checks if phoneNumber follows valid pattern. means starting by +98 or 0, then a 9 digit and then 9 digits.\n   * This method will not check validity of the phoneNumber code and can accept invalid strings those only locking like phone numbers and\n   * in reality are not a valid phone number.\n   * @link isValidPhoneNumber\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  isPhoneNumberPatternValid(phoneNumber: string): boolean {\n    const generalRegex = new RegExp(/^((\\+98|0)9\\d{9})$/);\n    return generalRegex.test(phoneNumber);\n  }\n\n  /**\n   * Removes +98 from the phoneNumber and replaces it with a 0 character.\n   * @param phoneNumber Digits in this string should be english digits.\n   */\n  normalizePhoneNumber(phoneNumber: string): string {\n    return phoneNumber.replace('+98', '0');\n  }\n\n  /**\n   * Checks all codes of all operators in MobileCodes object. IF finds a matched code, returns persian or english name of that operator from\n   * operatorsNames enum.\n   * @return operator name in english or persian according to the nameInEnglish parameter\n   * @throws InvalidMobileOperatorError if pattern is correct but operator code is not valid.\n   * @throws InvalidMobilePhoneNumberError If pattern is not correct\n   * @param phoneNumber Digits in this string should be english digits.\n   * @param nameInEnglish if true, operator name will return in English. if false operator name will return in persian\n   * @link MobileCodes\n   * @link operatorsNames\n   */\n  getPhoneNumberOperator(phoneNumber: string, nameInEnglish: boolean = false): string {\n    if (!this.isPhoneNumberPatternValid(phoneNumber)) { throw new InvalidMobilePhoneNumberError(); }\n    phoneNumber = this.normalizePhoneNumber(phoneNumber);\n    for (const operator of Object.keys(MobileCodes)) {\n      for (const code of MobileCodes[operator]) {\n        if (phoneNumber.indexOf(code) === 0) {\n          return nameInEnglish ? operator : operatorsNames[operator];\n        }\n      }\n    }\n    throw new InvalidMobileOperatorError();\n  }\n\n  /**\n   * @return If phoneNumber follows correct pattern and has valid operator, return true. Otherwise returns false.\n   * @param phoneNumber Digits in this string should be english digits.\n   * @link getPhoneNumberOperator\n   */\n  isValidPhoneNumber(phoneNumber: string): boolean {\n    try {\n      this.getPhoneNumberOperator(phoneNumber);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/NationalCodePipe.html":{"url":"pipes/NationalCodePipe.html","title":"pipe - NationalCodePipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  NationalCodePipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Pipes/nationalCode.pipe.ts\n        \n\n            \n                Description\n            \n            \n                Formats a 10-digit number or string to national code format.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        nationalCode\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Pipes/nationalCode.pipe.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a 10-digit number or a string only contains 10 digits.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            001-236547-5\n                        \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform} from '@angular/core';\n\n/**\n * Formats a 10-digit number or string to national code format.\n */\n@Pipe({name: 'nationalCode'})\nexport class NationalCodePipe implements PipeTransform {\n\n  /**\n   *\n   * @param value a 10-digit number or a string only contains 10 digits.\n   * @example 001-236547-5\n   */\n  transform(value: string | number): any {\n    value = String(value);\n    if (value.length !== 10) { throw new Error(`${value} is not a acceptable national code.`); }\n    return `${value.substring(0, 3)}-${value.substring(3, 9)}-${value[9]}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxPersianModule.html":{"url":"modules/NgxPersianModule.html","title":"module - NgxPersianModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxPersianModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxPersianModule\n\n\n\ncluster_NgxPersianModule_declarations\n\n\n\ncluster_NgxPersianModule_exports\n\n\n\n\nEnNumPipe\n\nEnNumPipe\n\n\n\nNgxPersianModule\n\nNgxPersianModule\n\nNgxPersianModule -->\n\nEnNumPipe->NgxPersianModule\n\n\n\n\n\nFaNumPipe\n\nFaNumPipe\n\nNgxPersianModule -->\n\nFaNumPipe->NgxPersianModule\n\n\n\n\n\nIRCurrencyPipe\n\nIRCurrencyPipe\n\nNgxPersianModule -->\n\nIRCurrencyPipe->NgxPersianModule\n\n\n\n\n\nNationalCodePipe\n\nNationalCodePipe\n\nNgxPersianModule -->\n\nNationalCodePipe->NgxPersianModule\n\n\n\n\n\nPersianLetterDirective\n\nPersianLetterDirective\n\nNgxPersianModule -->\n\nPersianLetterDirective->NgxPersianModule\n\n\n\n\n\nPersianNumbersDirective\n\nPersianNumbersDirective\n\nNgxPersianModule -->\n\nPersianNumbersDirective->NgxPersianModule\n\n\n\n\n\nEnNumPipe \n\nEnNumPipe \n\nEnNumPipe  -->\n\nNgxPersianModule->EnNumPipe \n\n\n\n\n\nFaNumPipe \n\nFaNumPipe \n\nFaNumPipe  -->\n\nNgxPersianModule->FaNumPipe \n\n\n\n\n\nIRCurrencyPipe \n\nIRCurrencyPipe \n\nIRCurrencyPipe  -->\n\nNgxPersianModule->IRCurrencyPipe \n\n\n\n\n\nNationalCodePipe \n\nNationalCodePipe \n\nNationalCodePipe  -->\n\nNgxPersianModule->NationalCodePipe \n\n\n\n\n\nPersianLetterDirective \n\nPersianLetterDirective \n\nPersianLetterDirective  -->\n\nNgxPersianModule->PersianLetterDirective \n\n\n\n\n\nPersianNumbersDirective \n\nPersianNumbersDirective \n\nPersianNumbersDirective  -->\n\nNgxPersianModule->PersianNumbersDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/ngx-persian.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            EnNumPipe\n                        \n                        \n                            FaNumPipe\n                        \n                        \n                            IRCurrencyPipe\n                        \n                        \n                            NationalCodePipe\n                        \n                        \n                            PersianLetterDirective\n                        \n                        \n                            PersianNumbersDirective\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EnNumPipe\n                        \n                        \n                            FaNumPipe\n                        \n                        \n                            IRCurrencyPipe\n                        \n                        \n                            NationalCodePipe\n                        \n                        \n                            PersianLetterDirective\n                        \n                        \n                            PersianNumbersDirective\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport {PersianLetterDirective, PersianNumbersDirective} from './Validators/persian-directives';\nimport {FaNumPipe} from './Pipes/faNum.pipe';\nimport {EnNumPipe} from './Pipes/enNum.pipe';\nimport {IRCurrencyPipe} from './Pipes/IRCurrency.pipe';\nimport {NationalCodePipe} from './Pipes/nationalCode.pipe';\n\n@NgModule({\n  declarations: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe],\n  imports: [],\n  exports: [PersianLetterDirective, PersianNumbersDirective, FaNumPipe, EnNumPipe, IRCurrencyPipe, NationalCodePipe]\n})\nexport class NgxPersianModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PLOptions.html":{"url":"interfaces/PLOptions.html","title":"interface - PLOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PLOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n        \n\n            \n                Description\n            \n            \n                isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        enDigits\n                                \n                                \n                                            Optional\n                                        persianDigits\n                                \n                                \n                                            Optional\n                                        symbols\n                                \n                                \n                                            Optional\n                                        whitespaces\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enDigits\n                                    \n                                \n                                \n                                    \n                                        enDigits:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        persianDigits\n                                    \n                                \n                                \n                                    \n                                        persianDigits:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbols\n                                    \n                                \n                                \n                                    \n                                        symbols:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        whitespaces\n                                    \n                                \n                                \n                                    \n                                        whitespaces:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {PersianNumberService} from './persian-number.service';\n\n/**\n * isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n */\nexport interface PLOptions {\n  persianDigits?: boolean;\n  enDigits?: boolean;\n  symbols?: boolean;\n  whitespaces?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service brings validation of persian texts to the program and let you convert some not-persian letters with persian ones.\n *\n */\nexport class PersianLetterService implements PersianService {\n\n  static PERSIAN_LETTERS_PATTERN = '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654';\n  private static SYMBOLS_PATTERN = '؟$-/:-?،{-~!\"^_`\\\\[\\\\]';\n  static WHITESPACES_PATTERN = '\\\\s';\n\n  /**\n   * According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\n   * elements those specified in the options object plus persian letters.\n   * @return a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n   * @param options\n   */\n  private static _stringValidationRegex(options: PLOptions): RegExp {\n    let result = '';\n    if (options.enDigits) { result += '0-9'; }\n    if (options.symbols) { result += PersianLetterService.SYMBOLS_PATTERN; }\n    if (options.whitespaces) { result += PersianLetterService.WHITESPACES_PATTERN; }\n    if (options.persianDigits) { result += PersianNumberService.persianNumberPattern; }\n    // language=JSRegexp\n    return new RegExp(`[${result + PersianLetterService.PERSIAN_LETTERS_PATTERN}]`, 'g');\n  }\n\n  /**\n   * This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\n   * If match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\n   * occurred in the input value.\n   * @param value\n   * @param options\n   * @return a number greater equal to 0 representing number of matches occurred in the input value.\n   */\n  private static _getMatchedPatternLength(value: string, options: PLOptions): number {\n    const matchResult = value.match(PersianLetterService._stringValidationRegex(options));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n   * @param value\n   */\n  containsPersian(value: string): boolean {\n    if (value === undefined || value === null) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianLetterService.PERSIAN_LETTERS_PATTERN}]`);\n    return value.trim() ? persianRegex.test(value) : true;\n  }\n\n  /**\n   * Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\n   * Result of validation on existence  of other characters controls by options parameter.\n   * @param value\n   * @param options controlling validation result on existence  of other characters controls by options parameter. Fields:\n   *        persianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters\n   *        enDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\n   *        symbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\n   *                 symbols list: ?$-/:؟!~\"'^_-[]{}()%&*>\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/PersianLetterDirective.html":{"url":"directives/PersianLetterDirective.html","title":"directive - PersianLetterDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  PersianLetterDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Validators/persian-directives.ts\n        \n\n            \n                Description\n            \n            \n                You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\nFor setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n            \n                Example\n            \n            \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: PersianLetterDirective }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        persianLettersValidator\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                PersianLetterDirective\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        PersianLetterDirective\n                    \n                \n                \n                    \n                        Type :         PLOptions\n\n                    \n                \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Validators/persian-directives.ts:38\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Validators/persian-directives.ts:45\n                \n            \n\n\n            \n                \n                    Only a wrapper for persianLettersValidator validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type | null\n\n                    \n                    \n                        null for success or ValidationError for invalid inputs\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport {persianLettersValidator, persianNumbersValidator} from './persian-validators';\nimport {PLOptions} from '../Services/persian-letter.service';\n\n\n/**\n * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n * @link persianLettersValidator\n */\n@Directive({\n  selector: 'PersianNumbersDirective',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianNumbersDirective}]\n})\nexport class PersianNumbersDirective implements Validator {\n\n  /**\n   * Only a wrapper for persianNumbersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianNumbersValidator()(control);\n  }\n}\n\n/**\n * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\n * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n * @link persianLettersValidator\n */\n@Directive({\n  selector: 'persianLettersValidator',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianLetterDirective}]\n})\nexport class PersianLetterDirective implements Validator {\n\n  @Input('PersianLetterDirective') options: PLOptions;\n\n  /**\n   * Only a wrapper for persianLettersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianLettersValidator(this.options)(control);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersianLetterService.html":{"url":"injectables/PersianLetterService.html","title":"injectable - PersianLetterService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersianLetterService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                PERSIAN_LETTERS_PATTERN\n                            \n                            \n                                    Private\n                                    Static\n                                SYMBOLS_PATTERN\n                            \n                            \n                                    Static\n                                WHITESPACES_PATTERN\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _getMatchedPatternLength\n                            \n                            \n                                    Private\n                                    Static\n                                _stringValidationRegex\n                            \n                            \n                                containsPersian\n                            \n                            \n                                isPersian\n                            \n                            \n                                toPersian\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _getMatchedPatternLength\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getMatchedPatternLength(value: string, options: PLOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:53\n                \n            \n\n\n            \n                \n                    This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\nIf match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\noccurred in the input value.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                                PLOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        a number greater equal to 0 representing number of matches occurred in the input value.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _stringValidationRegex\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _stringValidationRegex(options: PLOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:35\n                \n            \n\n\n            \n                \n                    According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\nelements those specified in the options object plus persian letters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                PLOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     RegExp\n\n                    \n                    \n                        a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            containsPersian\n                        \n                        \n                    \n                \n            \n            \n                \ncontainsPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:62\n                \n            \n\n\n            \n                \n                    If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPersian\n                        \n                        \n                    \n                \n            \n            \n                \nisPersian(value: string, options: PLOptions)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:81\n                \n            \n\n\n            \n                \n                    Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\nResult of validation on existence  of other characters controls by options parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                    \n                                \n                                \n                                    options\n                                    \n                                                PLOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {\n                                                  persianDigits: false,\n                                                  enDigits: false,\n                                                  symbols: true,\n                                                  whitespaces: true}\n                                    \n\n                                    \n                                        controlling validation result on existence  of other characters controls by options parameter. Fields:\npersianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters\nenDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\nsymbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\nsymbols list: ?$-/:؟!~\"'^_-[]{}()%&*>\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toPersian\n                        \n                        \n                    \n                \n            \n            \n                \ntoPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:94\n                \n            \n\n\n            \n                \n                    Converts arabic letters: ي and ك to persian corresponding letters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            PERSIAN_LETTERS_PATTERN\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            SYMBOLS_PATTERN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '؟$-/:-?،{-~!\"^_`\\\\[\\\\]'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            WHITESPACES_PATTERN\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '\\\\s'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-letter.service.ts:27\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {PersianNumberService} from './persian-number.service';\n\n/**\n * isPersian options parameter object should implement this interface. Fields descriptions are in the isPersian method document.\n */\nexport interface PLOptions {\n  persianDigits?: boolean;\n  enDigits?: boolean;\n  symbols?: boolean;\n  whitespaces?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * This service brings validation of persian texts to the program and let you convert some not-persian letters with persian ones.\n *\n */\nexport class PersianLetterService implements PersianService {\n\n  static PERSIAN_LETTERS_PATTERN = '\\u06A9\\u06AF\\u06C0\\u06CC\\u060C\\u062A\\u062B\\u062C\\u062D\\u062E\\u062F\\u063A\\u064A\\u064B\\u064C' +\n                                       '\\u064D\\u064E\\u064F\\u067E\\u0670\\u0686\\u0698\\u200C\\u0621-\\u0629\\u0630-\\u0639\\u0641-\\u0654';\n  private static SYMBOLS_PATTERN = '؟$-/:-?،{-~!\"^_`\\\\[\\\\]';\n  static WHITESPACES_PATTERN = '\\\\s';\n\n  /**\n   * According to the options values, returns a RegExp object. The regex pattern of it contains regex of finding each of\n   * elements those specified in the options object plus persian letters.\n   * @return a RegExp object that can use in searching a string for special characters (persian letters and others specified in the options)\n   * @param options\n   */\n  private static _stringValidationRegex(options: PLOptions): RegExp {\n    let result = '';\n    if (options.enDigits) { result += '0-9'; }\n    if (options.symbols) { result += PersianLetterService.SYMBOLS_PATTERN; }\n    if (options.whitespaces) { result += PersianLetterService.WHITESPACES_PATTERN; }\n    if (options.persianDigits) { result += PersianNumberService.persianNumberPattern; }\n    // language=JSRegexp\n    return new RegExp(`[${result + PersianLetterService.PERSIAN_LETTERS_PATTERN}]`, 'g');\n  }\n\n  /**\n   * This method gets regex of persian letters and other chars specified in the options and then splits the input value by that regex.\n   * If match result is null - there is no match - returns 0. otherwise returns length of the match array that shows number of matched\n   * occurred in the input value.\n   * @param value\n   * @param options\n   * @return a number greater equal to 0 representing number of matches occurred in the input value.\n   */\n  private static _getMatchedPatternLength(value: string, options: PLOptions): number {\n    const matchResult = value.match(PersianLetterService._stringValidationRegex(options));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * If input value contains any persian letter or is an empty string, returns true. otherwise returns false.\n   * @param value\n   */\n  containsPersian(value: string): boolean {\n    if (value === undefined || value === null) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianLetterService.PERSIAN_LETTERS_PATTERN}]`);\n    return value.trim() ? persianRegex.test(value) : true;\n  }\n\n  /**\n   * Checks if input value is a persian text or not. If input value contains any letter that is not persian, the output will be false.\n   * Result of validation on existence  of other characters controls by options parameter.\n   * @param value\n   * @param options controlling validation result on existence  of other characters controls by options parameter. Fields:\n   *        persianDigits: if sets to true, validation result will be true if input value contains persian digits plus persian letters\n   *        enDigits: if sets to true, validation result will be true if input value contains english digits plus persian letters\n   *        symbols: if sets to true, validation result will be true if input value contains specific symbols plus persian letters.\n   *                 symbols list: ?$-/:؟!~\"'^_-[]{}()%&*>\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PersianNumberService.html":{"url":"injectables/PersianNumberService.html","title":"injectable - PersianNumberService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PersianNumberService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-number.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                englishNumbersTable\n                            \n                            \n                                    Static\n                                persianNumberPattern\n                            \n                            \n                                    Private\n                                    Static\n                                persianNumbersTable\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _getMatchedPatternLength\n                            \n                            \n                                arabicToPersian\n                            \n                            \n                                containsPersian\n                            \n                            \n                                isPersian\n                            \n                            \n                                toEnglish\n                            \n                            \n                                toPersian\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _getMatchedPatternLength\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getMatchedPatternLength(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:30\n                \n            \n\n\n            \n                \n                    splits input value by persian letters and then returns length of matched array.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        0 if input value has no persian letter, numbers of persian letters in the input value otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            arabicToPersian\n                        \n                        \n                    \n                \n            \n            \n                \narabicToPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:49\n                \n            \n\n\n            \n                \n                    Converts arabic numbers to the persian ones.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            containsPersian\n                        \n                        \n                    \n                \n            \n            \n                \ncontainsPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:18\n                \n            \n\n\n            \n                \n                    Checks if input value contains any persian number or not.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if input value contains any persian number. false otherwise.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPersian\n                        \n                        \n                    \n                \n            \n            \n                \nisPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:40\n                \n            \n\n\n            \n                \n                    Checks if input value contains only persian letters.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toEnglish\n                        \n                        \n                    \n                \n            \n            \n                \ntoEnglish(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:76\n                \n            \n\n\n            \n                \n                    Convert persian numbers in input value to the english numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toPersian\n                        \n                        \n                    \n                \n            \n            \n                \ntoPersian(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:59\n                \n            \n\n\n            \n                \n                    Converts all arabic and english numbers to the persian numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            englishNumbersTable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            persianNumberPattern\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '\\u06F0-\\u06F9'\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            persianNumbersTable\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9']\n                        \n                    \n                        \n                            \n                                    Defined in projects/ngx-persian/src/lib/Services/persian-number.service.ts:10\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport {PersianService} from './persian-service';\nimport {InvalidServiceInputError} from './InvalidServiceInput.error';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PersianNumberService implements PersianService {\n  static persianNumberPattern = '\\u06F0-\\u06F9';\n  private static persianNumbersTable = ['\\u06F0', '\\u06F1', '\\u06F2', '\\u06F3', '\\u06F4', '\\u06F5', '\\u06F6', '\\u06F7', '\\u06F8', '\\u06F9'];\n  private static englishNumbersTable = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n  /**\n   * Checks if input value contains any persian number or not.\n   * @param value\n   * @return true if input value contains any persian number. false otherwise.\n   */\n  containsPersian(value: string): boolean {\n    if (!value) { return false; }\n    // language=JSRegexp\n    const persianRegex = new RegExp(`[${PersianNumberService.persianNumberPattern}]`);\n    return persianRegex.test(value);\n  }\n\n  /**\n   * splits input value by persian letters and then returns length of matched array.\n   * @param value\n   * @return 0 if input value has no persian letter, numbers of persian letters in the input value otherwise.\n   */\n  private static _getMatchedPatternLength(value: string): number {\n    // language=JSRegexp\n    const matchResult = value.match(new RegExp(`[${PersianNumberService.persianNumberPattern}]`, 'g'));\n    return matchResult ? matchResult.length : 0;\n  }\n\n  /**\n   * Checks if input value contains only persian letters.\n   * @param value\n   */\n  isPersian(value: string): boolean {\n    if (!value) {return false; }\n    return value.length === PersianNumberService._getMatchedPatternLength(value);\n  }\n\n  /**\n   * Converts arabic numbers to the persian ones.\n   * @param value\n   */\n  arabicToPersian(value: string): string {\n    return value.replace(/٤/g, PersianNumberService.persianNumbersTable[4])\n                .replace(/٥/g, PersianNumberService.persianNumbersTable[5])\n                .replace(/٦/g, PersianNumberService.persianNumbersTable[6]);\n  }\n\n  /**\n   * Converts all arabic and english numbers to the persian numbers.\n   * @param value\n   */\n  toPersian(value: string | number): string {\n    if (value === undefined || value === null) {throw new InvalidServiceInputError(); }\n    value = value.toString();\n    value = this.arabicToPersian(value);\n    let regex: RegExp;\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/PersianNumbersDirective.html":{"url":"directives/PersianNumbersDirective.html","title":"directive - PersianNumbersDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  PersianNumbersDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Validators/persian-directives.ts\n        \n\n            \n                Description\n            \n            \n                You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n\n            \n\n            \n                Implements\n            \n            \n                            Validator\n            \n\n            \n                Example\n            \n            \n            \n\n        \n            Metadata\n            \n                \n                    \n                        Providers\n                        \n                            \n                                { provide: NG_VALIDATORS, useExisting: PersianNumbersDirective }\n                            \n                        \n                    \n\n                    \n                        Selector\n                        PersianNumbersDirective\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \nvalidate(control: AbstractControl)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Validators/persian-directives.ts:22\n                \n            \n\n\n            \n                \n                    Only a wrapper for persianNumbersValidator validator function.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    control\n                                    \n                                                AbstractControl\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type | null\n\n                    \n                    \n                        null for success or ValidationError for invalid inputs\n\n                    \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import {Directive, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, Validator} from '@angular/forms';\nimport {persianLettersValidator, persianNumbersValidator} from './persian-validators';\nimport {PLOptions} from '../Services/persian-letter.service';\n\n\n/**\n * You can add PersianNumbersDirective property to your input tag for using persianNumbersValidator function on its value.\n * @link persianLettersValidator\n */\n@Directive({\n  selector: 'PersianNumbersDirective',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianNumbersDirective}]\n})\nexport class PersianNumbersDirective implements Validator {\n\n  /**\n   * Only a wrapper for persianNumbersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianNumbersValidator()(control);\n  }\n}\n\n/**\n * You can add PersianLetterDirective property to your input tag for using persianNumbersValidator function on its value\n * For setting options value, you can simply set PersianLetterDirective property equal to the PLOptions object.\n * @link persianLettersValidator\n */\n@Directive({\n  selector: 'persianLettersValidator',\n  providers: [{provide: NG_VALIDATORS, useExisting: PersianLetterDirective}]\n})\nexport class PersianLetterDirective implements Validator {\n\n  @Input('PersianLetterDirective') options: PLOptions;\n\n  /**\n   * Only a wrapper for persianLettersValidator validator function.\n   * @param control\n   * @return null for success or ValidationError for invalid inputs\n   */\n  validate(control: AbstractControl): {[key: string]: any} | null {\n    return persianLettersValidator(this.options)(control);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PersianService.html":{"url":"interfaces/PersianService.html","title":"interface - PersianService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PersianService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/Services/persian-service.ts\n        \n\n            \n                Description\n            \n            \n                All services those want to serve conversion to persian language should implement this interface.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    containsPersian\n                                \n                                \n                                    isPersian\n                                \n                                \n                                    toPersian\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            containsPersian\n                        \n                        \n                    \n                \n            \n            \n                \ncontainsPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-service.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isPersian\n                        \n                        \n                    \n                \n            \n            \n                \nisPersian(value: string)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-service.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            toPersian\n                        \n                        \n                    \n                \n            \n            \n                \ntoPersian(value: string | number)\n                \n            \n\n\n            \n                \n                    Defined in projects/ngx-persian/src/lib/Services/persian-service.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            string | number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface PersianService {\n\n  isPersian(value: string): boolean;\n\n  toPersian(value: string | number): string;\n\n  containsPersian(value: string): boolean;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SimpleDateInterface.html":{"url":"interfaces/SimpleDateInterface.html","title":"interface - SimpleDateInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SimpleDateInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            projects/ngx-persian/src/lib/JDate/SimpleDate.interface.ts\n        \n\n            \n                Description\n            \n            \n                A simple interface for grouping three important numbers of a date together: Year, month and day.\nNumbers could be in any calendar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        day\n                                \n                                \n                                        month\n                                \n                                \n                                        year\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        day\n                                    \n                                \n                                \n                                    \n                                        day:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        month\n                                    \n                                \n                                \n                                    \n                                        month:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        year\n                                    \n                                \n                                \n                                    \n                                        year:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SimpleDateInterface {\n  year: number;\n  month: number;\n  day: number;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n            \n            function\n            div\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n            \n            function\n            mod\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n            \n            function\n            round\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/InvalidJalaliDate.error.ts\n            \n            class\n            InvalidJalaliDateError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/SimpleDate.interface.ts\n            \n            interface\n            SimpleDateInterface\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/jalali-date-calculator.service.ts\n            \n            injectable\n            JalaliDateCalculatorService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/jalali-date-validator.service.ts\n            \n            injectable\n            JalaliDateValidatorService\n            \n                72 %\n                (8/11)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/JDate/jdate.ts\n            \n            class\n            JDate\n            \n                45 %\n                (35/77)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts\n            \n            pipe\n            IRCurrencyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/enNum.pipe.ts\n            \n            pipe\n            EnNumPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/faNum.pipe.ts\n            \n            pipe\n            FaNumPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Pipes/nationalCode.pipe.ts\n            \n            pipe\n            NationalCodePipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidMobileOperator.error.ts\n            \n            class\n            InvalidMobileOperatorError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidMobilePhoneNumber.error.ts\n            \n            class\n            InvalidMobilePhoneNumberError\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/InvalidServiceInput.error.ts\n            \n            class\n            InvalidServiceInputError\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n            \n            injectable\n            MobilePhoneNumberService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n            \n            variable\n            MobileCodes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n            \n            injectable\n            PersianLetterService\n            \n                55 %\n                (5/9)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-letter.service.ts\n            \n            interface\n            PLOptions\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-number.service.ts\n            \n            injectable\n            PersianNumberService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Services/persian-service.ts\n            \n            interface\n            PersianService\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-directives.ts\n            \n            directive\n            PersianLetterDirective\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-directives.ts\n            \n            directive\n            PersianNumbersDirective\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-validators.ts\n            \n            function\n            persianLettersValidator\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                projects/ngx-persian/src/lib/Validators/persian-validators.ts\n            \n            function\n            persianNumbersValidator\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~7.2.0\n        \n            @angular/common : ~7.2.0\n        \n            @angular/compiler : ~7.2.0\n        \n            @angular/core : ~7.2.0\n        \n            @angular/forms : ~7.2.0\n        \n            @angular/platform-browser : ~7.2.0\n        \n            @angular/platform-browser-dynamic : ~7.2.0\n        \n            @angular/router : ~7.2.0\n        \n            core-js : ^2.5.4\n        \n            rxjs : ~6.3.3\n        \n            tslib : ^1.9.0\n        \n            typedoc : ^0.14.2\n        \n            zone.js : ~0.8.26\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IRCurrencies   (projects/.../IRCurrency.pipe.ts)\n                        \n                        \n                            operatorsNames   (projects/.../mobile-phone-number.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-persian/src/lib/Pipes/IRCurrency.pipe.ts\n    \n        \n            \n                \n                    \n                        \n                        IRCurrencies\n                    \n                \n                        \n                            \n                                 rial\n                            \n                        \n                        \n                            \n                                Value : ریال\n                            \n                        \n                        \n                            \n                                 r\n                            \n                        \n                        \n                            \n                                Value : ریال\n                            \n                        \n                        \n                            \n                                 toman\n                            \n                        \n                        \n                            \n                                Value : تومان\n                            \n                        \n                        \n                            \n                                 t\n                            \n                        \n                        \n                            \n                                Value : تومان\n                            \n                        \n            \n        \n\n    projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n    \n        \n            \n                \n                    \n                        \n                        operatorsNames\n                    \n                \n                    \n                        \n                            English name of mobile operators are enum keys and persian name of them are values.\nAll characters of all of the keys are in lowercase\n\n                        \n                    \n                        \n                            \n                                 irancell\n                            \n                        \n                        \n                            \n                                Value : ایرانسل\n                            \n                        \n                        \n                            \n                                 mci\n                            \n                        \n                        \n                            \n                                Value : همراه اول\n                            \n                        \n                        \n                            \n                                 talia\n                            \n                        \n                        \n                            \n                                Value : تالیا\n                            \n                        \n                        \n                            \n                                 rightel\n                            \n                        \n                        \n                            \n                                Value : رایتل\n                            \n                        \n                        \n                            \n                                 spadan\n                            \n                        \n                        \n                            \n                                Value : اسپادان\n                            \n                        \n                        \n                            \n                                 tkc\n                            \n                        \n                        \n                            \n                                Value : شبکه مستقل تلفن همراه کیش\n                            \n                        \n                        \n                            \n                                 shatel\n                            \n                        \n                        \n                            \n                                Value : شاتل\n                            \n                        \n                        \n                            \n                                 aptel\n                            \n                        \n                        \n                            \n                                Value : آپتل\n                            \n                        \n                        \n                            \n                                 azartel\n                            \n                        \n                        \n                            \n                                Value : آذرتل\n                            \n                        \n                        \n                            \n                                 samantel\n                            \n                        \n                        \n                            \n                                Value : سامانتل\n                            \n                        \n                        \n                            \n                                 lotustel\n                            \n                        \n                        \n                            \n                                Value : لوتوس‌تل\n                            \n                        \n                        \n                            \n                                 anarestan\n                            \n                        \n                        \n                            \n                                Value : انارستان\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            div   (projects/.../ArithmeticUtils.ts)\n                        \n                        \n                            mod   (projects/.../ArithmeticUtils.ts)\n                        \n                        \n                            persianLettersValidator   (projects/.../persian-validators.ts)\n                        \n                        \n                            persianNumbersValidator   (projects/.../persian-validators.ts)\n                        \n                        \n                            round   (projects/.../ArithmeticUtils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-persian/src/lib/JDate/ArithmeticUtils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            div\n                        \n                        \n                    \n                \n            \n            \n                \ndiv(num1, num2)\n                \n            \n\n\n\n\n            \n                \n                    This function returns integer part of division result of num1 and num2 numbers.\nFor example: div (10, 3) is equal to 3.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num1\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    num2\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mod\n                        \n                        \n                    \n                \n            \n            \n                \nmod(num1, num2)\n                \n            \n\n\n\n\n            \n                \n                    This function return arithmetic mod result of two inputs as a integer.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    num1\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    num2\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            round\n                        \n                        \n                    \n                \n            \n            \n                \nround(x)\n                \n            \n\n\n\n\n            \n                \n                    This function removes fraction part of the number if exists. So, for example, it will turn -145,455 to -145 and\n145,455 to 145.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    x\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    projects/ngx-persian/src/lib/Validators/persian-validators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            persianLettersValidator\n                        \n                        \n                    \n                \n            \n            \n                \npersianLettersValidator(options, persianLetterService)\n                \n            \n\n\n\n\n            \n                \n                    Reactive form validator that checks form control value contains only persian letters and allowed characters in the options parameter.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        see documents of isPersian method of the PersianLetterService for more info about options.\n\n                                    \n                                \n                                \n                                    persianLetterService\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            persianNumbersValidator\n                        \n                        \n                    \n                \n            \n            \n                \npersianNumbersValidator(persianNumberService)\n                \n            \n\n\n\n\n            \n                \n                    Reactive form validator that checks form control value contains only persian numbers.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    persianNumberService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ValidatorFn\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgxPersian\nA full featured tool set for Persian Application Created by Angular (v > 2) containing Pipes, Services, Directives and javascript Similar Date object for working with Jalali Date.\nYou can use Tools provided by this library for:\n- Converting English numbers to Persian numbers and vise versa \n- Validating persian text with different options\n- Validating persian numbers for numeric inputs\n- Converting and validating Jalali Date and time like native javascript Date object\n- Formatting currency values in Rial or Toman currency type with flexable options.\n- Formatting Iranian National Number\n- Validating phone numbers of Iranian Mobile operators.\n- Getting operator name of a phone number in English or Persian\n- Validating reactive and template-base form inputs for persian numbers or texts.\nHow to Install?\nFor installing this library, you can simply run following command in your Angular app root:\nnpm install ngx-persian --save\nFor installing the library globally, you can run following command instead:\nnpm install ngx-persian -g\nDocuments\nShort documentation of the library is here. For more detailed documents, you can see the code document.\nPipes\nWe are using pipes for formatting values in the templates. We Have 4 Different pipes in the ngx-persian for formatting stuff needed by the persian app developers:\nfaNum\nThis pipe replaces all the English and Arabic digits to the Persian Digits without any need for additional code or parameter.\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {FaNumPipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nFaNumPipe,\nNow you can this pipe anywhere you like in your templates.\nFor example, if we want to convert non-english digits in a attribute named: englishTextDigit, we can use this code in our template:\n{{englishTextDigit | faNum}}\nenNum\nThis pipe replaces all the Persian Digits to English digits without any need for additional code or parameter.\nFor using this pipe, firstly you need to import the pipe from the library in your module:\nimport {EnNumPipe} from 'ngx-persian';\nThen, like any other pipe, you need to declare the pipe in your module. For this, you should add following line in the declarations array of the @NgModule of your module:\nEnNumPipe,\nNow you can this pipe anywhere you like in your templates.\nFor example, if we want to convert persian digits in a attribute named: persianTextDigit, we can use this code in our template:\n{{persianTextDigit | enNum}}\nYou can see the example usage of these pipes in below GIF:\n\nStill have questions? see the related part of example app or see related section in code document. \nAlso you can see unit tests of FaNumPipe and unit tests of EnNumPipe for more examples of how input and outputs could be. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2019 Mr Alihoseiny\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxPersianModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxPersianModule\n\n\n\ncluster_NgxPersianModule_declarations\n\n\n\ncluster_NgxPersianModule_exports\n\n\n\n\nEnNumPipe\n\nEnNumPipe\n\n\n\nNgxPersianModule\n\nNgxPersianModule\n\nNgxPersianModule -->\n\nEnNumPipe->NgxPersianModule\n\n\n\n\n\nFaNumPipe\n\nFaNumPipe\n\nNgxPersianModule -->\n\nFaNumPipe->NgxPersianModule\n\n\n\n\n\nIRCurrencyPipe\n\nIRCurrencyPipe\n\nNgxPersianModule -->\n\nIRCurrencyPipe->NgxPersianModule\n\n\n\n\n\nNationalCodePipe\n\nNationalCodePipe\n\nNgxPersianModule -->\n\nNationalCodePipe->NgxPersianModule\n\n\n\n\n\nPersianLetterDirective\n\nPersianLetterDirective\n\nNgxPersianModule -->\n\nPersianLetterDirective->NgxPersianModule\n\n\n\n\n\nPersianNumbersDirective\n\nPersianNumbersDirective\n\nNgxPersianModule -->\n\nPersianNumbersDirective->NgxPersianModule\n\n\n\n\n\nEnNumPipe \n\nEnNumPipe \n\nEnNumPipe  -->\n\nNgxPersianModule->EnNumPipe \n\n\n\n\n\nFaNumPipe \n\nFaNumPipe \n\nFaNumPipe  -->\n\nNgxPersianModule->FaNumPipe \n\n\n\n\n\nIRCurrencyPipe \n\nIRCurrencyPipe \n\nIRCurrencyPipe  -->\n\nNgxPersianModule->IRCurrencyPipe \n\n\n\n\n\nNationalCodePipe \n\nNationalCodePipe \n\nNationalCodePipe  -->\n\nNgxPersianModule->NationalCodePipe \n\n\n\n\n\nPersianLetterDirective \n\nPersianLetterDirective \n\nPersianLetterDirective  -->\n\nNgxPersianModule->PersianLetterDirective \n\n\n\n\n\nPersianNumbersDirective \n\nPersianNumbersDirective \n\nPersianNumbersDirective  -->\n\nNgxPersianModule->PersianNumbersDirective \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MobileCodes   (projects/.../mobile-phone-number.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    projects/ngx-persian/src/lib/Services/mobile-phone-number.service.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MobileCodes\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  irancell: ['0901', '0902', '0903', '0904', '0905', '0930', '0933', '0935', '0936', '0937', '0938', '0939', '0941'],\n  mci: ['0910', '0911', '0912', '0913', '0914', '0915', '0916', '0917', '0918', '0919', '0990', '0991', '0992'],\n  talia: ['0932'],\n  rightel: ['0920', '0921', '0922'],\n  spadan: ['0931'],\n  tkc: ['0934'],\n  shatel: ['099810', '099811', '099812'],\n  aptel: ['099910', '099911', '099913'],\n  azartel: ['099914'],\n  samantel: ['099996', '099997', '099998', '099999'],\n  lotustel: ['09990'],\n  anarestan: ['09944']\n}\n                        \n                    \n\n                \n                    \n                        A constant object. Keys are Mobile operator names and values are arrays those keep mobile codes.\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
